
ROS_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001166c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c1c  08011810  08011810  00021810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801242c  0801242c  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  0801242c  0801242c  0002242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012434  08012434  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012434  08012434  00022434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801243c  0801243c  0002243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08012440  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db4c  20000110  08012550  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dc5c  08012550  0003dc5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198ed  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d21  00000000  00000000  00049aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0004d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110a  00000000  00000000  0004edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bbf1  00000000  00000000  0004fee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a144  00000000  00000000  0006bad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a328a  00000000  00000000  00085c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069e8  00000000  00000000  00128ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0012f88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080117f4 	.word	0x080117f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	080117f4 	.word	0x080117f4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ce:	f000 b9bb 	b.w	8000648 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000658:	f005 faac 	bl	8005bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800065c:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000664:	f000 f980 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000668:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	f040 808e 	bne.w	8000792 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01d      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800067c:	2208      	movs	r2, #8
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	2b00      	cmp	r3, #0
 800068c:	d014      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	3308      	adds	r3, #8
 8000696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006b4:	bf00      	nop
 80006b6:	e7fe      	b.n	80006b6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d069      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d864      	bhi.n	8000792 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006c8:	4b40      	ldr	r3, [pc, #256]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d2:	e004      	b.n	80006de <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d903      	bls.n	80006f0 <pvPortMallocMicroROS+0xa4>
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f1      	bne.n	80006d4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d04b      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2208      	movs	r2, #8
 8000700:	4413      	add	r3, r2
 8000702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	2308      	movs	r3, #8
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	429a      	cmp	r2, r3
 800071a:	d91f      	bls.n	800075c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00a      	beq.n	8000744 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	613b      	str	r3, [r7, #16]
}
 8000740:	bf00      	nop
 8000742:	e7fe      	b.n	8000742 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f000 f968 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d203      	bcs.n	800077e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 800077c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000792:	f005 fa1d 	bl	8005bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	60fb      	str	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	e7fe      	b.n	80007b4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007b6:	69fb      	ldr	r3, [r7, #28]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20003d34 	.word	0x20003d34
 80007c4:	20003d40 	.word	0x20003d40
 80007c8:	20003d38 	.word	0x20003d38
 80007cc:	20003d2c 	.word	0x20003d2c
 80007d0:	20003d3c 	.word	0x20003d3c

080007d4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d048      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e6:	2308      	movs	r3, #8
 80007e8:	425b      	negs	r3, r3
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4413      	add	r3, r2
 80007ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <vPortFreeMicroROS+0xac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4013      	ands	r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00a      	beq.n	8000836 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	60bb      	str	r3, [r7, #8]
}
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <vPortFreeMicroROS+0xac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <vPortFreeMicroROS+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f005 f9aa 	bl	8005bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <vPortFreeMicroROS+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <vPortFreeMicroROS+0xb0>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f005 f9ac 	bl	8005bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d40 	.word	0x20003d40
 8000884:	20003d38 	.word	0x20003d38

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d40 	.word	0x20003d40

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f005 f971 	bl	8005bb4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feba 	bl	800064c <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f010 f87c 	bl	8010a02 <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff62 	bl	80007d4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f005 f95e 	bl	8005bd0 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f005 f944 	bl	8005bb4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe88 	bl	800064c <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f005 f93a 	bl	8005bd0 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20003d2c 	.word	0x20003d2c
 8000a1c:	20003d34 	.word	0x20003d34
 8000a20:	20003d3c 	.word	0x20003d3c
 8000a24:	20003d38 	.word	0x20003d38
 8000a28:	20003d40 	.word	0x20003d40

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003d2c 	.word	0x20003d2c
 8000adc:	20003d34 	.word	0x20003d34

08000ae0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000aee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <cubemx_transport_open+0x28>)
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f002 fd6e 	bl	80035d8 <HAL_UART_Receive_DMA>
    return true;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20003d44 	.word	0x20003d44

08000b0c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b1a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f002 fd80 	bl	8003622 <HAL_UART_DMAStop>
    return true;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b40:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	d11c      	bne.n	8000b88 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f002 fcce 	bl	80034f8 <HAL_UART_Transmit_DMA>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b60:	e002      	b.n	8000b68 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f003 fffa 	bl	8004b5c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b68:	7cfb      	ldrb	r3, [r7, #19]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <cubemx_transport_write+0x4e>
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b20      	cmp	r3, #32
 8000b78:	d1f3      	bne.n	8000b62 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000b7a:	7cfb      	ldrb	r3, [r7, #19]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <cubemx_transport_write+0x58>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	e002      	b.n	8000b8a <cubemx_transport_write+0x5e>
 8000b84:	2300      	movs	r3, #0
 8000b86:	e000      	b.n	8000b8a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000b88:	2300      	movs	r3, #0
    }
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000ba8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000bc0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bc2:	b662      	cpsie	i
}
 8000bc4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f003 ffc5 	bl	8004b5c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d103      	bne.n	8000be6 <cubemx_transport_read+0x52>
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbe3      	blt.n	8000bae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000bea:	e011      	b.n	8000c10 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	4910      	ldr	r1, [pc, #64]	; (8000c38 <cubemx_transport_read+0xa4>)
 8000bf8:	5c8a      	ldrb	r2, [r1, r2]
 8000bfa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000c08:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d003      	beq.n	8000c24 <cubemx_transport_read+0x90>
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3e3      	bcc.n	8000bec <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c24:	69bb      	ldr	r3, [r7, #24]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20004548 	.word	0x20004548
 8000c34:	20004544 	.word	0x20004544
 8000c38:	20003d44 	.word	0x20003d44

08000c3c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c40:	f000 fe08 	bl	8001854 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c44:	f000 f81a 	bl	8000c7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c48:	f000 f8d4 	bl	8000df4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c4c:	f000 f8aa 	bl	8000da4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000c50:	f000 f87e 	bl	8000d50 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000c54:	f003 fea6 	bl	80049a4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <main+0x34>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <main+0x38>)
 8000c5e:	f003 feeb 	bl	8004a38 <osThreadNew>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <main+0x3c>)
 8000c66:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000c68:	f003 fec0 	bl	80049ec <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c6c:	e7fe      	b.n	8000c6c <main+0x30>
 8000c6e:	bf00      	nop
 8000c70:	080118d8 	.word	0x080118d8
 8000c74:	08000ed1 	.word	0x08000ed1
 8000c78:	20004654 	.word	0x20004654

08000c7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00f fdf0 	bl	8010870 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <SystemClock_Config+0xcc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a27      	ldr	r2, [pc, #156]	; (8000d48 <SystemClock_Config+0xcc>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000cec:	2310      	movs	r3, #16
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cf4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fc6a 	bl	80025dc <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x96>
		Error_Handler();
 8000d0e:	f000 f9a1 	bl	8001054 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fecc 	bl	8002acc <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xc2>
		Error_Handler();
 8000d3a:	f000 f98b 	bl	8001054 <Error_Handler>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	; 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART2_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d88:	f002 fb66 	bl	8003458 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000d92:	f000 f95f 	bl	8001054 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000454c 	.word	0x2000454c
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_DMA_Init+0x4c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <MX_DMA_Init+0x4c>)
 8000db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_DMA_Init+0x4c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2010      	movs	r0, #16
 8000dcc:	f000 fe3c 	bl	8001a48 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dd0:	2010      	movs	r0, #16
 8000dd2:	f000 fe55 	bl	8001a80 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2105      	movs	r1, #5
 8000dda:	2011      	movs	r0, #17
 8000ddc:	f000 fe34 	bl	8001a48 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000de0:	2011      	movs	r0, #17
 8000de2:	f000 fe4d 	bl	8001a80 <HAL_NVIC_EnableIRQ>

}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a25      	ldr	r2, [pc, #148]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e80:	f001 fb92 	bl	80025a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_GPIO_Init+0xd8>)
 8000e9c:	f001 fa00 	bl	80022a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000eb8:	f001 f9f2 	bl	80022a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b0a8      	sub	sp, #160	; 0xa0
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN 5 */
	rmw_uros_set_custom_transport(
 8000ed8:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <StartDefaultTask+0x120>)
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <StartDefaultTask+0x124>)
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <StartDefaultTask+0x128>)
 8000ee2:	4a46      	ldr	r2, [pc, #280]	; (8000ffc <StartDefaultTask+0x12c>)
 8000ee4:	4946      	ldr	r1, [pc, #280]	; (8001000 <StartDefaultTask+0x130>)
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f006 fcfe 	bl	80078e8 <rmw_uros_set_custom_transport>
	true, (void*) &huart2, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8000eec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fc7b 	bl	80077ec <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <StartDefaultTask+0x134>)
 8000ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	freeRTOS_allocator.deallocate = microros_deallocate;
 8000efc:	4b42      	ldr	r3, [pc, #264]	; (8001008 <StartDefaultTask+0x138>)
 8000efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	freeRTOS_allocator.reallocate = microros_reallocate;
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <StartDefaultTask+0x13c>)
 8000f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <StartDefaultTask+0x140>)
 8000f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f12:	4618      	mov	r0, r3
 8000f14:	f006 fc78 	bl	8007808 <rcutils_set_default_allocator>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f083 0301 	eor.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8000f24:	f240 1143 	movw	r1, #323	; 0x143
 8000f28:	483a      	ldr	r0, [pc, #232]	; (8001014 <StartDefaultTask+0x144>)
 8000f2a:	f00f fbdf 	bl	80106ec <iprintf>
	std_msgs__msg__Int32 msg;
	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fc87 	bl	8007844 <rcutils_get_default_allocator>
 8000f36:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f3a:	463d      	mov	r5, r7
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f006 fb8a 	bl	8007668 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "STM32_Node", "", &support);
 8000f54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f58:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <StartDefaultTask+0x148>)
 8000f5e:	492f      	ldr	r1, [pc, #188]	; (800101c <StartDefaultTask+0x14c>)
 8000f60:	f006 fbcc 	bl	80076fc <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default(&publisher1, &node,
 8000f64:	f007 f946 	bl	80081f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f6e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <StartDefaultTask+0x150>)
 8000f74:	f006 fbfe 	bl	8007774 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"Robot_Speed1");

	rclc_publisher_init_default(&publisher2, &node,
 8000f78:	f007 f93c 	bl	80081f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f82:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <StartDefaultTask+0x154>)
 8000f88:	f006 fbf4 	bl	8007774 <rclc_publisher_init_default>
				ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
				"Robot_Speed2");

	msg.data = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	677b      	str	r3, [r7, #116]	; 0x74
	/* Infinite loop */
	for (;;) {
		rcl_ret_t ret = rcl_publish(&publisher1, &msg, NULL);
 8000f90:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000f94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 fb40 	bl	8007620 <rcl_publish>
 8000fa0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		if (ret != RCL_RET_OK) {
 8000fa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d004      	beq.n	8000fb6 <StartDefaultTask+0xe6>
			printf("Error publishing 1 (line %d)\n", __LINE__);
 8000fac:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8000fb0:	481d      	ldr	r0, [pc, #116]	; (8001028 <StartDefaultTask+0x158>)
 8000fb2:	f00f fb9b 	bl	80106ec <iprintf>
		}

		msg.data++;
 8000fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb8:	3301      	adds	r3, #1
 8000fba:	677b      	str	r3, [r7, #116]	; 0x74

		ret = rcl_publish(&publisher2, &msg, NULL);
 8000fbc:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000fc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 fb2a 	bl	8007620 <rcl_publish>
 8000fcc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				if (ret != RCL_RET_OK) {
 8000fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <StartDefaultTask+0x112>
					printf("Error publishing 2 (line %d)\n", __LINE__);
 8000fd8:	f240 116b 	movw	r1, #363	; 0x16b
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <StartDefaultTask+0x15c>)
 8000fde:	f00f fb85 	bl	80106ec <iprintf>
				}

		msg.data++;
 8000fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	677b      	str	r3, [r7, #116]	; 0x74
		osDelay(10);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f003 fdb7 	bl	8004b5c <osDelay>
	for (;;) {
 8000fee:	e7cf      	b.n	8000f90 <StartDefaultTask+0xc0>
 8000ff0:	08000b95 	.word	0x08000b95
 8000ff4:	08000b2d 	.word	0x08000b2d
 8000ff8:	08000b0d 	.word	0x08000b0d
 8000ffc:	08000ae1 	.word	0x08000ae1
 8001000:	2000454c 	.word	0x2000454c
 8001004:	08001061 	.word	0x08001061
 8001008:	080010a5 	.word	0x080010a5
 800100c:	080010dd 	.word	0x080010dd
 8001010:	08001149 	.word	0x08001149
 8001014:	0801181c 	.word	0x0801181c
 8001018:	08011844 	.word	0x08011844
 800101c:	08011848 	.word	0x08011848
 8001020:	08011854 	.word	0x08011854
 8001024:	08011864 	.word	0x08011864
 8001028:	08011874 	.word	0x08011874
 800102c:	08011894 	.word	0x08011894

08001030 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001042:	f000 fc29 	bl	8001898 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40014000 	.word	0x40014000

08001054 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <microros_allocate+0x3c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <microros_allocate+0x3c>)
 8001078:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <microros_allocate+0x40>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <microros_allocate+0x40>)
 8001088:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fade 	bl	800064c <pvPortMallocMicroROS>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20004658 	.word	0x20004658
 80010a0:	2000465c 	.word	0x2000465c

080010a4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fbe7 	bl	8000888 <getBlockSize>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <microros_deallocate+0x34>)
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <microros_deallocate+0x34>)
 80010c6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff fb83 	bl	80007d4 <vPortFreeMicroROS>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000465c 	.word	0x2000465c

080010dc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <microros_reallocate+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4413      	add	r3, r2
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <microros_reallocate+0x64>)
 80010f6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <microros_reallocate+0x68>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	461a      	mov	r2, r3
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <microros_reallocate+0x68>)
 8001106:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800110e:	68b8      	ldr	r0, [r7, #8]
 8001110:	f7ff fa9c 	bl	800064c <pvPortMallocMicroROS>
 8001114:	4603      	mov	r3, r0
 8001116:	e00e      	b.n	8001136 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff fbb5 	bl	8000888 <getBlockSize>
 800111e:	4603      	mov	r3, r0
 8001120:	4a08      	ldr	r2, [pc, #32]	; (8001144 <microros_reallocate+0x68>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	461a      	mov	r2, r3
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <microros_reallocate+0x68>)
 800112a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f7ff fbc8 	bl	80008c4 <pvPortReallocMicroROS>
 8001134:	4603      	mov	r3, r0
  }
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20004658 	.word	0x20004658
 8001144:	2000465c 	.word	0x2000465c

08001148 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <microros_zero_allocate+0x48>)
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	4413      	add	r3, r2
 8001162:	461a      	mov	r2, r3
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <microros_zero_allocate+0x48>)
 8001166:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <microros_zero_allocate+0x4c>)
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	4413      	add	r3, r2
 8001176:	461a      	mov	r2, r3
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <microros_zero_allocate+0x4c>)
 800117a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff fbcd 	bl	800091e <pvPortCallocMicroROS>
 8001184:	4603      	mov	r3, r0
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20004658 	.word	0x20004658
 8001194:	2000465c 	.word	0x2000465c

08001198 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80011aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ae:	a320      	add	r3, pc, #128	; (adr r3, 8001230 <UTILS_NanosecondsToTimespec+0x98>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff f87c 	bl	80002b0 <__aeabi_ldivmod>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80011c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001230 <UTILS_NanosecondsToTimespec+0x98>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f870 	bl	80002b0 <__aeabi_ldivmod>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da20      	bge.n	800121e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <UTILS_NanosecondsToTimespec+0x90>)
 80011e2:	fb82 1203 	smull	r1, r2, r2, r3
 80011e6:	1712      	asrs	r2, r2, #28
 80011e8:	17db      	asrs	r3, r3, #31
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	6979      	ldr	r1, [r7, #20]
 80011f8:	17c8      	asrs	r0, r1, #31
 80011fa:	460c      	mov	r4, r1
 80011fc:	4605      	mov	r5, r0
 80011fe:	ebb2 0804 	subs.w	r8, r2, r4
 8001202:	eb63 0905 	sbc.w	r9, r3, r5
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	4906      	ldr	r1, [pc, #24]	; (800122c <UTILS_NanosecondsToTimespec+0x94>)
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	441a      	add	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]
    }
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001228:	44b82fa1 	.word	0x44b82fa1
 800122c:	3b9aca00 	.word	0x3b9aca00
 8001230:	3b9aca00 	.word	0x3b9aca00
 8001234:	00000000 	.word	0x00000000

08001238 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800123c:	b08e      	sub	sp, #56	; 0x38
 800123e:	af00      	add	r7, sp, #0
 8001240:	6278      	str	r0, [r7, #36]	; 0x24
 8001242:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001244:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001248:	2300      	movs	r3, #0
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	4618      	mov	r0, r3
 8001260:	f004 ff30 	bl	80060c4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	17da      	asrs	r2, r3, #31
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	61fa      	str	r2, [r7, #28]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	69b9      	ldr	r1, [r7, #24]
 8001276:	000b      	movs	r3, r1
 8001278:	2200      	movs	r2, #0
 800127a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	2200      	movs	r2, #0
 8001282:	461c      	mov	r4, r3
 8001284:	4615      	mov	r5, r2
 8001286:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800128a:	1911      	adds	r1, r2, r4
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	416b      	adcs	r3, r5
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001296:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800129a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	f04f 0400 	mov.w	r4, #0
 80012a6:	f04f 0500 	mov.w	r5, #0
 80012aa:	015d      	lsls	r5, r3, #5
 80012ac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80012b0:	0154      	lsls	r4, r2, #5
 80012b2:	4622      	mov	r2, r4
 80012b4:	462b      	mov	r3, r5
 80012b6:	ebb2 0800 	subs.w	r8, r2, r0
 80012ba:	eb63 0901 	sbc.w	r9, r3, r1
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80012ca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80012ce:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80012d2:	4690      	mov	r8, r2
 80012d4:	4699      	mov	r9, r3
 80012d6:	eb18 0a00 	adds.w	sl, r8, r0
 80012da:	eb49 0b01 	adc.w	fp, r9, r1
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80012ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80012ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80012f2:	ebb2 040a 	subs.w	r4, r2, sl
 80012f6:	603c      	str	r4, [r7, #0]
 80012f8:	eb63 030b 	sbc.w	r3, r3, fp
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001302:	4623      	mov	r3, r4
 8001304:	181b      	adds	r3, r3, r0
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	462b      	mov	r3, r5
 800130a:	eb41 0303 	adc.w	r3, r1, r3
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001316:	f7ff ff3f 	bl	8001198 <UTILS_NanosecondsToTimespec>

    return 0;
 800131a:	2300      	movs	r3, #0
 800131c:	4618      	mov	r0, r3
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_MspInit+0x54>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <HAL_MspInit+0x54>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x54>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_MspInit+0x54>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_MspInit+0x54>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_MspInit+0x54>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	210f      	movs	r1, #15
 800136a:	f06f 0001 	mvn.w	r0, #1
 800136e:	f000 fb6b 	bl	8001a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_UART_MspInit+0x154>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	f040 8093 	bne.w	80014ca <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <HAL_UART_MspInit+0x158>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_UART_MspInit+0x158>)
 80013ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <HAL_UART_MspInit+0x158>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <HAL_UART_MspInit+0x158>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <HAL_UART_MspInit+0x158>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6313      	str	r3, [r2, #48]	; 0x30
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_UART_MspInit+0x158>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013dc:	230c      	movs	r3, #12
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ec:	2307      	movs	r3, #7
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4839      	ldr	r0, [pc, #228]	; (80014dc <HAL_UART_MspInit+0x15c>)
 80013f8:	f000 ff52 	bl	80022a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_UART_MspInit+0x160>)
 80013fe:	4a39      	ldr	r2, [pc, #228]	; (80014e4 <HAL_UART_MspInit+0x164>)
 8001400:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001408:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <HAL_UART_MspInit+0x160>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_UART_MspInit+0x160>)
 800142c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001430:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001434:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001438:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_UART_MspInit+0x160>)
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001442:	f000 fb2b 	bl	8001a9c <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800144c:	f7ff fe02 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_UART_MspInit+0x160>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_UART_MspInit+0x168>)
 800145e:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_UART_MspInit+0x16c>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_UART_MspInit+0x168>)
 8001464:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001468:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_UART_MspInit+0x168>)
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_UART_MspInit+0x168>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_UART_MspInit+0x168>)
 8001478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_UART_MspInit+0x168>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0x168>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x168>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0x168>)
 8001492:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001496:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_UART_MspInit+0x168>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <HAL_UART_MspInit+0x168>)
 80014a0:	f000 fafc 	bl	8001a9c <HAL_DMA_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80014aa:	f7ff fdd3 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <HAL_UART_MspInit+0x168>)
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
 80014b4:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_UART_MspInit+0x168>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	2026      	movs	r0, #38	; 0x26
 80014c0:	f000 fac2 	bl	8001a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014c4:	2026      	movs	r0, #38	; 0x26
 80014c6:	f000 fadb 	bl	8001a80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	20004594 	.word	0x20004594
 80014e4:	40026088 	.word	0x40026088
 80014e8:	200045f4 	.word	0x200045f4
 80014ec:	400260a0 	.word	0x400260a0

080014f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_InitTick+0xd0>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <HAL_InitTick+0xd0>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6453      	str	r3, [r2, #68]	; 0x44
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_InitTick+0xd0>)
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800151c:	f107 020c 	add.w	r2, r7, #12
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fcf0 	bl	8002f0c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800152c:	f001 fcda 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 8001530:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <HAL_InitTick+0xd4>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	3b01      	subs	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_InitTick+0xd8>)
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_InitTick+0xdc>)
 8001544:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_InitTick+0xd8>)
 8001548:	f240 32e7 	movw	r2, #999	; 0x3e7
 800154c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <HAL_InitTick+0xd8>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_InitTick+0xd8>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_InitTick+0xd8>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_InitTick+0xd8>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001566:	4818      	ldr	r0, [pc, #96]	; (80015c8 <HAL_InitTick+0xd8>)
 8001568:	f001 fd02 	bl	8002f70 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001576:	2b00      	cmp	r3, #0
 8001578:	d11b      	bne.n	80015b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <HAL_InitTick+0xd8>)
 800157c:	f001 fd52 	bl	8003024 <HAL_TIM_Base_Start_IT>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800158a:	2b00      	cmp	r3, #0
 800158c:	d111      	bne.n	80015b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800158e:	2018      	movs	r0, #24
 8001590:	f000 fa76 	bl	8001a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	d808      	bhi.n	80015ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800159a:	2200      	movs	r2, #0
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	2018      	movs	r0, #24
 80015a0:	f000 fa52 	bl	8001a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_InitTick+0xe0>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e002      	b.n	80015b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3730      	adds	r7, #48	; 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	20004660 	.word	0x20004660
 80015cc:	40014000 	.word	0x40014000
 80015d0:	20000008 	.word	0x20000008

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Stream5_IRQHandler+0x10>)
 8001606:	f000 fbe1 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20004594 	.word	0x20004594

08001614 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA1_Stream6_IRQHandler+0x10>)
 800161a:	f000 fbd7 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200045f4 	.word	0x200045f4

08001628 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800162e:	f001 fd5b 	bl	80030e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20004660 	.word	0x20004660

0800163c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <USART2_IRQHandler+0x10>)
 8001642:	f002 f86d 	bl	8003720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000454c 	.word	0x2000454c

08001650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_kill>:

int _kill(int pid, int sig)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800166a:	f00f f995 	bl	8010998 <__errno>
 800166e:	4603      	mov	r3, r0
 8001670:	2216      	movs	r2, #22
 8001672:	601a      	str	r2, [r3, #0]
  return -1;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_exit>:

void _exit (int status)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ffe7 	bl	8001660 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001692:	e7fe      	b.n	8001692 <_exit+0x12>

08001694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e00a      	b.n	80016bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a6:	f3af 8000 	nop.w
 80016aa:	4601      	mov	r1, r0
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	b2ca      	uxtb	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf0      	blt.n	80016a6 <_read+0x12>
  }

  return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e009      	b.n	80016f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf1      	blt.n	80016e0 <_write+0x12>
  }
  return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_close>:

int _close(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172e:	605a      	str	r2, [r3, #4]
  return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_isatty>:

int _isatty(int file)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f00f f8fa 	bl	8010998 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20020000 	.word	0x20020000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	200046ac 	.word	0x200046ac
 80017d8:	2000dc60 	.word	0x2000dc60

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <SystemInit+0x20>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <SystemInit+0x20>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001804:	f7ff ffea 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180a:	490d      	ldr	r1, [pc, #52]	; (8001840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001820:	4c0a      	ldr	r4, [pc, #40]	; (800184c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182e:	f00f f8b9 	bl	80109a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff fa03 	bl	8000c3c <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001844:	08012440 	.word	0x08012440
  ldr r2, =_sbss
 8001848:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800184c:	2000dc5c 	.word	0x2000dc5c

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_Init+0x40>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_Init+0x40>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x40>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f8d8 	bl	8001a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f7ff fe34 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fd4e 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	200046b0 	.word	0x200046b0

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200046b0 	.word	0x200046b0

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff4c 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5a:	f7ff ff61 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7ff ffb1 	bl	80019cc <NVIC_EncodePriority>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff80 	bl	8001978 <__NVIC_SetPriority>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff54 	bl	800193c <__NVIC_EnableIRQ>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ff0a 	bl	80018c0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e099      	b.n	8001bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad8:	e00f      	b.n	8001afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ada:	f7ff fef1 	bl	80018c0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d908      	bls.n	8001afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2203      	movs	r2, #3
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e078      	b.n	8001bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e8      	bne.n	8001ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_DMA_Init+0x158>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f023 0307 	bic.w	r3, r3, #7
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d117      	bne.n	8001bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fb01 	bl	80021a8 <DMA_CheckFifoParam>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e016      	b.n	8001bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fab8 	bl	800213c <DMA_CalcBaseAndBitshift>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	223f      	movs	r2, #63	; 0x3f
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	f010803f 	.word	0xf010803f

08001bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Start_IT+0x26>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e040      	b.n	8001ca0 <HAL_DMA_Start_IT+0xa8>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d12f      	bne.n	8001c92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa4a 	bl	80020e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0216 	orr.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0208 	orr.w	r2, r2, #8
 8001c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e005      	b.n	8001c9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb6:	f7ff fe03 	bl	80018c0 <HAL_GetTick>
 8001cba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d008      	beq.n	8001cda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e052      	b.n	8001d80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0216 	bic.w	r2, r2, #22
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d103      	bne.n	8001d0a <HAL_DMA_Abort+0x62>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0208 	bic.w	r2, r2, #8
 8001d18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	e013      	b.n	8001d54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2c:	f7ff fdc8 	bl	80018c0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d90c      	bls.n	8001d54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e015      	b.n	8001d80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1e4      	bne.n	8001d2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	223f      	movs	r2, #63	; 0x3f
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d004      	beq.n	8001da6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00c      	b.n	8001dc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2205      	movs	r2, #5
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd8:	4b8e      	ldr	r3, [pc, #568]	; (8002014 <HAL_DMA_IRQHandler+0x248>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8e      	ldr	r2, [pc, #568]	; (8002018 <HAL_DMA_IRQHandler+0x24c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2208      	movs	r2, #8
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0204 	bic.w	r2, r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2208      	movs	r2, #8
 8001e26:	409a      	lsls	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2204      	movs	r2, #4
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2204      	movs	r2, #4
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f043 0204 	orr.w	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d043      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03c      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e01f      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0208 	bic.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2220      	movs	r2, #32
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 808f 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8087 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2220      	movs	r2, #32
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d136      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0216 	bic.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x1da>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	223f      	movs	r2, #63	; 0x3f
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d07e      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
        }
        return;
 8001fe2:	e079      	b.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	2b00      	cmp	r3, #0
 8002006:	d031      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e02c      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
 8002012:	bf00      	nop
 8002014:	20000004 	.word	0x20000004
 8002018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
 800202c:	e01e      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0210 	bic.w	r2, r2, #16
 800204a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2205      	movs	r2, #5
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3301      	adds	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d307      	bcc.n	80020b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f2      	bne.n	8002098 <HAL_DMA_IRQHandler+0x2cc>
 80020b2:	e000      	b.n	80020b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
 80020d6:	e000      	b.n	80020da <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d8:	bf00      	nop
    }
  }
}
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d108      	bne.n	8002120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800211e:	e007      	b.n	8002130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3b10      	subs	r3, #16
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <DMA_CalcBaseAndBitshift+0x64>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d909      	bls.n	800217e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	1d1a      	adds	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	659a      	str	r2, [r3, #88]	; 0x58
 800217c:	e007      	b.n	800218e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	aaaaaaab 	.word	0xaaaaaaab
 80021a4:	08011914 	.word	0x08011914

080021a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11f      	bne.n	8002202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d856      	bhi.n	8002276 <DMA_CheckFifoParam+0xce>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <DMA_CheckFifoParam+0x28>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f3 	.word	0x080021f3
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	08002277 	.word	0x08002277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d046      	beq.n	800227a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f0:	e043      	b.n	800227a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021fa:	d140      	bne.n	800227e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002200:	e03d      	b.n	800227e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220a:	d121      	bne.n	8002250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d837      	bhi.n	8002282 <DMA_CheckFifoParam+0xda>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <DMA_CheckFifoParam+0x70>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	0800222f 	.word	0x0800222f
 8002220:	08002229 	.word	0x08002229
 8002224:	08002241 	.word	0x08002241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e030      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d025      	beq.n	8002286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223e:	e022      	b.n	8002286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002248:	d11f      	bne.n	800228a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224e:	e01c      	b.n	800228a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d903      	bls.n	800225e <DMA_CheckFifoParam+0xb6>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d003      	beq.n	8002264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800225c:	e018      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      break;
 8002262:	e015      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      break;
 8002274:	e00b      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 8002276:	bf00      	nop
 8002278:	e00a      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e008      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e006      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e004      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
 8002288:	e002      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;   
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
    }
  } 
  
  return status; 
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e159      	b.n	8002570 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f040 8148 	bne.w	800256a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d005      	beq.n	80022f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d130      	bne.n	8002354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a2 	beq.w	800256a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b57      	ldr	r3, [pc, #348]	; (8002588 <HAL_GPIO_Init+0x2e8>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a56      	ldr	r2, [pc, #344]	; (8002588 <HAL_GPIO_Init+0x2e8>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b54      	ldr	r3, [pc, #336]	; (8002588 <HAL_GPIO_Init+0x2e8>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002442:	4a52      	ldr	r2, [pc, #328]	; (800258c <HAL_GPIO_Init+0x2ec>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a49      	ldr	r2, [pc, #292]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0x202>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a48      	ldr	r2, [pc, #288]	; (8002594 <HAL_GPIO_Init+0x2f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0x1fe>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a47      	ldr	r2, [pc, #284]	; (8002598 <HAL_GPIO_Init+0x2f8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00d      	beq.n	800249a <HAL_GPIO_Init+0x1fa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a46      	ldr	r2, [pc, #280]	; (800259c <HAL_GPIO_Init+0x2fc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <HAL_GPIO_Init+0x1f6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a45      	ldr	r2, [pc, #276]	; (80025a0 <HAL_GPIO_Init+0x300>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_GPIO_Init+0x1f2>
 800248e:	2304      	movs	r3, #4
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 8002492:	2307      	movs	r3, #7
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	; (800258c <HAL_GPIO_Init+0x2ec>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_GPIO_Init+0x304>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e6:	4a2f      	ldr	r2, [pc, #188]	; (80025a4 <HAL_GPIO_Init+0x304>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_GPIO_Init+0x304>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002510:	4a24      	ldr	r2, [pc, #144]	; (80025a4 <HAL_GPIO_Init+0x304>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_GPIO_Init+0x304>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_GPIO_Init+0x304>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_GPIO_Init+0x304>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002564:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_GPIO_Init+0x304>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f aea2 	bls.w	80022bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40013c00 	.word	0x40013c00

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c4:	e003      	b.n	80025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e267      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d075      	beq.n	80026e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fa:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00c      	beq.n	8002620 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	2b08      	cmp	r3, #8
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b7e      	ldr	r3, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05b      	beq.n	80026e4 <HAL_RCC_OscConfig+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d157      	bne.n	80026e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e242      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x74>
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b70      	ldr	r3, [pc, #448]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6f      	ldr	r2, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6c      	ldr	r2, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002674:	4b69      	ldr	r3, [pc, #420]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a68      	ldr	r2, [pc, #416]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f914 	bl	80018c0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff f910 	bl	80018c0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e207      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b5b      	ldr	r3, [pc, #364]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xc0>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f900 	bl	80018c0 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff f8fc 	bl	80018c0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1f3      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0xe8>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b44      	ldr	r3, [pc, #272]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c7      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4937      	ldr	r1, [pc, #220]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <HAL_RCC_OscConfig+0x244>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7ff f8b5 	bl	80018c0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7ff f8b1 	bl	80018c0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a8      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4925      	ldr	r1, [pc, #148]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_OscConfig+0x244>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f894 	bl	80018c0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279c:	f7ff f890 	bl	80018c0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e187      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d036      	beq.n	8002834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x248>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7ff f874 	bl	80018c0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff f870 	bl	80018c0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e167      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x200>
 80027fa:	e01b      	b.n	8002834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_OscConfig+0x248>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7ff f85d 	bl	80018c0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e00e      	b.n	8002828 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280a:	f7ff f859 	bl	80018c0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d907      	bls.n	8002828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e150      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 800281c:	40023800 	.word	0x40023800
 8002820:	42470000 	.word	0x42470000
 8002824:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ea      	bne.n	800280a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8097 	beq.w	8002970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b7d      	ldr	r3, [pc, #500]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a7c      	ldr	r2, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b7a      	ldr	r3, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b77      	ldr	r3, [pc, #476]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d118      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b74      	ldr	r3, [pc, #464]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a73      	ldr	r2, [pc, #460]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7ff f819 	bl	80018c0 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7ff f815 	bl	80018c0 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e10c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2ea>
 80028b8:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a63      	ldr	r2, [pc, #396]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x30c>
 80028ce:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a5e      	ldr	r2, [pc, #376]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
 80028da:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a57      	ldr	r2, [pc, #348]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	4b55      	ldr	r3, [pc, #340]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe ffda 	bl	80018c0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe ffd6 	bl	80018c0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0cb      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ee      	beq.n	8002910 <HAL_RCC_OscConfig+0x334>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fe ffc4 	bl	80018c0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe ffc0 	bl	80018c0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0b5      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002952:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ee      	bne.n	800293c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a38      	ldr	r2, [pc, #224]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a1 	beq.w	8002abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297a:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d05c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d141      	bne.n	8002a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe ff94 	bl	80018c0 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe ff90 	bl	80018c0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e087      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	491b      	ldr	r1, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x478>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe ff69 	bl	80018c0 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe ff65 	bl	80018c0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e05c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x416>
 8002a10:	e054      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe ff52 	bl	80018c0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe ff4e 	bl	80018c0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e045      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x444>
 8002a3e:	e03d      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e038      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d028      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d121      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d11a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d111      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fe80 	bl	80018c0 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fe7c 	bl	80018c0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fc3c 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	080118fc 	.word	0x080118fc
 8002c90:	20000004 	.word	0x20000004
 8002c94:	20000008 	.word	0x20000008

08002c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c9c:	b094      	sub	sp, #80	; 0x50
 8002c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca8:	2300      	movs	r3, #0
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb0:	4b79      	ldr	r3, [pc, #484]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	f200 80e1 	bhi.w	8002e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x34>
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cca:	e0db      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b73      	ldr	r3, [pc, #460]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002cce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cd0:	e0db      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd2:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd6:	e0d8      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
 8002d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	0159      	lsls	r1, r3, #5
 8002d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d1c:	0150      	lsls	r0, r2, #5
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4621      	mov	r1, r4
 8002d24:	1a51      	subs	r1, r2, r1
 8002d26:	6139      	str	r1, [r7, #16]
 8002d28:	4629      	mov	r1, r5
 8002d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	018b      	lsls	r3, r1, #6
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d46:	4651      	mov	r1, sl
 8002d48:	018a      	lsls	r2, r1, #6
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d50:	4659      	mov	r1, fp
 8002d52:	eb63 0901 	sbc.w	r9, r3, r1
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d6a:	4690      	mov	r8, r2
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	4623      	mov	r3, r4
 8002d70:	eb18 0303 	adds.w	r3, r8, r3
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	462b      	mov	r3, r5
 8002d78:	eb49 0303 	adc.w	r3, r9, r3
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	024b      	lsls	r3, r1, #9
 8002d8e:	4621      	mov	r1, r4
 8002d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d94:	4621      	mov	r1, r4
 8002d96:	024a      	lsls	r2, r1, #9
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9e:	2200      	movs	r2, #0
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002da8:	f7fd fad2 	bl	8000350 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4613      	mov	r3, r2
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db4:	e058      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db6:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	099b      	lsrs	r3, r3, #6
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
 8002dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	0159      	lsls	r1, r3, #5
 8002dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de2:	0150      	lsls	r0, r2, #5
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4641      	mov	r1, r8
 8002dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dee:	4649      	mov	r1, r9
 8002df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e08:	ebb2 040a 	subs.w	r4, r2, sl
 8002e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	00eb      	lsls	r3, r5, #3
 8002e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1e:	00e2      	lsls	r2, r4, #3
 8002e20:	4614      	mov	r4, r2
 8002e22:	461d      	mov	r5, r3
 8002e24:	4643      	mov	r3, r8
 8002e26:	18e3      	adds	r3, r4, r3
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	eb45 0303 	adc.w	r3, r5, r3
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3e:	4629      	mov	r1, r5
 8002e40:	028b      	lsls	r3, r1, #10
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e48:	4621      	mov	r1, r4
 8002e4a:	028a      	lsls	r2, r1, #10
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e52:	2200      	movs	r2, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	61fa      	str	r2, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	f7fd fa78 	bl	8000350 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4613      	mov	r3, r2
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e82:	e002      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3750      	adds	r7, #80	; 0x50
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	007a1200 	.word	0x007a1200

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ec0:	f7ff fff0 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0a9b      	lsrs	r3, r3, #10
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	0801190c 	.word	0x0801190c

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ee8:	f7ff ffdc 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0b5b      	lsrs	r3, r3, #13
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	0801190c 	.word	0x0801190c

08002f0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	220f      	movs	r2, #15
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_RCC_GetClockConfig+0x60>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40023c00 	.word	0x40023c00

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f839 	bl	800300e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 f9b2 	bl	8003318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d001      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e044      	b.n	80030c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d013      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a19      	ldr	r2, [pc, #100]	; (80030dc <HAL_TIM_Base_Start_IT+0xb8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d010      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40014000 	.word	0x40014000

080030e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d020      	beq.n	800314c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0202 	mvn.w	r2, #2
 800311c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8d2 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8c4 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f8d5 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d020      	beq.n	8003198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0204 	mvn.w	r2, #4
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8ac 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f89e 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8af 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d020      	beq.n	80031e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01b      	beq.n	80031e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0208 	mvn.w	r2, #8
 80031b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f886 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 80031d0:	e005      	b.n	80031de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f878 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f889 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d020      	beq.n	8003230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01b      	beq.n	8003230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0210 	mvn.w	r2, #16
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2208      	movs	r2, #8
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f860 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f852 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f863 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0201 	mvn.w	r2, #1
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd feee 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8e6 	bl	8003444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f834 	bl	8003304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0220 	mvn.w	r2, #32
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8b8 	bl	8003430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3a      	ldr	r2, [pc, #232]	; (8003414 <TIM_Base_SetConfig+0xfc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00f      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003336:	d00b      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a37      	ldr	r2, [pc, #220]	; (8003418 <TIM_Base_SetConfig+0x100>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d007      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a36      	ldr	r2, [pc, #216]	; (800341c <TIM_Base_SetConfig+0x104>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a35      	ldr	r2, [pc, #212]	; (8003420 <TIM_Base_SetConfig+0x108>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <TIM_Base_SetConfig+0xfc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01b      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d017      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a28      	ldr	r2, [pc, #160]	; (8003418 <TIM_Base_SetConfig+0x100>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <TIM_Base_SetConfig+0x104>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a26      	ldr	r2, [pc, #152]	; (8003420 <TIM_Base_SetConfig+0x108>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a25      	ldr	r2, [pc, #148]	; (8003424 <TIM_Base_SetConfig+0x10c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a24      	ldr	r2, [pc, #144]	; (8003428 <TIM_Base_SetConfig+0x110>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a23      	ldr	r2, [pc, #140]	; (800342c <TIM_Base_SetConfig+0x114>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0e      	ldr	r2, [pc, #56]	; (8003414 <TIM_Base_SetConfig+0xfc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d103      	bne.n	80033e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f023 0201 	bic.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	611a      	str	r2, [r3, #16]
  }
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40014000 	.word	0x40014000
 8003428:	40014400 	.word	0x40014400
 800342c:	40014800 	.word	0x40014800

08003430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e042      	b.n	80034f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd ff7e 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	; 0x24
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800349a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 ffc9 	bl	8004434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	d156      	bne.n	80035c0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_UART_Transmit_DMA+0x26>
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e04f      	b.n	80035c2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2221      	movs	r2, #33	; 0x21
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	4a21      	ldr	r2, [pc, #132]	; (80035cc <HAL_UART_Transmit_DMA+0xd4>)
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <HAL_UART_Transmit_DMA+0xd8>)
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <HAL_UART_Transmit_DMA+0xdc>)
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	2200      	movs	r2, #0
 8003560:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3304      	adds	r3, #4
 8003576:	461a      	mov	r2, r3
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	f7fe fb3d 	bl	8001bf8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003586:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3314      	adds	r3, #20
 800358e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	617b      	str	r3, [r7, #20]
   return(result);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3314      	adds	r3, #20
 80035a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a8:	627a      	str	r2, [r7, #36]	; 0x24
 80035aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6a39      	ldr	r1, [r7, #32]
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e5      	bne.n	8003588 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3730      	adds	r7, #48	; 0x30
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	08003cc1 	.word	0x08003cc1
 80035d0:	08003d5b 	.word	0x08003d5b
 80035d4:	08003edf 	.word	0x08003edf

080035d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d112      	bne.n	8003618 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_UART_Receive_DMA+0x26>
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00b      	b.n	800361a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	461a      	mov	r2, r3
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fcb0 	bl	8003f74 <UART_Start_Receive_DMA>
 8003614:	4603      	mov	r3, r0
 8003616:	e000      	b.n	800361a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b090      	sub	sp, #64	; 0x40
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b21      	cmp	r3, #33	; 0x21
 800364e:	d128      	bne.n	80036a2 <HAL_UART_DMAStop+0x80>
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d025      	beq.n	80036a2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	623b      	str	r3, [r7, #32]
   return(result);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3314      	adds	r3, #20
 8003674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003676:	633a      	str	r2, [r7, #48]	; 0x30
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe fb06 	bl	8001ca8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fd03 	bl	80040a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b22      	cmp	r3, #34	; 0x22
 80036c2:	d128      	bne.n	8003716 <HAL_UART_DMAStop+0xf4>
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d025      	beq.n	8003716 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ea:	61fa      	str	r2, [r7, #28]
 80036ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	617b      	str	r3, [r7, #20]
   return(result);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e5      	bne.n	80036ca <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe facc 	bl	8001ca8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fcf1 	bl	80040f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3740      	adds	r7, #64	; 0x40
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0ba      	sub	sp, #232	; 0xe8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800375e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_UART_IRQHandler+0x66>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fd99 	bl	80042b6 <UART_Receive_IT>
      return;
 8003784:	e25b      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80de 	beq.w	800394c <HAL_UART_IRQHandler+0x22c>
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80d1 	beq.w	800394c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0xae>
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_UART_IRQHandler+0xd2>
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_UART_IRQHandler+0xf6>
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <HAL_UART_IRQHandler+0x126>
 8003822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800382e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f043 0208 	orr.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 81f2 	beq.w	8003c34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_UART_IRQHandler+0x14e>
 800385c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fd24 	bl	80042b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_UART_IRQHandler+0x17a>
 8003892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d04f      	beq.n	800393a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fc2c 	bl	80040f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d141      	bne.n	8003932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1d9      	bne.n	80038ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d013      	beq.n	800392a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	4a7e      	ldr	r2, [pc, #504]	; (8003b00 <HAL_UART_IRQHandler+0x3e0>)
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fa3a 	bl	8001d88 <HAL_DMA_Abort_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003924:	4610      	mov	r0, r2
 8003926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00e      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9b2 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e00a      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f9ae 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e006      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9aa 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003946:	e175      	b.n	8003c34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	bf00      	nop
    return;
 800394a:	e173      	b.n	8003c34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 814f 	bne.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8148 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8141 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	f040 80b6 	bne.w	8003b04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8145 	beq.w	8003c38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039b6:	429a      	cmp	r2, r3
 80039b8:	f080 813e 	bcs.w	8003c38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	f000 8088 	beq.w	8003ae2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1d9      	bne.n	80039d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3314      	adds	r3, #20
 8003a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3314      	adds	r3, #20
 8003a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e1      	bne.n	8003a1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab2:	f023 0310 	bic.w	r3, r3, #16
 8003ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ac6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e3      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe f8e3 	bl	8001ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8d5 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003afe:	e09b      	b.n	8003c38 <HAL_UART_IRQHandler+0x518>
 8003b00:	080041bf 	.word	0x080041bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 808e 	beq.w	8003c3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8089 	beq.w	8003c3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e3      	bne.n	8003b2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3314      	adds	r3, #20
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	623b      	str	r3, [r7, #32]
   return(result);
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b86:	633a      	str	r2, [r7, #48]	; 0x30
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e3      	bne.n	8003b62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bcc:	61fa      	str	r2, [r7, #28]
 8003bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e3      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f85b 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf2:	e023      	b.n	8003c3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_UART_IRQHandler+0x4f4>
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 faea 	bl	80041e6 <UART_Transmit_IT>
    return;
 8003c12:	e014      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <HAL_UART_IRQHandler+0x51e>
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fb2a 	bl	8004286 <UART_EndTransmit_IT>
    return;
 8003c32:	e004      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c3c:	bf00      	nop
  }
}
 8003c3e:	37e8      	adds	r7, #232	; 0xe8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b090      	sub	sp, #64	; 0x40
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d137      	bne.n	8003d4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cde:	2200      	movs	r2, #0
 8003ce0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d02:	633a      	str	r2, [r7, #48]	; 0x30
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e5      	bne.n	8003ce2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d36:	61fa      	str	r2, [r7, #28]
 8003d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	69b9      	ldr	r1, [r7, #24]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	617b      	str	r3, [r7, #20]
   return(result);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d4a:	e002      	b.n	8003d52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003d4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d4e:	f7ff ff79 	bl	8003c44 <HAL_UART_TxCpltCallback>
}
 8003d52:	bf00      	nop
 8003d54:	3740      	adds	r7, #64	; 0x40
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff ff75 	bl	8003c58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b09c      	sub	sp, #112	; 0x70
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d172      	bne.n	8003e78 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	2200      	movs	r2, #0
 8003d96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	667b      	str	r3, [r7, #100]	; 0x64
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003dec:	647a      	str	r2, [r7, #68]	; 0x44
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e5      	bne.n	8003dcc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e16:	663b      	str	r3, [r7, #96]	; 0x60
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e20:	633a      	str	r2, [r7, #48]	; 0x30
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e5      	bne.n	8003e00 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d119      	bne.n	8003e78 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e64:	61fa      	str	r2, [r7, #28]
 8003e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	617b      	str	r3, [r7, #20]
   return(result);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d106      	bne.n	8003e94 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e8e:	f7ff ff0b 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e92:	e002      	b.n	8003e9a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e96:	f7ff fee9 	bl	8003c6c <HAL_UART_RxCpltCallback>
}
 8003e9a:	bf00      	nop
 8003e9c:	3770      	adds	r7, #112	; 0x70
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d108      	bne.n	8003ed0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff feed 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ece:	e002      	b.n	8003ed6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff fed5 	bl	8003c80 <HAL_UART_RxHalfCpltCallback>
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b21      	cmp	r3, #33	; 0x21
 8003f10:	d108      	bne.n	8003f24 <UART_DMAError+0x46>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f1e:	68b8      	ldr	r0, [r7, #8]
 8003f20:	f000 f8c2 	bl	80040a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b22      	cmp	r3, #34	; 0x22
 8003f44:	d108      	bne.n	8003f58 <UART_DMAError+0x7a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f52:	68b8      	ldr	r0, [r7, #8]
 8003f54:	f000 f8d0 	bl	80040f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	f043 0210 	orr.w	r2, r3, #16
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f64:	68b8      	ldr	r0, [r7, #8]
 8003f66:	f7ff fe95 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b098      	sub	sp, #96	; 0x60
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2222      	movs	r2, #34	; 0x22
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	4a3e      	ldr	r2, [pc, #248]	; (800409c <UART_Start_Receive_DMA+0x128>)
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <UART_Start_Receive_DMA+0x12c>)
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <UART_Start_Receive_DMA+0x130>)
 8003fb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	2200      	movs	r2, #0
 8003fba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003fbc:	f107 0308 	add.w	r3, r7, #8
 8003fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	f7fd fe10 	bl	8001bf8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d019      	beq.n	800402a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	65bb      	str	r3, [r7, #88]	; 0x58
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004016:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004018:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800401c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3314      	adds	r3, #20
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	657b      	str	r3, [r7, #84]	; 0x54
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800404a:	63ba      	str	r2, [r7, #56]	; 0x38
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e5      	bne.n	800402a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	617b      	str	r3, [r7, #20]
   return(result);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004074:	653b      	str	r3, [r7, #80]	; 0x50
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800407e:	627a      	str	r2, [r7, #36]	; 0x24
 8004080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6a39      	ldr	r1, [r7, #32]
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	61fb      	str	r3, [r7, #28]
   return(result);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e5      	bne.n	800405e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3760      	adds	r7, #96	; 0x60
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	08003d77 	.word	0x08003d77
 80040a0:	08003ea3 	.word	0x08003ea3
 80040a4:	08003edf 	.word	0x08003edf

080040a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	; 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	61ba      	str	r2, [r7, #24]
 80040d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	613b      	str	r3, [r7, #16]
   return(result);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e5      	bne.n	80040b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80040ec:	bf00      	nop
 80040ee:	3724      	adds	r7, #36	; 0x24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b095      	sub	sp, #84	; 0x54
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004120:	643a      	str	r2, [r7, #64]	; 0x40
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3314      	adds	r3, #20
 800413a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	61fb      	str	r3, [r7, #28]
   return(result);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	64bb      	str	r3, [r7, #72]	; 0x48
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e5      	bne.n	8004134 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	2b01      	cmp	r3, #1
 800416e:	d119      	bne.n	80041a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	647b      	str	r3, [r7, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004190:	61ba      	str	r2, [r7, #24]
 8004192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6979      	ldr	r1, [r7, #20]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	613b      	str	r3, [r7, #16]
   return(result);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041b2:	bf00      	nop
 80041b4:	3754      	adds	r7, #84	; 0x54
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fd5b 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b21      	cmp	r3, #33	; 0x21
 80041f8:	d13e      	bne.n	8004278 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d114      	bne.n	800422e <UART_Transmit_IT+0x48>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d110      	bne.n	800422e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004220:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	1c9a      	adds	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	621a      	str	r2, [r3, #32]
 800422c:	e008      	b.n	8004240 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	1c59      	adds	r1, r3, #1
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6211      	str	r1, [r2, #32]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29b      	uxth	r3, r3
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4619      	mov	r1, r3
 800424e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10f      	bne.n	8004274 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004262:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004272:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fccc 	bl	8003c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b08c      	sub	sp, #48	; 0x30
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b22      	cmp	r3, #34	; 0x22
 80042c8:	f040 80ae 	bne.w	8004428 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d4:	d117      	bne.n	8004306 <UART_Receive_IT+0x50>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d113      	bne.n	8004306 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	1c9a      	adds	r2, r3, #2
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
 8004304:	e026      	b.n	8004354 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004318:	d007      	beq.n	800432a <UART_Receive_IT+0x74>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <UART_Receive_IT+0x82>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e008      	b.n	800434a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004344:	b2da      	uxtb	r2, r3
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29b      	uxth	r3, r3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4619      	mov	r1, r3
 8004362:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004364:	2b00      	cmp	r3, #0
 8004366:	d15d      	bne.n	8004424 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0220 	bic.w	r2, r2, #32
 8004376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d135      	bne.n	800441a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	613b      	str	r3, [r7, #16]
   return(result);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f023 0310 	bic.w	r3, r3, #16
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	623a      	str	r2, [r7, #32]
 80043d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	69f9      	ldr	r1, [r7, #28]
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e5      	bne.n	80043b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d10a      	bne.n	800440c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fc48 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
 8004418:	e002      	b.n	8004420 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fc26 	bl	8003c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e002      	b.n	800442a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3730      	adds	r7, #48	; 0x30
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b0c0      	sub	sp, #256	; 0x100
 800443a:	af00      	add	r7, sp, #0
 800443c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	ea40 0301 	orr.w	r3, r0, r1
 800445c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	431a      	orrs	r2, r3
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	431a      	orrs	r2, r3
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800448c:	f021 010c 	bic.w	r1, r1, #12
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800449a:	430b      	orrs	r3, r1
 800449c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	6999      	ldr	r1, [r3, #24]
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	ea40 0301 	orr.w	r3, r0, r1
 80044ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b8f      	ldr	r3, [pc, #572]	; (8004700 <UART_SetConfig+0x2cc>)
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d005      	beq.n	80044d4 <UART_SetConfig+0xa0>
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b8d      	ldr	r3, [pc, #564]	; (8004704 <UART_SetConfig+0x2d0>)
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d104      	bne.n	80044de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe fd06 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 80044d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044dc:	e003      	b.n	80044e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044de:	f7fe fced 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 80044e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	f040 810c 	bne.w	800470c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004506:	4622      	mov	r2, r4
 8004508:	462b      	mov	r3, r5
 800450a:	1891      	adds	r1, r2, r2
 800450c:	65b9      	str	r1, [r7, #88]	; 0x58
 800450e:	415b      	adcs	r3, r3
 8004510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004516:	4621      	mov	r1, r4
 8004518:	eb12 0801 	adds.w	r8, r2, r1
 800451c:	4629      	mov	r1, r5
 800451e:	eb43 0901 	adc.w	r9, r3, r1
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800452e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004536:	4690      	mov	r8, r2
 8004538:	4699      	mov	r9, r3
 800453a:	4623      	mov	r3, r4
 800453c:	eb18 0303 	adds.w	r3, r8, r3
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004544:	462b      	mov	r3, r5
 8004546:	eb49 0303 	adc.w	r3, r9, r3
 800454a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800455a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800455e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004562:	460b      	mov	r3, r1
 8004564:	18db      	adds	r3, r3, r3
 8004566:	653b      	str	r3, [r7, #80]	; 0x50
 8004568:	4613      	mov	r3, r2
 800456a:	eb42 0303 	adc.w	r3, r2, r3
 800456e:	657b      	str	r3, [r7, #84]	; 0x54
 8004570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004578:	f7fb feea 	bl	8000350 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4b61      	ldr	r3, [pc, #388]	; (8004708 <UART_SetConfig+0x2d4>)
 8004582:	fba3 2302 	umull	r2, r3, r3, r2
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	011c      	lsls	r4, r3, #4
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004594:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80045a4:	415b      	adcs	r3, r3
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045ac:	4641      	mov	r1, r8
 80045ae:	eb12 0a01 	adds.w	sl, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb43 0b01 	adc.w	fp, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045cc:	4692      	mov	sl, r2
 80045ce:	469b      	mov	fp, r3
 80045d0:	4643      	mov	r3, r8
 80045d2:	eb1a 0303 	adds.w	r3, sl, r3
 80045d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045da:	464b      	mov	r3, r9
 80045dc:	eb4b 0303 	adc.w	r3, fp, r3
 80045e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045f8:	460b      	mov	r3, r1
 80045fa:	18db      	adds	r3, r3, r3
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
 80045fe:	4613      	mov	r3, r2
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	647b      	str	r3, [r7, #68]	; 0x44
 8004606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800460a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800460e:	f7fb fe9f 	bl	8000350 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4611      	mov	r1, r2
 8004618:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <UART_SetConfig+0x2d4>)
 800461a:	fba3 2301 	umull	r2, r3, r3, r1
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2264      	movs	r2, #100	; 0x64
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	1acb      	subs	r3, r1, r3
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800462e:	4b36      	ldr	r3, [pc, #216]	; (8004708 <UART_SetConfig+0x2d4>)
 8004630:	fba3 2302 	umull	r2, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800463c:	441c      	add	r4, r3
 800463e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800464c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	1891      	adds	r1, r2, r2
 8004656:	63b9      	str	r1, [r7, #56]	; 0x38
 8004658:	415b      	adcs	r3, r3
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004660:	4641      	mov	r1, r8
 8004662:	1851      	adds	r1, r2, r1
 8004664:	6339      	str	r1, [r7, #48]	; 0x30
 8004666:	4649      	mov	r1, r9
 8004668:	414b      	adcs	r3, r1
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004678:	4659      	mov	r1, fp
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004682:	4651      	mov	r1, sl
 8004684:	00ca      	lsls	r2, r1, #3
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4603      	mov	r3, r0
 800468c:	4642      	mov	r2, r8
 800468e:	189b      	adds	r3, r3, r2
 8004690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004694:	464b      	mov	r3, r9
 8004696:	460a      	mov	r2, r1
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046b4:	460b      	mov	r3, r1
 80046b6:	18db      	adds	r3, r3, r3
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ba:	4613      	mov	r3, r2
 80046bc:	eb42 0303 	adc.w	r3, r2, r3
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046ca:	f7fb fe41 	bl	8000350 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <UART_SetConfig+0x2d4>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <UART_SetConfig+0x2d4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 0207 	and.w	r2, r3, #7
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4422      	add	r2, r4
 80046fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046fc:	e106      	b.n	800490c <UART_SetConfig+0x4d8>
 80046fe:	bf00      	nop
 8004700:	40011000 	.word	0x40011000
 8004704:	40011400 	.word	0x40011400
 8004708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800470c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004710:	2200      	movs	r2, #0
 8004712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004716:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800471a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800471e:	4642      	mov	r2, r8
 8004720:	464b      	mov	r3, r9
 8004722:	1891      	adds	r1, r2, r2
 8004724:	6239      	str	r1, [r7, #32]
 8004726:	415b      	adcs	r3, r3
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
 800472a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800472e:	4641      	mov	r1, r8
 8004730:	1854      	adds	r4, r2, r1
 8004732:	4649      	mov	r1, r9
 8004734:	eb43 0501 	adc.w	r5, r3, r1
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	00eb      	lsls	r3, r5, #3
 8004742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004746:	00e2      	lsls	r2, r4, #3
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	4643      	mov	r3, r8
 800474e:	18e3      	adds	r3, r4, r3
 8004750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004754:	464b      	mov	r3, r9
 8004756:	eb45 0303 	adc.w	r3, r5, r3
 800475a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800476a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800477a:	4629      	mov	r1, r5
 800477c:	008b      	lsls	r3, r1, #2
 800477e:	4621      	mov	r1, r4
 8004780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004784:	4621      	mov	r1, r4
 8004786:	008a      	lsls	r2, r1, #2
 8004788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800478c:	f7fb fde0 	bl	8000350 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4b60      	ldr	r3, [pc, #384]	; (8004918 <UART_SetConfig+0x4e4>)
 8004796:	fba3 2302 	umull	r2, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	011c      	lsls	r4, r3, #4
 800479e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	1891      	adds	r1, r2, r2
 80047b6:	61b9      	str	r1, [r7, #24]
 80047b8:	415b      	adcs	r3, r3
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c0:	4641      	mov	r1, r8
 80047c2:	1851      	adds	r1, r2, r1
 80047c4:	6139      	str	r1, [r7, #16]
 80047c6:	4649      	mov	r1, r9
 80047c8:	414b      	adcs	r3, r1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d8:	4659      	mov	r1, fp
 80047da:	00cb      	lsls	r3, r1, #3
 80047dc:	4651      	mov	r1, sl
 80047de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e2:	4651      	mov	r1, sl
 80047e4:	00ca      	lsls	r2, r1, #3
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	4642      	mov	r2, r8
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047f4:	464b      	mov	r3, r9
 80047f6:	460a      	mov	r2, r1
 80047f8:	eb42 0303 	adc.w	r3, r2, r3
 80047fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	67bb      	str	r3, [r7, #120]	; 0x78
 800480a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004818:	4649      	mov	r1, r9
 800481a:	008b      	lsls	r3, r1, #2
 800481c:	4641      	mov	r1, r8
 800481e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004822:	4641      	mov	r1, r8
 8004824:	008a      	lsls	r2, r1, #2
 8004826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800482a:	f7fb fd91 	bl	8000350 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4611      	mov	r1, r2
 8004834:	4b38      	ldr	r3, [pc, #224]	; (8004918 <UART_SetConfig+0x4e4>)
 8004836:	fba3 2301 	umull	r2, r3, r3, r1
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2264      	movs	r2, #100	; 0x64
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	1acb      	subs	r3, r1, r3
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	3332      	adds	r3, #50	; 0x32
 8004848:	4a33      	ldr	r2, [pc, #204]	; (8004918 <UART_SetConfig+0x4e4>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004854:	441c      	add	r4, r3
 8004856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485a:	2200      	movs	r2, #0
 800485c:	673b      	str	r3, [r7, #112]	; 0x70
 800485e:	677a      	str	r2, [r7, #116]	; 0x74
 8004860:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	1891      	adds	r1, r2, r2
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	415b      	adcs	r3, r3
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004874:	4641      	mov	r1, r8
 8004876:	1851      	adds	r1, r2, r1
 8004878:	6039      	str	r1, [r7, #0]
 800487a:	4649      	mov	r1, r9
 800487c:	414b      	adcs	r3, r1
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800488c:	4659      	mov	r1, fp
 800488e:	00cb      	lsls	r3, r1, #3
 8004890:	4651      	mov	r1, sl
 8004892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004896:	4651      	mov	r1, sl
 8004898:	00ca      	lsls	r2, r1, #3
 800489a:	4610      	mov	r0, r2
 800489c:	4619      	mov	r1, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	4642      	mov	r2, r8
 80048a2:	189b      	adds	r3, r3, r2
 80048a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a6:	464b      	mov	r3, r9
 80048a8:	460a      	mov	r2, r1
 80048aa:	eb42 0303 	adc.w	r3, r2, r3
 80048ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	663b      	str	r3, [r7, #96]	; 0x60
 80048ba:	667a      	str	r2, [r7, #100]	; 0x64
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048c8:	4649      	mov	r1, r9
 80048ca:	008b      	lsls	r3, r1, #2
 80048cc:	4641      	mov	r1, r8
 80048ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d2:	4641      	mov	r1, r8
 80048d4:	008a      	lsls	r2, r1, #2
 80048d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048da:	f7fb fd39 	bl	8000350 <__aeabi_uldivmod>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <UART_SetConfig+0x4e4>)
 80048e4:	fba3 1302 	umull	r1, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	2164      	movs	r1, #100	; 0x64
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	3332      	adds	r3, #50	; 0x32
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <UART_SetConfig+0x4e4>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	f003 020f 	and.w	r2, r3, #15
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4422      	add	r2, r4
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004912:	46bd      	mov	sp, r7
 8004914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004918:	51eb851f 	.word	0x51eb851f

0800491c <__NVIC_SetPriority>:
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	6039      	str	r1, [r7, #0]
 8004926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492c:	2b00      	cmp	r3, #0
 800492e:	db0a      	blt.n	8004946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	490c      	ldr	r1, [pc, #48]	; (8004968 <__NVIC_SetPriority+0x4c>)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	440b      	add	r3, r1
 8004940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004944:	e00a      	b.n	800495c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4908      	ldr	r1, [pc, #32]	; (800496c <__NVIC_SetPriority+0x50>)
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	3b04      	subs	r3, #4
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	440b      	add	r3, r1
 800495a:	761a      	strb	r2, [r3, #24]
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000e100 	.word	0xe000e100
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <SysTick_Handler+0x1c>)
 8004976:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004978:	f001 fd24 	bl	80063c4 <xTaskGetSchedulerState>
 800497c:	4603      	mov	r3, r0
 800497e:	2b01      	cmp	r3, #1
 8004980:	d001      	beq.n	8004986 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004982:	f002 fb09 	bl	8006f98 <xPortSysTickHandler>
  }
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000e010 	.word	0xe000e010

08004990 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004994:	2100      	movs	r1, #0
 8004996:	f06f 0004 	mvn.w	r0, #4
 800499a:	f7ff ffbf 	bl	800491c <__NVIC_SetPriority>
#endif
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049aa:	f3ef 8305 	mrs	r3, IPSR
 80049ae:	603b      	str	r3, [r7, #0]
  return(result);
 80049b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80049b6:	f06f 0305 	mvn.w	r3, #5
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	e00c      	b.n	80049d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <osKernelInitialize+0x44>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049c6:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <osKernelInitialize+0x44>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	e002      	b.n	80049d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049d8:	687b      	ldr	r3, [r7, #4]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	200046b4 	.word	0x200046b4

080049ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f2:	f3ef 8305 	mrs	r3, IPSR
 80049f6:	603b      	str	r3, [r7, #0]
  return(result);
 80049f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <osKernelStart+0x1a>
    stat = osErrorISR;
 80049fe:	f06f 0305 	mvn.w	r3, #5
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	e010      	b.n	8004a28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <osKernelStart+0x48>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d109      	bne.n	8004a22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a0e:	f7ff ffbf 	bl	8004990 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <osKernelStart+0x48>)
 8004a14:	2202      	movs	r2, #2
 8004a16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a18:	f001 f866 	bl	8005ae8 <vTaskStartScheduler>
      stat = osOK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	e002      	b.n	8004a28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a28:	687b      	ldr	r3, [r7, #4]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200046b4 	.word	0x200046b4

08004a38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08e      	sub	sp, #56	; 0x38
 8004a3c:	af04      	add	r7, sp, #16
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a48:	f3ef 8305 	mrs	r3, IPSR
 8004a4c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d17e      	bne.n	8004b52 <osThreadNew+0x11a>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d07b      	beq.n	8004b52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a5e:	2318      	movs	r3, #24
 8004a60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d045      	beq.n	8004afe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <osThreadNew+0x48>
        name = attr->name;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <osThreadNew+0x6e>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b38      	cmp	r3, #56	; 0x38
 8004a98:	d805      	bhi.n	8004aa6 <osThreadNew+0x6e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <osThreadNew+0x72>
        return (NULL);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e054      	b.n	8004b54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00e      	beq.n	8004ae0 <osThreadNew+0xa8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b5b      	cmp	r3, #91	; 0x5b
 8004ac8:	d90a      	bls.n	8004ae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d006      	beq.n	8004ae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <osThreadNew+0xa8>
        mem = 1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	e010      	b.n	8004b02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10c      	bne.n	8004b02 <osThreadNew+0xca>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d108      	bne.n	8004b02 <osThreadNew+0xca>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <osThreadNew+0xca>
          mem = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	e001      	b.n	8004b02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d110      	bne.n	8004b2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b10:	9202      	str	r2, [sp, #8]
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6a3a      	ldr	r2, [r7, #32]
 8004b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fe0c 	bl	800573c <xTaskCreateStatic>
 8004b24:	4603      	mov	r3, r0
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e013      	b.n	8004b52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d110      	bne.n	8004b52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fe57 	bl	80057f6 <xTaskCreate>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <osThreadNew+0x11a>
            hTask = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b52:	693b      	ldr	r3, [r7, #16]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b64:	f3ef 8305 	mrs	r3, IPSR
 8004b68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <osDelay+0x1c>
    stat = osErrorISR;
 8004b70:	f06f 0305 	mvn.w	r3, #5
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e007      	b.n	8004b88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 ff7c 	bl	8005a80 <vTaskDelay>
    }
  }

  return (stat);
 8004b88:	68fb      	ldr	r3, [r7, #12]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ba4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <vApplicationGetIdleTaskMemory+0x30>)
 8004baa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	200046b8 	.word	0x200046b8
 8004bc4:	20004714 	.word	0x20004714

08004bc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a07      	ldr	r2, [pc, #28]	; (8004bf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <vApplicationGetTimerTaskMemory+0x30>)
 8004bde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	20004914 	.word	0x20004914
 8004bf8:	20004970 	.word	0x20004970

08004bfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f103 0208 	add.w	r2, r3, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f103 0208 	add.w	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f103 0208 	add.w	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb4:	d103      	bne.n	8004cbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e00c      	b.n	8004cd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e002      	b.n	8004ccc <vListInsert+0x2e>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d2f6      	bcs.n	8004cc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6892      	ldr	r2, [r2, #8]
 8004d26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6852      	ldr	r2, [r2, #4]
 8004d30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d103      	bne.n	8004d44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	1e5a      	subs	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xQueueGenericReset+0x2a>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	60bb      	str	r3, [r7, #8]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d8e:	f002 f871 	bl	8006e74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d9e:	fb01 f303 	mul.w	r3, r1, r3
 8004da2:	441a      	add	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d114      	bne.n	8004e0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01a      	beq.n	8004e22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3310      	adds	r3, #16
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 f903 	bl	8005ffc <xTaskRemoveFromEventList>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d012      	beq.n	8004e22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <xQueueGenericReset+0xcc>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	e009      	b.n	8004e22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3310      	adds	r3, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fef2 	bl	8004bfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff feed 	bl	8004bfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e22:	f002 f857 	bl	8006ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e26:	2301      	movs	r3, #1
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08e      	sub	sp, #56	; 0x38
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <xQueueGenericCreateStatic+0x52>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <xQueueGenericCreateStatic+0x56>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <xQueueGenericCreateStatic+0x58>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <xQueueGenericCreateStatic+0x7e>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <xQueueGenericCreateStatic+0x82>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericCreateStatic+0x84>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61fb      	str	r3, [r7, #28]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ed2:	2350      	movs	r3, #80	; 0x50
 8004ed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b50      	cmp	r3, #80	; 0x50
 8004eda:	d00a      	beq.n	8004ef2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	61bb      	str	r3, [r7, #24]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ef2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f805 	bl	8004f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3730      	adds	r7, #48	; 0x30
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d103      	bne.n	8004f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e002      	b.n	8004f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f52:	2101      	movs	r1, #1
 8004f54:	69b8      	ldr	r0, [r7, #24]
 8004f56:	f7ff ff05 	bl	8004d64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	; 0x38
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <xQueueGenericSend+0x32>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <xQueueGenericSend+0x40>
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <xQueueGenericSend+0x44>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <xQueueGenericSend+0x46>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <xQueueGenericSend+0x60>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d103      	bne.n	8004fda <xQueueGenericSend+0x6e>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <xQueueGenericSend+0x72>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueGenericSend+0x74>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueGenericSend+0x8e>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	623b      	str	r3, [r7, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ffa:	f001 f9e3 	bl	80063c4 <xTaskGetSchedulerState>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <xQueueGenericSend+0x9e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <xQueueGenericSend+0xa2>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueGenericSend+0xa4>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xQueueGenericSend+0xbe>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	61fb      	str	r3, [r7, #28]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800502a:	f001 ff23 	bl	8006e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <xQueueGenericSend+0xd4>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d129      	bne.n	8005094 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005046:	f000 fa0b 	bl	8005460 <prvCopyDataToQueue>
 800504a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d010      	beq.n	8005076 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	3324      	adds	r3, #36	; 0x24
 8005058:	4618      	mov	r0, r3
 800505a:	f000 ffcf 	bl	8005ffc <xTaskRemoveFromEventList>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005064:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <xQueueGenericSend+0x1f8>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	e00a      	b.n	800508c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800507c:	4b39      	ldr	r3, [pc, #228]	; (8005164 <xQueueGenericSend+0x1f8>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800508c:	f001 ff22 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 8005090:	2301      	movs	r3, #1
 8005092:	e063      	b.n	800515c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800509a:	f001 ff1b 	bl	8006ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	e05c      	b.n	800515c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 f82f 	bl	8006110 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050b6:	f001 ff0d 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ba:	f000 fd7b 	bl	8005bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050be:	f001 fed9 	bl	8006e74 <vPortEnterCritical>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c8:	b25b      	sxtb	r3, r3
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ce:	d103      	bne.n	80050d8 <xQueueGenericSend+0x16c>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050de:	b25b      	sxtb	r3, r3
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e4:	d103      	bne.n	80050ee <xQueueGenericSend+0x182>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ee:	f001 fef1 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050f2:	1d3a      	adds	r2, r7, #4
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f81e 	bl	800613c <xTaskCheckForTimeOut>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d124      	bne.n	8005150 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005108:	f000 faa2 	bl	8005650 <prvIsQueueFull>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d018      	beq.n	8005144 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	3310      	adds	r3, #16
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 ff1e 	bl	8005f5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005122:	f000 fa2d 	bl	8005580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005126:	f000 fd53 	bl	8005bd0 <xTaskResumeAll>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	f47f af7c 	bne.w	800502a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <xQueueGenericSend+0x1f8>)
 8005134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	e772      	b.n	800502a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005146:	f000 fa1b 	bl	8005580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800514a:	f000 fd41 	bl	8005bd0 <xTaskResumeAll>
 800514e:	e76c      	b.n	800502a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005152:	f000 fa15 	bl	8005580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005156:	f000 fd3b 	bl	8005bd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800515a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800515c:	4618      	mov	r0, r3
 800515e:	3738      	adds	r7, #56	; 0x38
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b090      	sub	sp, #64	; 0x40
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <xQueueGenericSendFromISR+0x3c>
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <xQueueGenericSendFromISR+0x40>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <xQueueGenericSendFromISR+0x42>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d103      	bne.n	80051d2 <xQueueGenericSendFromISR+0x6a>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <xQueueGenericSendFromISR+0x6e>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <xQueueGenericSendFromISR+0x70>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051f2:	f001 ff21 	bl	8007038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051f6:	f3ef 8211 	mrs	r2, BASEPRI
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	61fa      	str	r2, [r7, #28]
 800520c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800520e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <xQueueGenericSendFromISR+0xbc>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d12f      	bne.n	8005284 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800523a:	f000 f911 	bl	8005460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800523e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005246:	d112      	bne.n	800526e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	d016      	beq.n	800527e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	3324      	adds	r3, #36	; 0x24
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fed1 	bl	8005ffc <xTaskRemoveFromEventList>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e007      	b.n	800527e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800526e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005272:	3301      	adds	r3, #1
 8005274:	b2db      	uxtb	r3, r3
 8005276:	b25a      	sxtb	r2, r3
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800527e:	2301      	movs	r3, #1
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005282:	e001      	b.n	8005288 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005284:	2300      	movs	r3, #0
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005292:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005296:	4618      	mov	r0, r3
 8005298:	3740      	adds	r7, #64	; 0x40
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <xQueueReceive+0x30>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	623b      	str	r3, [r7, #32]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <xQueueReceive+0x3e>
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <xQueueReceive+0x42>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <xQueueReceive+0x44>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xQueueReceive+0x5e>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	61fb      	str	r3, [r7, #28]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052fe:	f001 f861 	bl	80063c4 <xTaskGetSchedulerState>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <xQueueReceive+0x6e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <xQueueReceive+0x72>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <xQueueReceive+0x74>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <xQueueReceive+0x8e>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61bb      	str	r3, [r7, #24]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800532e:	f001 fda1 	bl	8006e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01f      	beq.n	800537e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005342:	f000 f8f7 	bl	8005534 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1e5a      	subs	r2, r3, #1
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00f      	beq.n	8005376 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	3310      	adds	r3, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fe4e 	bl	8005ffc <xTaskRemoveFromEventList>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005366:	4b3d      	ldr	r3, [pc, #244]	; (800545c <xQueueReceive+0x1bc>)
 8005368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005376:	f001 fdad 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 800537a:	2301      	movs	r3, #1
 800537c:	e069      	b.n	8005452 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005384:	f001 fda6 	bl	8006ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005388:	2300      	movs	r3, #0
 800538a:	e062      	b.n	8005452 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005392:	f107 0310 	add.w	r3, r7, #16
 8005396:	4618      	mov	r0, r3
 8005398:	f000 feba 	bl	8006110 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053a0:	f001 fd98 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053a4:	f000 fc06 	bl	8005bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053a8:	f001 fd64 	bl	8006e74 <vPortEnterCritical>
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b8:	d103      	bne.n	80053c2 <xQueueReceive+0x122>
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ce:	d103      	bne.n	80053d8 <xQueueReceive+0x138>
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d8:	f001 fd7c 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053dc:	1d3a      	adds	r2, r7, #4
 80053de:	f107 0310 	add.w	r3, r7, #16
 80053e2:	4611      	mov	r1, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fea9 	bl	800613c <xTaskCheckForTimeOut>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d123      	bne.n	8005438 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f2:	f000 f917 	bl	8005624 <prvIsQueueEmpty>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d017      	beq.n	800542c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	3324      	adds	r3, #36	; 0x24
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fda9 	bl	8005f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800540a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540c:	f000 f8b8 	bl	8005580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005410:	f000 fbde 	bl	8005bd0 <xTaskResumeAll>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d189      	bne.n	800532e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <xQueueReceive+0x1bc>)
 800541c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	e780      	b.n	800532e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800542c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800542e:	f000 f8a7 	bl	8005580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005432:	f000 fbcd 	bl	8005bd0 <xTaskResumeAll>
 8005436:	e77a      	b.n	800532e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800543a:	f000 f8a1 	bl	8005580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800543e:	f000 fbc7 	bl	8005bd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005444:	f000 f8ee 	bl	8005624 <prvIsQueueEmpty>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	f43f af6f 	beq.w	800532e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005452:	4618      	mov	r0, r3
 8005454:	3730      	adds	r7, #48	; 0x30
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d14d      	bne.n	8005522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 ffb8 	bl	8006400 <xTaskPriorityDisinherit>
 8005490:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	e043      	b.n	8005522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d119      	bne.n	80054d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6858      	ldr	r0, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	461a      	mov	r2, r3
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	f00b faa9 	bl	8010a02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	441a      	add	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d32b      	bcc.n	8005522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e026      	b.n	8005522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68d8      	ldr	r0, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	461a      	mov	r2, r3
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	f00b fa8f 	bl	8010a02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	425b      	negs	r3, r3
 80054ee:	441a      	add	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d207      	bcs.n	8005510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	425b      	negs	r3, r3
 800550a:	441a      	add	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d105      	bne.n	8005522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	3b01      	subs	r3, #1
 8005520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	441a      	add	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	d303      	bcc.n	8005568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68d9      	ldr	r1, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	461a      	mov	r2, r3
 8005572:	6838      	ldr	r0, [r7, #0]
 8005574:	f00b fa45 	bl	8010a02 <memcpy>
	}
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005588:	f001 fc74 	bl	8006e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005594:	e011      	b.n	80055ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d012      	beq.n	80055c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3324      	adds	r3, #36	; 0x24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fd2a 	bl	8005ffc <xTaskRemoveFromEventList>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055ae:	f000 fe27 	bl	8006200 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dce9      	bgt.n	8005596 <prvUnlockQueue+0x16>
 80055c2:	e000      	b.n	80055c6 <prvUnlockQueue+0x46>
					break;
 80055c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	22ff      	movs	r2, #255	; 0xff
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055ce:	f001 fc81 	bl	8006ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055d2:	f001 fc4f 	bl	8006e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055de:	e011      	b.n	8005604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3310      	adds	r3, #16
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fd05 	bl	8005ffc <xTaskRemoveFromEventList>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055f8:	f000 fe02 	bl	8006200 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055fc:	7bbb      	ldrb	r3, [r7, #14]
 80055fe:	3b01      	subs	r3, #1
 8005600:	b2db      	uxtb	r3, r3
 8005602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005608:	2b00      	cmp	r3, #0
 800560a:	dce9      	bgt.n	80055e0 <prvUnlockQueue+0x60>
 800560c:	e000      	b.n	8005610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800560e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005618:	f001 fc5c 	bl	8006ed4 <vPortExitCritical>
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800562c:	f001 fc22 	bl	8006e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005638:	2301      	movs	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e001      	b.n	8005642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005642:	f001 fc47 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 8005646:	68fb      	ldr	r3, [r7, #12]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005658:	f001 fc0c 	bl	8006e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	429a      	cmp	r2, r3
 8005666:	d102      	bne.n	800566e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005668:	2301      	movs	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e001      	b.n	8005672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005672:	f001 fc2f 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e014      	b.n	80056ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005690:	4a0f      	ldr	r2, [pc, #60]	; (80056d0 <vQueueAddToRegistry+0x50>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800569c:	490c      	ldr	r1, [pc, #48]	; (80056d0 <vQueueAddToRegistry+0x50>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <vQueueAddToRegistry+0x50>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056b2:	e006      	b.n	80056c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b07      	cmp	r3, #7
 80056be:	d9e7      	bls.n	8005690 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20004d70 	.word	0x20004d70

080056d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056e4:	f001 fbc6 	bl	8006e74 <vPortEnterCritical>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ee:	b25b      	sxtb	r3, r3
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f4:	d103      	bne.n	80056fe <vQueueWaitForMessageRestricted+0x2a>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005704:	b25b      	sxtb	r3, r3
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800570a:	d103      	bne.n	8005714 <vQueueWaitForMessageRestricted+0x40>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005714:	f001 fbde 	bl	8006ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fc3b 	bl	8005fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800572e:	6978      	ldr	r0, [r7, #20]
 8005730:	f7ff ff26 	bl	8005580 <prvUnlockQueue>
	}
 8005734:	bf00      	nop
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	; 0x38
 8005740:	af04      	add	r7, sp, #16
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	623b      	str	r3, [r7, #32]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xTaskCreateStatic+0x46>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	61fb      	str	r3, [r7, #28]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005782:	235c      	movs	r3, #92	; 0x5c
 8005784:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b5c      	cmp	r3, #92	; 0x5c
 800578a:	d00a      	beq.n	80057a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	61bb      	str	r3, [r7, #24]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01e      	beq.n	80057e8 <xTaskCreateStatic+0xac>
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057c2:	2300      	movs	r3, #0
 80057c4:	9303      	str	r3, [sp, #12]
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	9302      	str	r3, [sp, #8]
 80057ca:	f107 0314 	add.w	r3, r7, #20
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f850 	bl	8005880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e2:	f000 f8dd 	bl	80059a0 <prvAddNewTaskToReadyList>
 80057e6:	e001      	b.n	80057ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057ec:	697b      	ldr	r3, [r7, #20]
	}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3728      	adds	r7, #40	; 0x28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08c      	sub	sp, #48	; 0x30
 80057fa:	af04      	add	r7, sp, #16
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fc54 	bl	80070b8 <pvPortMalloc>
 8005810:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005818:	205c      	movs	r0, #92	; 0x5c
 800581a:	f001 fc4d 	bl	80070b8 <pvPortMalloc>
 800581e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
 800582c:	e005      	b.n	800583a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800582e:	6978      	ldr	r0, [r7, #20]
 8005830:	f001 fd0e 	bl	8007250 <vPortFree>
 8005834:	e001      	b.n	800583a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	2300      	movs	r3, #0
 800584c:	9303      	str	r3, [sp, #12]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	9302      	str	r3, [sp, #8]
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f80e 	bl	8005880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005864:	69f8      	ldr	r0, [r7, #28]
 8005866:	f000 f89b 	bl	80059a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800586a:	2301      	movs	r3, #1
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	e002      	b.n	8005876 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005874:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005876:	69bb      	ldr	r3, [r7, #24]
	}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	461a      	mov	r2, r3
 8005898:	21a5      	movs	r1, #165	; 0xa5
 800589a:	f00a ffe9 	bl	8010870 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058a8:	3b01      	subs	r3, #1
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	617b      	str	r3, [r7, #20]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01f      	beq.n	800591e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e012      	b.n	800590a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	7819      	ldrb	r1, [r3, #0]
 80058ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	3334      	adds	r3, #52	; 0x34
 80058f4:	460a      	mov	r2, r1
 80058f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d006      	beq.n	8005912 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3301      	adds	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b0f      	cmp	r3, #15
 800590e:	d9e9      	bls.n	80058e4 <prvInitialiseNewTask+0x64>
 8005910:	e000      	b.n	8005914 <prvInitialiseNewTask+0x94>
			{
				break;
 8005912:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800591c:	e003      	b.n	8005926 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2b37      	cmp	r3, #55	; 0x37
 800592a:	d901      	bls.n	8005930 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800592c:	2337      	movs	r3, #55	; 0x37
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2200      	movs	r2, #0
 8005940:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff f978 	bl	8004c3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	3318      	adds	r3, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff f973 	bl	8004c3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	2200      	movs	r2, #0
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	69b8      	ldr	r0, [r7, #24]
 8005980:	f001 f94e 	bl	8006c20 <pxPortInitialiseStack>
 8005984:	4602      	mov	r2, r0
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005996:	bf00      	nop
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059a8:	f001 fa64 	bl	8006e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059ac:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <prvAddNewTaskToReadyList+0xc4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	4a2c      	ldr	r2, [pc, #176]	; (8005a64 <prvAddNewTaskToReadyList+0xc4>)
 80059b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059b6:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <prvAddNewTaskToReadyList+0xc8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059be:	4a2a      	ldr	r2, [pc, #168]	; (8005a68 <prvAddNewTaskToReadyList+0xc8>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059c4:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <prvAddNewTaskToReadyList+0xc4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d110      	bne.n	80059ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059cc:	f000 fc3c 	bl	8006248 <prvInitialiseTaskLists>
 80059d0:	e00d      	b.n	80059ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059d2:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <prvAddNewTaskToReadyList+0xcc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059da:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <prvAddNewTaskToReadyList+0xc8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d802      	bhi.n	80059ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059e8:	4a1f      	ldr	r2, [pc, #124]	; (8005a68 <prvAddNewTaskToReadyList+0xc8>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <prvAddNewTaskToReadyList+0xd0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <prvAddNewTaskToReadyList+0xd0>)
 80059f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <prvAddNewTaskToReadyList+0xd0>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <prvAddNewTaskToReadyList+0xd4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d903      	bls.n	8005a14 <prvAddNewTaskToReadyList+0x74>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <prvAddNewTaskToReadyList+0xd4>)
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <prvAddNewTaskToReadyList+0xd8>)
 8005a22:	441a      	add	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7ff f913 	bl	8004c56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a30:	f001 fa50 	bl	8006ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <prvAddNewTaskToReadyList+0xcc>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00e      	beq.n	8005a5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <prvAddNewTaskToReadyList+0xc8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d207      	bcs.n	8005a5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <prvAddNewTaskToReadyList+0xdc>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20005284 	.word	0x20005284
 8005a68:	20004db0 	.word	0x20004db0
 8005a6c:	20005290 	.word	0x20005290
 8005a70:	200052a0 	.word	0x200052a0
 8005a74:	2000528c 	.word	0x2000528c
 8005a78:	20004db4 	.word	0x20004db4
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d017      	beq.n	8005ac2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <vTaskDelay+0x60>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <vTaskDelay+0x30>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	60bb      	str	r3, [r7, #8]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ab0:	f000 f880 	bl	8005bb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fd10 	bl	80064dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005abc:	f000 f888 	bl	8005bd0 <xTaskResumeAll>
 8005ac0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d107      	bne.n	8005ad8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <vTaskDelay+0x64>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	200052ac 	.word	0x200052ac
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005af6:	463a      	mov	r2, r7
 8005af8:	1d39      	adds	r1, r7, #4
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff f848 	bl	8004b94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	9202      	str	r2, [sp, #8]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2300      	movs	r3, #0
 8005b14:	460a      	mov	r2, r1
 8005b16:	4921      	ldr	r1, [pc, #132]	; (8005b9c <vTaskStartScheduler+0xb4>)
 8005b18:	4821      	ldr	r0, [pc, #132]	; (8005ba0 <vTaskStartScheduler+0xb8>)
 8005b1a:	f7ff fe0f 	bl	800573c <xTaskCreateStatic>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <vTaskStartScheduler+0xbc>)
 8005b22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <vTaskStartScheduler+0xbc>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e001      	b.n	8005b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d102      	bne.n	8005b42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b3c:	f000 fd22 	bl	8006584 <xTimerCreateTimerTask>
 8005b40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d116      	bne.n	8005b76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	613b      	str	r3, [r7, #16]
}
 8005b5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b5c:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <vTaskStartScheduler+0xc0>)
 8005b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b64:	4b11      	ldr	r3, [pc, #68]	; (8005bac <vTaskStartScheduler+0xc4>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <vTaskStartScheduler+0xc8>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b70:	f001 f8de 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b74:	e00e      	b.n	8005b94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b7c:	d10a      	bne.n	8005b94 <vTaskStartScheduler+0xac>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vTaskStartScheduler+0xaa>
}
 8005b94:	bf00      	nop
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	080118b4 	.word	0x080118b4
 8005ba0:	08006219 	.word	0x08006219
 8005ba4:	200052a8 	.word	0x200052a8
 8005ba8:	200052a4 	.word	0x200052a4
 8005bac:	20005290 	.word	0x20005290
 8005bb0:	20005288 	.word	0x20005288

08005bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <vTaskSuspendAll+0x18>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4a03      	ldr	r2, [pc, #12]	; (8005bcc <vTaskSuspendAll+0x18>)
 8005bc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	200052ac 	.word	0x200052ac

08005bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bde:	4b42      	ldr	r3, [pc, #264]	; (8005ce8 <xTaskResumeAll+0x118>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <xTaskResumeAll+0x2c>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	603b      	str	r3, [r7, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bfc:	f001 f93a 	bl	8006e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c00:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <xTaskResumeAll+0x118>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	4a38      	ldr	r2, [pc, #224]	; (8005ce8 <xTaskResumeAll+0x118>)
 8005c08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c0a:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <xTaskResumeAll+0x118>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d162      	bne.n	8005cd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c12:	4b36      	ldr	r3, [pc, #216]	; (8005cec <xTaskResumeAll+0x11c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d05e      	beq.n	8005cd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c1a:	e02f      	b.n	8005c7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1c:	4b34      	ldr	r3, [pc, #208]	; (8005cf0 <xTaskResumeAll+0x120>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3318      	adds	r3, #24
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff f871 	bl	8004d10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f86c 	bl	8004d10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3c:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <xTaskResumeAll+0x124>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d903      	bls.n	8005c4c <xTaskResumeAll+0x7c>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a2a      	ldr	r2, [pc, #168]	; (8005cf4 <xTaskResumeAll+0x124>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <xTaskResumeAll+0x128>)
 8005c5a:	441a      	add	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f7fe fff7 	bl	8004c56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <xTaskResumeAll+0x12c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c76:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <xTaskResumeAll+0x130>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c7c:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <xTaskResumeAll+0x120>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1cb      	bne.n	8005c1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c8a:	f000 fb7b 	bl	8006384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c8e:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <xTaskResumeAll+0x134>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d010      	beq.n	8005cbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c9a:	f000 f847 	bl	8005d2c <xTaskIncrementTick>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ca4:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <xTaskResumeAll+0x130>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f1      	bne.n	8005c9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005cb6:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <xTaskResumeAll+0x134>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <xTaskResumeAll+0x130>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <xTaskResumeAll+0x138>)
 8005cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd8:	f001 f8fc 	bl	8006ed4 <vPortExitCritical>

	return xAlreadyYielded;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200052ac 	.word	0x200052ac
 8005cec:	20005284 	.word	0x20005284
 8005cf0:	20005244 	.word	0x20005244
 8005cf4:	2000528c 	.word	0x2000528c
 8005cf8:	20004db4 	.word	0x20004db4
 8005cfc:	20004db0 	.word	0x20004db0
 8005d00:	20005298 	.word	0x20005298
 8005d04:	20005294 	.word	0x20005294
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <xTaskGetTickCount+0x1c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d18:	687b      	ldr	r3, [r7, #4]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20005288 	.word	0x20005288

08005d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d36:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <xTaskIncrementTick+0x148>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 808f 	bne.w	8005e5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d40:	4b4d      	ldr	r3, [pc, #308]	; (8005e78 <xTaskIncrementTick+0x14c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d48:	4a4b      	ldr	r2, [pc, #300]	; (8005e78 <xTaskIncrementTick+0x14c>)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d120      	bne.n	8005d96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d54:	4b49      	ldr	r3, [pc, #292]	; (8005e7c <xTaskIncrementTick+0x150>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	603b      	str	r3, [r7, #0]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <xTaskIncrementTick+0x46>
 8005d74:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <xTaskIncrementTick+0x150>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	4b41      	ldr	r3, [pc, #260]	; (8005e80 <xTaskIncrementTick+0x154>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a3f      	ldr	r2, [pc, #252]	; (8005e7c <xTaskIncrementTick+0x150>)
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4a3f      	ldr	r2, [pc, #252]	; (8005e80 <xTaskIncrementTick+0x154>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	4b3e      	ldr	r3, [pc, #248]	; (8005e84 <xTaskIncrementTick+0x158>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	4a3d      	ldr	r2, [pc, #244]	; (8005e84 <xTaskIncrementTick+0x158>)
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	f000 faf7 	bl	8006384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d96:	4b3c      	ldr	r3, [pc, #240]	; (8005e88 <xTaskIncrementTick+0x15c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d349      	bcc.n	8005e34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da0:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <xTaskIncrementTick+0x150>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <xTaskIncrementTick+0x15c>)
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005db0:	601a      	str	r2, [r3, #0]
					break;
 8005db2:	e03f      	b.n	8005e34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <xTaskIncrementTick+0x150>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d203      	bcs.n	8005dd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dcc:	4a2e      	ldr	r2, [pc, #184]	; (8005e88 <xTaskIncrementTick+0x15c>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dd2:	e02f      	b.n	8005e34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe ff99 	bl	8004d10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	3318      	adds	r3, #24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe ff90 	bl	8004d10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <xTaskIncrementTick+0x160>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d903      	bls.n	8005e04 <xTaskIncrementTick+0xd8>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <xTaskIncrementTick+0x160>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <xTaskIncrementTick+0x164>)
 8005e12:	441a      	add	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fe ff1b 	bl	8004c56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <xTaskIncrementTick+0x168>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d3b8      	bcc.n	8005da0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e32:	e7b5      	b.n	8005da0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e34:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <xTaskIncrementTick+0x168>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	4915      	ldr	r1, [pc, #84]	; (8005e90 <xTaskIncrementTick+0x164>)
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d901      	bls.n	8005e50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <xTaskIncrementTick+0x16c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e004      	b.n	8005e68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <xTaskIncrementTick+0x170>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <xTaskIncrementTick+0x170>)
 8005e66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e68:	697b      	ldr	r3, [r7, #20]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200052ac 	.word	0x200052ac
 8005e78:	20005288 	.word	0x20005288
 8005e7c:	2000523c 	.word	0x2000523c
 8005e80:	20005240 	.word	0x20005240
 8005e84:	2000529c 	.word	0x2000529c
 8005e88:	200052a4 	.word	0x200052a4
 8005e8c:	2000528c 	.word	0x2000528c
 8005e90:	20004db4 	.word	0x20004db4
 8005e94:	20004db0 	.word	0x20004db0
 8005e98:	20005298 	.word	0x20005298
 8005e9c:	20005294 	.word	0x20005294

08005ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ea6:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <vTaskSwitchContext+0xa8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eae:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <vTaskSwitchContext+0xac>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eb4:	e041      	b.n	8005f3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005eb6:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <vTaskSwitchContext+0xac>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <vTaskSwitchContext+0xb0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e010      	b.n	8005ee6 <vTaskSwitchContext+0x46>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	607b      	str	r3, [r7, #4]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <vTaskSwitchContext+0x3e>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	491b      	ldr	r1, [pc, #108]	; (8005f54 <vTaskSwitchContext+0xb4>)
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0e4      	beq.n	8005ec4 <vTaskSwitchContext+0x24>
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <vTaskSwitchContext+0xb4>)
 8005f06:	4413      	add	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d104      	bne.n	8005f2a <vTaskSwitchContext+0x8a>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <vTaskSwitchContext+0xb8>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	4a06      	ldr	r2, [pc, #24]	; (8005f50 <vTaskSwitchContext+0xb0>)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6013      	str	r3, [r2, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	200052ac 	.word	0x200052ac
 8005f4c:	20005298 	.word	0x20005298
 8005f50:	2000528c 	.word	0x2000528c
 8005f54:	20004db4 	.word	0x20004db4
 8005f58:	20004db0 	.word	0x20004db0

08005f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60fb      	str	r3, [r7, #12]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <vTaskPlaceOnEventList+0x44>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3318      	adds	r3, #24
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fe fe87 	bl	8004c9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f90:	2101      	movs	r1, #1
 8005f92:	6838      	ldr	r0, [r7, #0]
 8005f94:	f000 faa2 	bl	80064dc <prvAddCurrentTaskToDelayedList>
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20004db0 	.word	0x20004db0

08005fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	617b      	str	r3, [r7, #20]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7fe fe3e 	bl	8004c56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f000 fa77 	bl	80064dc <prvAddCurrentTaskToDelayedList>
	}
 8005fee:	bf00      	nop
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20004db0 	.word	0x20004db0

08005ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60fb      	str	r3, [r7, #12]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	3318      	adds	r3, #24
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe fe6f 	bl	8004d10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006032:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <xTaskRemoveFromEventList+0xb0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11d      	bne.n	8006076 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fe66 	bl	8004d10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <xTaskRemoveFromEventList+0xb4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d903      	bls.n	8006058 <xTaskRemoveFromEventList+0x5c>
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4a16      	ldr	r2, [pc, #88]	; (80060b0 <xTaskRemoveFromEventList+0xb4>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <xTaskRemoveFromEventList+0xb8>)
 8006066:	441a      	add	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fdf1 	bl	8004c56 <vListInsertEnd>
 8006074:	e005      	b.n	8006082 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	3318      	adds	r3, #24
 800607a:	4619      	mov	r1, r3
 800607c:	480e      	ldr	r0, [pc, #56]	; (80060b8 <xTaskRemoveFromEventList+0xbc>)
 800607e:	f7fe fdea 	bl	8004c56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006086:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <xTaskRemoveFromEventList+0xc0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	429a      	cmp	r2, r3
 800608e:	d905      	bls.n	800609c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <xTaskRemoveFromEventList+0xc4>)
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e001      	b.n	80060a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060a0:	697b      	ldr	r3, [r7, #20]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200052ac 	.word	0x200052ac
 80060b0:	2000528c 	.word	0x2000528c
 80060b4:	20004db4 	.word	0x20004db4
 80060b8:	20005244 	.word	0x20005244
 80060bc:	20004db0 	.word	0x20004db0
 80060c0:	20005298 	.word	0x20005298

080060c4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60fb      	str	r3, [r7, #12]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80060e8:	f000 fec4 	bl	8006e74 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <vTaskSetTimeOutState+0x44>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <vTaskSetTimeOutState+0x48>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80060fc:	f000 feea 	bl	8006ed4 <vPortExitCritical>
}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	2000529c 	.word	0x2000529c
 800610c:	20005288 	.word	0x20005288

08006110 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <vTaskInternalSetTimeOutState+0x24>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <vTaskInternalSetTimeOutState+0x28>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	605a      	str	r2, [r3, #4]
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	2000529c 	.word	0x2000529c
 8006138:	20005288 	.word	0x20005288

0800613c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	613b      	str	r3, [r7, #16]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	60fb      	str	r3, [r7, #12]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800617e:	f000 fe79 	bl	8006e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <xTaskCheckForTimeOut+0xbc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619a:	d102      	bne.n	80061a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e023      	b.n	80061ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b15      	ldr	r3, [pc, #84]	; (80061fc <xTaskCheckForTimeOut+0xc0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d007      	beq.n	80061be <xTaskCheckForTimeOut+0x82>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	e015      	b.n	80061ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d20b      	bcs.n	80061e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ff9b 	bl	8006110 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	e004      	b.n	80061ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061ea:	f000 fe73 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 80061ee:	69fb      	ldr	r3, [r7, #28]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20005288 	.word	0x20005288
 80061fc:	2000529c 	.word	0x2000529c

08006200 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <vTaskMissedYield+0x14>)
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	20005298 	.word	0x20005298

08006218 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006220:	f000 f852 	bl	80062c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006224:	4b06      	ldr	r3, [pc, #24]	; (8006240 <prvIdleTask+0x28>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d9f9      	bls.n	8006220 <prvIdleTask+0x8>
			{
				taskYIELD();
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <prvIdleTask+0x2c>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800623c:	e7f0      	b.n	8006220 <prvIdleTask+0x8>
 800623e:	bf00      	nop
 8006240:	20004db4 	.word	0x20004db4
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	e00c      	b.n	800626e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4a12      	ldr	r2, [pc, #72]	; (80062a8 <prvInitialiseTaskLists+0x60>)
 8006260:	4413      	add	r3, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fcca 	bl	8004bfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3301      	adds	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b37      	cmp	r3, #55	; 0x37
 8006272:	d9ef      	bls.n	8006254 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006274:	480d      	ldr	r0, [pc, #52]	; (80062ac <prvInitialiseTaskLists+0x64>)
 8006276:	f7fe fcc1 	bl	8004bfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800627a:	480d      	ldr	r0, [pc, #52]	; (80062b0 <prvInitialiseTaskLists+0x68>)
 800627c:	f7fe fcbe 	bl	8004bfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006280:	480c      	ldr	r0, [pc, #48]	; (80062b4 <prvInitialiseTaskLists+0x6c>)
 8006282:	f7fe fcbb 	bl	8004bfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006286:	480c      	ldr	r0, [pc, #48]	; (80062b8 <prvInitialiseTaskLists+0x70>)
 8006288:	f7fe fcb8 	bl	8004bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800628c:	480b      	ldr	r0, [pc, #44]	; (80062bc <prvInitialiseTaskLists+0x74>)
 800628e:	f7fe fcb5 	bl	8004bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <prvInitialiseTaskLists+0x78>)
 8006294:	4a05      	ldr	r2, [pc, #20]	; (80062ac <prvInitialiseTaskLists+0x64>)
 8006296:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvInitialiseTaskLists+0x7c>)
 800629a:	4a05      	ldr	r2, [pc, #20]	; (80062b0 <prvInitialiseTaskLists+0x68>)
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20004db4 	.word	0x20004db4
 80062ac:	20005214 	.word	0x20005214
 80062b0:	20005228 	.word	0x20005228
 80062b4:	20005244 	.word	0x20005244
 80062b8:	20005258 	.word	0x20005258
 80062bc:	20005270 	.word	0x20005270
 80062c0:	2000523c 	.word	0x2000523c
 80062c4:	20005240 	.word	0x20005240

080062c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ce:	e019      	b.n	8006304 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062d0:	f000 fdd0 	bl	8006e74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <prvCheckTasksWaitingTermination+0x50>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fd15 	bl	8004d10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <prvCheckTasksWaitingTermination+0x54>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	4a0b      	ldr	r2, [pc, #44]	; (800631c <prvCheckTasksWaitingTermination+0x54>)
 80062ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <prvCheckTasksWaitingTermination+0x58>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	4a0a      	ldr	r2, [pc, #40]	; (8006320 <prvCheckTasksWaitingTermination+0x58>)
 80062f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062fa:	f000 fdeb 	bl	8006ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f810 	bl	8006324 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <prvCheckTasksWaitingTermination+0x58>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e1      	bne.n	80062d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20005258 	.word	0x20005258
 800631c:	20005284 	.word	0x20005284
 8006320:	2000526c 	.word	0x2000526c

08006324 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ff88 	bl	8007250 <vPortFree>
				vPortFree( pxTCB );
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 ff85 	bl	8007250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006346:	e018      	b.n	800637a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800634e:	2b01      	cmp	r3, #1
 8006350:	d103      	bne.n	800635a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 ff7c 	bl	8007250 <vPortFree>
	}
 8006358:	e00f      	b.n	800637a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006360:	2b02      	cmp	r3, #2
 8006362:	d00a      	beq.n	800637a <prvDeleteTCB+0x56>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <prvDeleteTCB+0x54>
	}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <prvResetNextTaskUnblockTime+0x38>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800639a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800639c:	e008      	b.n	80063b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639e:	4b07      	ldr	r3, [pc, #28]	; (80063bc <prvResetNextTaskUnblockTime+0x38>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <prvResetNextTaskUnblockTime+0x3c>)
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	2000523c 	.word	0x2000523c
 80063c0:	200052a4 	.word	0x200052a4

080063c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <xTaskGetSchedulerState+0x34>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063d2:	2301      	movs	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	e008      	b.n	80063ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <xTaskGetSchedulerState+0x38>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063e0:	2302      	movs	r3, #2
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	e001      	b.n	80063ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063ea:	687b      	ldr	r3, [r7, #4]
	}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20005290 	.word	0x20005290
 80063fc:	200052ac 	.word	0x200052ac

08006400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d056      	beq.n	80064c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006416:	4b2e      	ldr	r3, [pc, #184]	; (80064d0 <xTaskPriorityDisinherit+0xd0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d00a      	beq.n	8006436 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	60bb      	str	r3, [r7, #8]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006458:	1e5a      	subs	r2, r3, #1
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006466:	429a      	cmp	r2, r3
 8006468:	d02c      	beq.n	80064c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646e:	2b00      	cmp	r3, #0
 8006470:	d128      	bne.n	80064c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	3304      	adds	r3, #4
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fc4a 	bl	8004d10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <xTaskPriorityDisinherit+0xd4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d903      	bls.n	80064a4 <xTaskPriorityDisinherit+0xa4>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	4a0c      	ldr	r2, [pc, #48]	; (80064d4 <xTaskPriorityDisinherit+0xd4>)
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <xTaskPriorityDisinherit+0xd8>)
 80064b2:	441a      	add	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7fe fbcb 	bl	8004c56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064c4:	697b      	ldr	r3, [r7, #20]
	}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20004db0 	.word	0x20004db0
 80064d4:	2000528c 	.word	0x2000528c
 80064d8:	20004db4 	.word	0x20004db4

080064dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064e6:	4b21      	ldr	r3, [pc, #132]	; (800656c <prvAddCurrentTaskToDelayedList+0x90>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ec:	4b20      	ldr	r3, [pc, #128]	; (8006570 <prvAddCurrentTaskToDelayedList+0x94>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fc0c 	bl	8004d10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064fe:	d10a      	bne.n	8006516 <prvAddCurrentTaskToDelayedList+0x3a>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <prvAddCurrentTaskToDelayedList+0x94>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4819      	ldr	r0, [pc, #100]	; (8006574 <prvAddCurrentTaskToDelayedList+0x98>)
 8006510:	f7fe fba1 	bl	8004c56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006514:	e026      	b.n	8006564 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4413      	add	r3, r2
 800651c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <prvAddCurrentTaskToDelayedList+0x94>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	429a      	cmp	r2, r3
 800652c:	d209      	bcs.n	8006542 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <prvAddCurrentTaskToDelayedList+0x94>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3304      	adds	r3, #4
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f7fe fbaf 	bl	8004c9e <vListInsert>
}
 8006540:	e010      	b.n	8006564 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006542:	4b0e      	ldr	r3, [pc, #56]	; (800657c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <prvAddCurrentTaskToDelayedList+0x94>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3304      	adds	r3, #4
 800654c:	4619      	mov	r1, r3
 800654e:	4610      	mov	r0, r2
 8006550:	f7fe fba5 	bl	8004c9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006554:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	d202      	bcs.n	8006564 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800655e:	4a08      	ldr	r2, [pc, #32]	; (8006580 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	6013      	str	r3, [r2, #0]
}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20005288 	.word	0x20005288
 8006570:	20004db0 	.word	0x20004db0
 8006574:	20005270 	.word	0x20005270
 8006578:	20005240 	.word	0x20005240
 800657c:	2000523c 	.word	0x2000523c
 8006580:	200052a4 	.word	0x200052a4

08006584 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800658e:	f000 fb07 	bl	8006ba0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <xTimerCreateTimerTask+0x80>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d021      	beq.n	80065de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065a2:	1d3a      	adds	r2, r7, #4
 80065a4:	f107 0108 	add.w	r1, r7, #8
 80065a8:	f107 030c 	add.w	r3, r7, #12
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fb0b 	bl	8004bc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	9202      	str	r2, [sp, #8]
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	2302      	movs	r3, #2
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2300      	movs	r3, #0
 80065c2:	460a      	mov	r2, r1
 80065c4:	4910      	ldr	r1, [pc, #64]	; (8006608 <xTimerCreateTimerTask+0x84>)
 80065c6:	4811      	ldr	r0, [pc, #68]	; (800660c <xTimerCreateTimerTask+0x88>)
 80065c8:	f7ff f8b8 	bl	800573c <xTaskCreateStatic>
 80065cc:	4603      	mov	r3, r0
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <xTimerCreateTimerTask+0x8c>)
 80065d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065d2:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <xTimerCreateTimerTask+0x8c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065da:	2301      	movs	r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	613b      	str	r3, [r7, #16]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80065fa:	697b      	ldr	r3, [r7, #20]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	200052e0 	.word	0x200052e0
 8006608:	080118bc 	.word	0x080118bc
 800660c:	08006749 	.word	0x08006749
 8006610:	200052e4 	.word	0x200052e4

08006614 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <xTimerGenericCommand+0x2e>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	623b      	str	r3, [r7, #32]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006642:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <xTimerGenericCommand+0x98>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d02a      	beq.n	80066a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b05      	cmp	r3, #5
 800665a:	dc18      	bgt.n	800668e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800665c:	f7ff feb2 	bl	80063c4 <xTaskGetSchedulerState>
 8006660:	4603      	mov	r3, r0
 8006662:	2b02      	cmp	r3, #2
 8006664:	d109      	bne.n	800667a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006666:	4b11      	ldr	r3, [pc, #68]	; (80066ac <xTimerGenericCommand+0x98>)
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f107 0110 	add.w	r1, r7, #16
 800666e:	2300      	movs	r3, #0
 8006670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006672:	f7fe fc7b 	bl	8004f6c <xQueueGenericSend>
 8006676:	6278      	str	r0, [r7, #36]	; 0x24
 8006678:	e012      	b.n	80066a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <xTimerGenericCommand+0x98>)
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f107 0110 	add.w	r1, r7, #16
 8006682:	2300      	movs	r3, #0
 8006684:	2200      	movs	r2, #0
 8006686:	f7fe fc71 	bl	8004f6c <xQueueGenericSend>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24
 800668c:	e008      	b.n	80066a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <xTimerGenericCommand+0x98>)
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f107 0110 	add.w	r1, r7, #16
 8006696:	2300      	movs	r3, #0
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	f7fe fd65 	bl	8005168 <xQueueGenericSendFromISR>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3728      	adds	r7, #40	; 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200052e0 	.word	0x200052e0

080066b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ba:	4b22      	ldr	r3, [pc, #136]	; (8006744 <prvProcessExpiredTimer+0x94>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fb21 	bl	8004d10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d022      	beq.n	8006722 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	18d1      	adds	r1, r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	6978      	ldr	r0, [r7, #20]
 80066ea:	f000 f8d1 	bl	8006890 <prvInsertTimerInActiveList>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01f      	beq.n	8006734 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066f4:	2300      	movs	r3, #0
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2300      	movs	r3, #0
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	2100      	movs	r1, #0
 80066fe:	6978      	ldr	r0, [r7, #20]
 8006700:	f7ff ff88 	bl	8006614 <xTimerGenericCommand>
 8006704:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d113      	bne.n	8006734 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60fb      	str	r3, [r7, #12]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	b2da      	uxtb	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	6978      	ldr	r0, [r7, #20]
 800673a:	4798      	blx	r3
}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	200052d8 	.word	0x200052d8

08006748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006750:	f107 0308 	add.w	r3, r7, #8
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f857 	bl	8006808 <prvGetNextExpireTime>
 800675a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4619      	mov	r1, r3
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f803 	bl	800676c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006766:	f000 f8d5 	bl	8006914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800676a:	e7f1      	b.n	8006750 <prvTimerTask+0x8>

0800676c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006776:	f7ff fa1d 	bl	8005bb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800677a:	f107 0308 	add.w	r3, r7, #8
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f866 	bl	8006850 <prvSampleTimeNow>
 8006784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d130      	bne.n	80067ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <prvProcessTimerOrBlockTask+0x3c>
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	429a      	cmp	r2, r3
 8006798:	d806      	bhi.n	80067a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800679a:	f7ff fa19 	bl	8005bd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff85 	bl	80066b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067a6:	e024      	b.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <prvProcessTimerOrBlockTask+0x90>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <prvProcessTimerOrBlockTask+0x50>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <prvProcessTimerOrBlockTask+0x52>
 80067bc:	2300      	movs	r3, #0
 80067be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <prvProcessTimerOrBlockTask+0x94>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fe ff81 	bl	80056d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067d2:	f7ff f9fd 	bl	8005bd0 <xTaskResumeAll>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <prvProcessTimerOrBlockTask+0x98>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
}
 80067ec:	e001      	b.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ee:	f7ff f9ef 	bl	8005bd0 <xTaskResumeAll>
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200052dc 	.word	0x200052dc
 8006800:	200052e0 	.word	0x200052e0
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <prvGetNextExpireTime+0x44>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <prvGetNextExpireTime+0x16>
 800681a:	2201      	movs	r2, #1
 800681c:	e000      	b.n	8006820 <prvGetNextExpireTime+0x18>
 800681e:	2200      	movs	r2, #0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <prvGetNextExpireTime+0x44>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e001      	b.n	800683c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800683c:	68fb      	ldr	r3, [r7, #12]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	200052d8 	.word	0x200052d8

08006850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006858:	f7ff fa58 	bl	8005d0c <xTaskGetTickCount>
 800685c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <prvSampleTimeNow+0x3c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d205      	bcs.n	8006874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006868:	f000 f936 	bl	8006ad8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e002      	b.n	800687a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800687a:	4a04      	ldr	r2, [pc, #16]	; (800688c <prvSampleTimeNow+0x3c>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200052e8 	.word	0x200052e8

08006890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d812      	bhi.n	80068dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e01b      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <prvInsertTimerInActiveList+0x7c>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fe f9e2 	bl	8004c9e <vListInsert>
 80068da:	e012      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d206      	bcs.n	80068f2 <prvInsertTimerInActiveList+0x62>
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e007      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <prvInsertTimerInActiveList+0x80>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fe f9ce 	bl	8004c9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006902:	697b      	ldr	r3, [r7, #20]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200052dc 	.word	0x200052dc
 8006910:	200052d8 	.word	0x200052d8

08006914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08e      	sub	sp, #56	; 0x38
 8006918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800691a:	e0ca      	b.n	8006ab2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da18      	bge.n	8006954 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006922:	1d3b      	adds	r3, r7, #4
 8006924:	3304      	adds	r3, #4
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	61fb      	str	r3, [r7, #28]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694a:	6850      	ldr	r0, [r2, #4]
 800694c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694e:	6892      	ldr	r2, [r2, #8]
 8006950:	4611      	mov	r1, r2
 8006952:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f2c0 80ab 	blt.w	8006ab2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	3304      	adds	r3, #4
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe f9cf 	bl	8004d10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006972:	463b      	mov	r3, r7
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff ff6b 	bl	8006850 <prvSampleTimeNow>
 800697a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b09      	cmp	r3, #9
 8006980:	f200 8096 	bhi.w	8006ab0 <prvProcessReceivedCommands+0x19c>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <prvProcessReceivedCommands+0x78>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069b5 	.word	0x080069b5
 8006990:	080069b5 	.word	0x080069b5
 8006994:	080069b5 	.word	0x080069b5
 8006998:	08006a29 	.word	0x08006a29
 800699c:	08006a3d 	.word	0x08006a3d
 80069a0:	08006a87 	.word	0x08006a87
 80069a4:	080069b5 	.word	0x080069b5
 80069a8:	080069b5 	.word	0x080069b5
 80069ac:	08006a29 	.word	0x08006a29
 80069b0:	08006a3d 	.word	0x08006a3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	18d1      	adds	r1, r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d4:	f7ff ff5c 	bl	8006890 <prvInsertTimerInActiveList>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d069      	beq.n	8006ab2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d05e      	beq.n	8006ab2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	441a      	add	r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	2100      	movs	r1, #0
 8006a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a06:	f7ff fe05 	bl	8006614 <xTimerGenericCommand>
 8006a0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d14f      	bne.n	8006ab2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	61bb      	str	r3, [r7, #24]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a3a:	e03a      	b.n	8006ab2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	617b      	str	r3, [r7, #20]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	18d1      	adds	r1, r2, r3
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a80:	f7ff ff06 	bl	8006890 <prvInsertTimerInActiveList>
					break;
 8006a84:	e015      	b.n	8006ab2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d103      	bne.n	8006a9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a96:	f000 fbdb 	bl	8007250 <vPortFree>
 8006a9a:	e00a      	b.n	8006ab2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006aae:	e000      	b.n	8006ab2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006ab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <prvProcessReceivedCommands+0x1c0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	1d39      	adds	r1, r7, #4
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fbf0 	bl	80052a0 <xQueueReceive>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f47f af2a 	bne.w	800691c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	3730      	adds	r7, #48	; 0x30
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200052e0 	.word	0x200052e0

08006ad8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ade:	e048      	b.n	8006b72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ae0:	4b2d      	ldr	r3, [pc, #180]	; (8006b98 <prvSwitchTimerLists+0xc0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aea:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <prvSwitchTimerLists+0xc0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe f909 	bl	8004d10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d02e      	beq.n	8006b72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d90e      	bls.n	8006b44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b32:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <prvSwitchTimerLists+0xc0>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7fe f8ae 	bl	8004c9e <vListInsert>
 8006b42:	e016      	b.n	8006b72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b44:	2300      	movs	r3, #0
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7ff fd60 	bl	8006614 <xTimerGenericCommand>
 8006b54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	603b      	str	r3, [r7, #0]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b72:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <prvSwitchTimerLists+0xc0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1b1      	bne.n	8006ae0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <prvSwitchTimerLists+0xc0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b82:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <prvSwitchTimerLists+0xc4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <prvSwitchTimerLists+0xc0>)
 8006b88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b8a:	4a04      	ldr	r2, [pc, #16]	; (8006b9c <prvSwitchTimerLists+0xc4>)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	6013      	str	r3, [r2, #0]
}
 8006b90:	bf00      	nop
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	200052d8 	.word	0x200052d8
 8006b9c:	200052dc 	.word	0x200052dc

08006ba0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ba6:	f000 f965 	bl	8006e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006baa:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <prvCheckForValidListAndQueue+0x60>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d120      	bne.n	8006bf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bb2:	4814      	ldr	r0, [pc, #80]	; (8006c04 <prvCheckForValidListAndQueue+0x64>)
 8006bb4:	f7fe f822 	bl	8004bfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bb8:	4813      	ldr	r0, [pc, #76]	; (8006c08 <prvCheckForValidListAndQueue+0x68>)
 8006bba:	f7fe f81f 	bl	8004bfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <prvCheckForValidListAndQueue+0x6c>)
 8006bc0:	4a10      	ldr	r2, [pc, #64]	; (8006c04 <prvCheckForValidListAndQueue+0x64>)
 8006bc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bc4:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <prvCheckForValidListAndQueue+0x70>)
 8006bc6:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <prvCheckForValidListAndQueue+0x68>)
 8006bc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <prvCheckForValidListAndQueue+0x74>)
 8006bd0:	4a11      	ldr	r2, [pc, #68]	; (8006c18 <prvCheckForValidListAndQueue+0x78>)
 8006bd2:	2110      	movs	r1, #16
 8006bd4:	200a      	movs	r0, #10
 8006bd6:	f7fe f92d 	bl	8004e34 <xQueueGenericCreateStatic>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <prvCheckForValidListAndQueue+0x60>)
 8006bde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <prvCheckForValidListAndQueue+0x60>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <prvCheckForValidListAndQueue+0x60>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	490b      	ldr	r1, [pc, #44]	; (8006c1c <prvCheckForValidListAndQueue+0x7c>)
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fd46 	bl	8005680 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bf4:	f000 f96e 	bl	8006ed4 <vPortExitCritical>
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200052e0 	.word	0x200052e0
 8006c04:	200052b0 	.word	0x200052b0
 8006c08:	200052c4 	.word	0x200052c4
 8006c0c:	200052d8 	.word	0x200052d8
 8006c10:	200052dc 	.word	0x200052dc
 8006c14:	2000538c 	.word	0x2000538c
 8006c18:	200052ec 	.word	0x200052ec
 8006c1c:	080118c4 	.word	0x080118c4

08006c20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3b04      	subs	r3, #4
 8006c30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3b04      	subs	r3, #4
 8006c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f023 0201 	bic.w	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b04      	subs	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c50:	4a0c      	ldr	r2, [pc, #48]	; (8006c84 <pxPortInitialiseStack+0x64>)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b14      	subs	r3, #20
 8006c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3b04      	subs	r3, #4
 8006c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f06f 0202 	mvn.w	r2, #2
 8006c6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3b20      	subs	r3, #32
 8006c74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c76:	68fb      	ldr	r3, [r7, #12]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	08006c89 	.word	0x08006c89

08006c88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c92:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <prvTaskExitError+0x54>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c9a:	d00a      	beq.n	8006cb2 <prvTaskExitError+0x2a>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	60fb      	str	r3, [r7, #12]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <prvTaskExitError+0x28>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	60bb      	str	r3, [r7, #8]
}
 8006cc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cc6:	bf00      	nop
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0fc      	beq.n	8006cc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cce:	bf00      	nop
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000010 	.word	0x20000010

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	20004db0 	.word	0x20004db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	; (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d36:	4b46      	ldr	r3, [pc, #280]	; (8006e50 <xPortStartScheduler+0x120>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a46      	ldr	r2, [pc, #280]	; (8006e54 <xPortStartScheduler+0x124>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10a      	bne.n	8006d56 <xPortStartScheduler+0x26>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d56:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <xPortStartScheduler+0x120>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a3f      	ldr	r2, [pc, #252]	; (8006e58 <xPortStartScheduler+0x128>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10a      	bne.n	8006d76 <xPortStartScheduler+0x46>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d76:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <xPortStartScheduler+0x12c>)
 8006d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <xPortStartScheduler+0x130>)
 8006d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <xPortStartScheduler+0x134>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006da4:	e009      	b.n	8006dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006da6:	4b2f      	ldr	r3, [pc, #188]	; (8006e64 <xPortStartScheduler+0x134>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d0ef      	beq.n	8006da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dc6:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f1c3 0307 	rsb	r3, r3, #7
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d00a      	beq.n	8006de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	60bb      	str	r3, [r7, #8]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006de8:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <xPortStartScheduler+0x134>)
 8006df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006df2:	4b1c      	ldr	r3, [pc, #112]	; (8006e64 <xPortStartScheduler+0x134>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e1e:	f000 f8dd 	bl	8006fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <xPortStartScheduler+0x13c>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e28:	f000 f8fc 	bl	8007024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e2c:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <xPortStartScheduler+0x140>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <xPortStartScheduler+0x140>)
 8006e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e38:	f7ff ff66 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e3c:	f7ff f830 	bl	8005ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8006e40:	f7ff ff22 	bl	8006c88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	e000ed00 	.word	0xe000ed00
 8006e54:	410fc271 	.word	0x410fc271
 8006e58:	410fc270 	.word	0x410fc270
 8006e5c:	e000e400 	.word	0xe000e400
 8006e60:	200053dc 	.word	0x200053dc
 8006e64:	200053e0 	.word	0x200053e0
 8006e68:	e000ed20 	.word	0xe000ed20
 8006e6c:	20000010 	.word	0x20000010
 8006e70:	e000ef34 	.word	0xe000ef34

08006e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	607b      	str	r3, [r7, #4]
}
 8006e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	4a0d      	ldr	r2, [pc, #52]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d10f      	bne.n	8006ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <vPortEnterCritical+0x5c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	603b      	str	r3, [r7, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <vPortEnterCritical+0x4a>
	}
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	20000010 	.word	0x20000010
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <vPortExitCritical+0x50>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <vPortExitCritical+0x24>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	607b      	str	r3, [r7, #4]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <vPortExitCritical+0x50>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <vPortExitCritical+0x50>)
 8006f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <vPortExitCritical+0x50>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <vPortExitCritical+0x42>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f383 8811 	msr	BASEPRI, r3
}
 8006f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000010 	.word	0x20000010
	...

08006f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f30:	f3ef 8009 	mrs	r0, PSP
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <pxCurrentTCBConst>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f01e 0f10 	tst.w	lr, #16
 8006f40:	bf08      	it	eq
 8006f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f54:	f380 8811 	msr	BASEPRI, r0
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f7fe ff9e 	bl	8005ea0 <vTaskSwitchContext>
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f380 8811 	msr	BASEPRI, r0
 8006f6c:	bc09      	pop	{r0, r3}
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	6808      	ldr	r0, [r1, #0]
 8006f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f76:	f01e 0f10 	tst.w	lr, #16
 8006f7a:	bf08      	it	eq
 8006f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f80:	f380 8809 	msr	PSP, r0
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst>:
 8006f90:	20004db0 	.word	0x20004db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fb2:	f7fe febb 	bl	8005d2c <xTaskIncrementTick>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fbc:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <xPortSysTickHandler+0x40>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <vPortSetupTimerInterrupt+0x34>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <vPortSetupTimerInterrupt+0x38>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <vPortSetupTimerInterrupt+0x3c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0a      	ldr	r2, [pc, #40]	; (800701c <vPortSetupTimerInterrupt+0x40>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	4a09      	ldr	r2, [pc, #36]	; (8007020 <vPortSetupTimerInterrupt+0x44>)
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ffe:	4b04      	ldr	r3, [pc, #16]	; (8007010 <vPortSetupTimerInterrupt+0x34>)
 8007000:	2207      	movs	r2, #7
 8007002:	601a      	str	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e010 	.word	0xe000e010
 8007014:	e000e018 	.word	0xe000e018
 8007018:	20000004 	.word	0x20000004
 800701c:	10624dd3 	.word	0x10624dd3
 8007020:	e000e014 	.word	0xe000e014

08007024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007034 <vPortEnableVFP+0x10>
 8007028:	6801      	ldr	r1, [r0, #0]
 800702a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800702e:	6001      	str	r1, [r0, #0]
 8007030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007032:	bf00      	nop
 8007034:	e000ed88 	.word	0xe000ed88

08007038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800703e:	f3ef 8305 	mrs	r3, IPSR
 8007042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d914      	bls.n	8007074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704a:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <vPortValidateInterruptPriority+0x70>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007054:	4b15      	ldr	r3, [pc, #84]	; (80070ac <vPortValidateInterruptPriority+0x74>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	7afa      	ldrb	r2, [r7, #11]
 800705a:	429a      	cmp	r2, r3
 800705c:	d20a      	bcs.n	8007074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <vPortValidateInterruptPriority+0x78>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <vPortValidateInterruptPriority+0x7c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d90a      	bls.n	800709a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	603b      	str	r3, [r7, #0]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <vPortValidateInterruptPriority+0x60>
	}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	e000e3f0 	.word	0xe000e3f0
 80070ac:	200053dc 	.word	0x200053dc
 80070b0:	e000ed0c 	.word	0xe000ed0c
 80070b4:	200053e0 	.word	0x200053e0

080070b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070c4:	f7fe fd76 	bl	8005bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070c8:	4b5b      	ldr	r3, [pc, #364]	; (8007238 <pvPortMalloc+0x180>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070d0:	f000 f920 	bl	8007314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070d4:	4b59      	ldr	r3, [pc, #356]	; (800723c <pvPortMalloc+0x184>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8093 	bne.w	8007208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01d      	beq.n	8007124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070e8:	2208      	movs	r2, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d014      	beq.n	8007124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f023 0307 	bic.w	r3, r3, #7
 8007100:	3308      	adds	r3, #8
 8007102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <pvPortMalloc+0x6c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	617b      	str	r3, [r7, #20]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d06e      	beq.n	8007208 <pvPortMalloc+0x150>
 800712a:	4b45      	ldr	r3, [pc, #276]	; (8007240 <pvPortMalloc+0x188>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d869      	bhi.n	8007208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007134:	4b43      	ldr	r3, [pc, #268]	; (8007244 <pvPortMalloc+0x18c>)
 8007136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007138:	4b42      	ldr	r3, [pc, #264]	; (8007244 <pvPortMalloc+0x18c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800713e:	e004      	b.n	800714a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <pvPortMalloc+0xa4>
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f1      	bne.n	8007140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800715c:	4b36      	ldr	r3, [pc, #216]	; (8007238 <pvPortMalloc+0x180>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	429a      	cmp	r2, r3
 8007164:	d050      	beq.n	8007208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	4413      	add	r3, r2
 800716e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	2308      	movs	r3, #8
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	429a      	cmp	r2, r3
 8007186:	d91f      	bls.n	80071c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <pvPortMalloc+0xf8>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	613b      	str	r3, [r7, #16]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071c2:	69b8      	ldr	r0, [r7, #24]
 80071c4:	f000 f908 	bl	80073d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071c8:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <pvPortMalloc+0x188>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <pvPortMalloc+0x188>)
 80071d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071d6:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <pvPortMalloc+0x188>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b1b      	ldr	r3, [pc, #108]	; (8007248 <pvPortMalloc+0x190>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d203      	bcs.n	80071ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071e2:	4b17      	ldr	r3, [pc, #92]	; (8007240 <pvPortMalloc+0x188>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a18      	ldr	r2, [pc, #96]	; (8007248 <pvPortMalloc+0x190>)
 80071e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <pvPortMalloc+0x184>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <pvPortMalloc+0x194>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a11      	ldr	r2, [pc, #68]	; (800724c <pvPortMalloc+0x194>)
 8007206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007208:	f7fe fce2 	bl	8005bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <pvPortMalloc+0x174>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <pvPortMalloc+0x172>
	return pvReturn;
 800722c:	69fb      	ldr	r3, [r7, #28]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	; 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20008fec 	.word	0x20008fec
 800723c:	20009000 	.word	0x20009000
 8007240:	20008ff0 	.word	0x20008ff0
 8007244:	20008fe4 	.word	0x20008fe4
 8007248:	20008ff4 	.word	0x20008ff4
 800724c:	20008ff8 	.word	0x20008ff8

08007250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d04d      	beq.n	80072fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007262:	2308      	movs	r3, #8
 8007264:	425b      	negs	r3, r3
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4b24      	ldr	r3, [pc, #144]	; (8007308 <vPortFree+0xb8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <vPortFree+0x44>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <vPortFree+0x62>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60bb      	str	r3, [r7, #8]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <vPortFree+0xb8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01e      	beq.n	80072fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d11a      	bne.n	80072fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <vPortFree+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072d8:	f7fe fc6c 	bl	8005bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <vPortFree+0xbc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4413      	add	r3, r2
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <vPortFree+0xbc>)
 80072e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f000 f874 	bl	80073d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <vPortFree+0xc0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3301      	adds	r3, #1
 80072f6:	4a06      	ldr	r2, [pc, #24]	; (8007310 <vPortFree+0xc0>)
 80072f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072fa:	f7fe fc69 	bl	8005bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20009000 	.word	0x20009000
 800730c:	20008ff0 	.word	0x20008ff0
 8007310:	20008ffc 	.word	0x20008ffc

08007314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800731a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800731e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007320:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <prvHeapInit+0xac>)
 8007322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3307      	adds	r3, #7
 8007332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <prvHeapInit+0xac>)
 8007344:	4413      	add	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <prvHeapInit+0xb0>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <prvHeapInit+0xb0>)
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007360:	2208      	movs	r2, #8
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <prvHeapInit+0xb4>)
 8007374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <prvHeapInit+0xb4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <prvHeapInit+0xb4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvHeapInit+0xb4>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <prvHeapInit+0xb8>)
 80073a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <prvHeapInit+0xbc>)
 80073aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <prvHeapInit+0xc0>)
 80073ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	200053e4 	.word	0x200053e4
 80073c4:	20008fe4 	.word	0x20008fe4
 80073c8:	20008fec 	.word	0x20008fec
 80073cc:	20008ff4 	.word	0x20008ff4
 80073d0:	20008ff0 	.word	0x20008ff0
 80073d4:	20009000 	.word	0x20009000

080073d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <prvInsertBlockIntoFreeList+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e002      	b.n	80073ec <prvInsertBlockIntoFreeList+0x14>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d8f7      	bhi.n	80073e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d108      	bne.n	800741a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	441a      	add	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	441a      	add	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d118      	bne.n	8007460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d00d      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e008      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e003      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d002      	beq.n	8007476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20008fe4 	.word	0x20008fe4
 8007488:	20008fec 	.word	0x20008fec

0800748c <rcl_get_zero_initialized_publisher>:
 800748c:	4b01      	ldr	r3, [pc, #4]	; (8007494 <rcl_get_zero_initialized_publisher+0x8>)
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	0801191c 	.word	0x0801191c

08007498 <rcl_publisher_init>:
 8007498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	b088      	sub	sp, #32
 800749e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	d069      	beq.n	8007578 <rcl_publisher_init+0xe0>
 80074a4:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80074a8:	4604      	mov	r4, r0
 80074aa:	4648      	mov	r0, r9
 80074ac:	460e      	mov	r6, r1
 80074ae:	4690      	mov	r8, r2
 80074b0:	461f      	mov	r7, r3
 80074b2:	f000 f9d5 	bl	8007860 <rcutils_allocator_is_valid>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d05e      	beq.n	8007578 <rcl_publisher_init+0xe0>
 80074ba:	2c00      	cmp	r4, #0
 80074bc:	d05c      	beq.n	8007578 <rcl_publisher_init+0xe0>
 80074be:	f8d4 a000 	ldr.w	sl, [r4]
 80074c2:	f1ba 0f00 	cmp.w	sl, #0
 80074c6:	d004      	beq.n	80074d2 <rcl_publisher_init+0x3a>
 80074c8:	2764      	movs	r7, #100	; 0x64
 80074ca:	4638      	mov	r0, r7
 80074cc:	b008      	add	sp, #32
 80074ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d2:	4630      	mov	r0, r6
 80074d4:	f004 ffb8 	bl	800c448 <rcl_node_is_valid>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d052      	beq.n	8007582 <rcl_publisher_init+0xea>
 80074dc:	f1b8 0f00 	cmp.w	r8, #0
 80074e0:	d04a      	beq.n	8007578 <rcl_publisher_init+0xe0>
 80074e2:	2f00      	cmp	r7, #0
 80074e4:	d048      	beq.n	8007578 <rcl_publisher_init+0xe0>
 80074e6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80074ea:	aa07      	add	r2, sp, #28
 80074ec:	9205      	str	r2, [sp, #20]
 80074ee:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80074f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80074fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80074fe:	4639      	mov	r1, r7
 8007500:	e899 000c 	ldmia.w	r9, {r2, r3}
 8007504:	4630      	mov	r0, r6
 8007506:	f004 fff3 	bl	800c4f0 <rcl_node_resolve_name>
 800750a:	4607      	mov	r7, r0
 800750c:	2800      	cmp	r0, #0
 800750e:	d14f      	bne.n	80075b0 <rcl_publisher_init+0x118>
 8007510:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007512:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007514:	20c8      	movs	r0, #200	; 0xc8
 8007516:	4798      	blx	r3
 8007518:	6020      	str	r0, [r4, #0]
 800751a:	2800      	cmp	r0, #0
 800751c:	d04e      	beq.n	80075bc <rcl_publisher_init+0x124>
 800751e:	4630      	mov	r0, r6
 8007520:	f004 ffb4 	bl	800c48c <rcl_node_get_rmw_handle>
 8007524:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	6827      	ldr	r7, [r4, #0]
 800752e:	462b      	mov	r3, r5
 8007530:	4641      	mov	r1, r8
 8007532:	f000 fa53 	bl	80079dc <rmw_create_publisher>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800753c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007540:	b370      	cbz	r0, 80075a0 <rcl_publisher_init+0x108>
 8007542:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007546:	f000 fb27 	bl	8007b98 <rmw_publisher_get_actual_qos>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	4607      	mov	r7, r0
 800754e:	b9d0      	cbnz	r0, 8007586 <rcl_publisher_init+0xee>
 8007550:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8007554:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8007558:	4629      	mov	r1, r5
 800755a:	2270      	movs	r2, #112	; 0x70
 800755c:	4618      	mov	r0, r3
 800755e:	f009 fa50 	bl	8010a02 <memcpy>
 8007562:	6832      	ldr	r2, [r6, #0]
 8007564:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8007568:	9807      	ldr	r0, [sp, #28]
 800756a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800756c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800756e:	4798      	blx	r3
 8007570:	4638      	mov	r0, r7
 8007572:	b008      	add	sp, #32
 8007574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007578:	270b      	movs	r7, #11
 800757a:	4638      	mov	r0, r7
 800757c:	b008      	add	sp, #32
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	27c8      	movs	r7, #200	; 0xc8
 8007584:	e7a1      	b.n	80074ca <rcl_publisher_init+0x32>
 8007586:	b18b      	cbz	r3, 80075ac <rcl_publisher_init+0x114>
 8007588:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800758c:	b142      	cbz	r2, 80075a0 <rcl_publisher_init+0x108>
 800758e:	4630      	mov	r0, r6
 8007590:	f004 ff7c 	bl	800c48c <rcl_node_get_rmw_handle>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800759a:	f000 fb0d 	bl	8007bb8 <rmw_destroy_publisher>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80075a2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80075a4:	4618      	mov	r0, r3
 80075a6:	4790      	blx	r2
 80075a8:	2300      	movs	r3, #0
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	2701      	movs	r7, #1
 80075ae:	e7db      	b.n	8007568 <rcl_publisher_init+0xd0>
 80075b0:	2867      	cmp	r0, #103	; 0x67
 80075b2:	d0d9      	beq.n	8007568 <rcl_publisher_init+0xd0>
 80075b4:	2869      	cmp	r0, #105	; 0x69
 80075b6:	d003      	beq.n	80075c0 <rcl_publisher_init+0x128>
 80075b8:	280a      	cmp	r0, #10
 80075ba:	d1f7      	bne.n	80075ac <rcl_publisher_init+0x114>
 80075bc:	270a      	movs	r7, #10
 80075be:	e7d3      	b.n	8007568 <rcl_publisher_init+0xd0>
 80075c0:	2767      	movs	r7, #103	; 0x67
 80075c2:	e7d1      	b.n	8007568 <rcl_publisher_init+0xd0>

080075c4 <rcl_publisher_get_default_options>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4d14      	ldr	r5, [pc, #80]	; (8007618 <rcl_publisher_get_default_options+0x54>)
 80075c8:	4914      	ldr	r1, [pc, #80]	; (800761c <rcl_publisher_get_default_options+0x58>)
 80075ca:	b088      	sub	sp, #32
 80075cc:	4604      	mov	r4, r0
 80075ce:	2250      	movs	r2, #80	; 0x50
 80075d0:	4628      	mov	r0, r5
 80075d2:	f009 fa16 	bl	8010a02 <memcpy>
 80075d6:	a802      	add	r0, sp, #8
 80075d8:	f000 f934 	bl	8007844 <rcutils_get_default_allocator>
 80075dc:	f10d 0c08 	add.w	ip, sp, #8
 80075e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80075e4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80075e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80075ec:	466e      	mov	r6, sp
 80075ee:	f8dc 3000 	ldr.w	r3, [ip]
 80075f2:	f8ce 3000 	str.w	r3, [lr]
 80075f6:	4630      	mov	r0, r6
 80075f8:	f000 f972 	bl	80078e0 <rmw_get_default_publisher_options>
 80075fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007600:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007604:	e883 0003 	stmia.w	r3, {r0, r1}
 8007608:	2270      	movs	r2, #112	; 0x70
 800760a:	4629      	mov	r1, r5
 800760c:	4620      	mov	r0, r4
 800760e:	f009 f9f8 	bl	8010a02 <memcpy>
 8007612:	4620      	mov	r0, r4
 8007614:	b008      	add	sp, #32
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	20009008 	.word	0x20009008
 800761c:	08011920 	.word	0x08011920

08007620 <rcl_publish>:
 8007620:	b1f8      	cbz	r0, 8007662 <rcl_publish+0x42>
 8007622:	6803      	ldr	r3, [r0, #0]
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4604      	mov	r4, r0
 8007628:	b1b3      	cbz	r3, 8007658 <rcl_publish+0x38>
 800762a:	4616      	mov	r6, r2
 800762c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007630:	b192      	cbz	r2, 8007658 <rcl_publish+0x38>
 8007632:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8007636:	460d      	mov	r5, r1
 8007638:	f004 fb2c 	bl	800bc94 <rcl_context_is_valid>
 800763c:	b160      	cbz	r0, 8007658 <rcl_publish+0x38>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007644:	b140      	cbz	r0, 8007658 <rcl_publish+0x38>
 8007646:	b155      	cbz	r5, 800765e <rcl_publish+0x3e>
 8007648:	4632      	mov	r2, r6
 800764a:	4629      	mov	r1, r5
 800764c:	f000 f966 	bl	800791c <rmw_publish>
 8007650:	3800      	subs	r0, #0
 8007652:	bf18      	it	ne
 8007654:	2001      	movne	r0, #1
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800765c:	bd70      	pop	{r4, r5, r6, pc}
 800765e:	200b      	movs	r0, #11
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007666:	4770      	bx	lr

08007668 <rclc_support_init>:
 8007668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	b3b8      	cbz	r0, 80076e0 <rclc_support_init+0x78>
 8007670:	461c      	mov	r4, r3
 8007672:	b3ab      	cbz	r3, 80076e0 <rclc_support_init+0x78>
 8007674:	460f      	mov	r7, r1
 8007676:	4690      	mov	r8, r2
 8007678:	4606      	mov	r6, r0
 800767a:	f004 fc75 	bl	800bf68 <rcl_get_zero_initialized_init_options>
 800767e:	f104 030c 	add.w	r3, r4, #12
 8007682:	9005      	str	r0, [sp, #20]
 8007684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007688:	e88d 0003 	stmia.w	sp, {r0, r1}
 800768c:	a805      	add	r0, sp, #20
 800768e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007692:	f004 fc6b 	bl	800bf6c <rcl_init_options_init>
 8007696:	4605      	mov	r5, r0
 8007698:	b9e0      	cbnz	r0, 80076d4 <rclc_support_init+0x6c>
 800769a:	ad02      	add	r5, sp, #8
 800769c:	4628      	mov	r0, r5
 800769e:	f004 faef 	bl	800bc80 <rcl_get_zero_initialized_context>
 80076a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076a6:	4633      	mov	r3, r6
 80076a8:	e886 0003 	stmia.w	r6, {r0, r1}
 80076ac:	aa05      	add	r2, sp, #20
 80076ae:	4641      	mov	r1, r8
 80076b0:	4638      	mov	r0, r7
 80076b2:	f004 fb55 	bl	800bd60 <rcl_init>
 80076b6:	4605      	mov	r5, r0
 80076b8:	b9b8      	cbnz	r0, 80076ea <rclc_support_init+0x82>
 80076ba:	60b4      	str	r4, [r6, #8]
 80076bc:	4622      	mov	r2, r4
 80076be:	f106 010c 	add.w	r1, r6, #12
 80076c2:	2003      	movs	r0, #3
 80076c4:	f005 f8d0 	bl	800c868 <rcl_clock_init>
 80076c8:	4605      	mov	r5, r0
 80076ca:	b970      	cbnz	r0, 80076ea <rclc_support_init+0x82>
 80076cc:	a805      	add	r0, sp, #20
 80076ce:	f004 fcb3 	bl	800c038 <rcl_init_options_fini>
 80076d2:	b108      	cbz	r0, 80076d8 <rclc_support_init+0x70>
 80076d4:	f000 f8e8 	bl	80078a8 <rcutils_reset_error>
 80076d8:	4628      	mov	r0, r5
 80076da:	b006      	add	sp, #24
 80076dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e0:	250b      	movs	r5, #11
 80076e2:	4628      	mov	r0, r5
 80076e4:	b006      	add	sp, #24
 80076e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ea:	f000 f8dd 	bl	80078a8 <rcutils_reset_error>
 80076ee:	a805      	add	r0, sp, #20
 80076f0:	f004 fca2 	bl	800c038 <rcl_init_options_fini>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d0ef      	beq.n	80076d8 <rclc_support_init+0x70>
 80076f8:	e7ec      	b.n	80076d4 <rclc_support_init+0x6c>
 80076fa:	bf00      	nop

080076fc <rclc_node_init_default>:
 80076fc:	b3b8      	cbz	r0, 800776e <rclc_node_init_default+0x72>
 80076fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007702:	460d      	mov	r5, r1
 8007704:	b0a1      	sub	sp, #132	; 0x84
 8007706:	b329      	cbz	r1, 8007754 <rclc_node_init_default+0x58>
 8007708:	4616      	mov	r6, r2
 800770a:	b31a      	cbz	r2, 8007754 <rclc_node_init_default+0x58>
 800770c:	461f      	mov	r7, r3
 800770e:	b30b      	cbz	r3, 8007754 <rclc_node_init_default+0x58>
 8007710:	f10d 0810 	add.w	r8, sp, #16
 8007714:	4604      	mov	r4, r0
 8007716:	4640      	mov	r0, r8
 8007718:	f004 fd46 	bl	800c1a8 <rcl_get_zero_initialized_node>
 800771c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007720:	f10d 0918 	add.w	r9, sp, #24
 8007724:	e884 0003 	stmia.w	r4, {r0, r1}
 8007728:	4648      	mov	r0, r9
 800772a:	f004 feb5 	bl	800c498 <rcl_node_get_default_options>
 800772e:	4640      	mov	r0, r8
 8007730:	f004 fd3a 	bl	800c1a8 <rcl_get_zero_initialized_node>
 8007734:	f8cd 9000 	str.w	r9, [sp]
 8007738:	e898 0003 	ldmia.w	r8, {r0, r1}
 800773c:	463b      	mov	r3, r7
 800773e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007742:	4632      	mov	r2, r6
 8007744:	4629      	mov	r1, r5
 8007746:	4620      	mov	r0, r4
 8007748:	f004 fd38 	bl	800c1bc <rcl_node_init>
 800774c:	b930      	cbnz	r0, 800775c <rclc_node_init_default+0x60>
 800774e:	b021      	add	sp, #132	; 0x84
 8007750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007754:	200b      	movs	r0, #11
 8007756:	b021      	add	sp, #132	; 0x84
 8007758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800775c:	9003      	str	r0, [sp, #12]
 800775e:	f000 f8a3 	bl	80078a8 <rcutils_reset_error>
 8007762:	f000 f8a1 	bl	80078a8 <rcutils_reset_error>
 8007766:	9803      	ldr	r0, [sp, #12]
 8007768:	b021      	add	sp, #132	; 0x84
 800776a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800776e:	200b      	movs	r0, #11
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop

08007774 <rclc_publisher_init_default>:
 8007774:	b368      	cbz	r0, 80077d2 <rclc_publisher_init_default+0x5e>
 8007776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	460d      	mov	r5, r1
 800777c:	b0a0      	sub	sp, #128	; 0x80
 800777e:	b321      	cbz	r1, 80077ca <rclc_publisher_init_default+0x56>
 8007780:	4616      	mov	r6, r2
 8007782:	b312      	cbz	r2, 80077ca <rclc_publisher_init_default+0x56>
 8007784:	461f      	mov	r7, r3
 8007786:	b303      	cbz	r3, 80077ca <rclc_publisher_init_default+0x56>
 8007788:	4604      	mov	r4, r0
 800778a:	f7ff fe7f 	bl	800748c <rcl_get_zero_initialized_publisher>
 800778e:	f10d 0810 	add.w	r8, sp, #16
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	4640      	mov	r0, r8
 8007796:	f7ff ff15 	bl	80075c4 <rcl_publisher_get_default_options>
 800779a:	490f      	ldr	r1, [pc, #60]	; (80077d8 <rclc_publisher_init_default+0x64>)
 800779c:	2250      	movs	r2, #80	; 0x50
 800779e:	4640      	mov	r0, r8
 80077a0:	f009 f92f 	bl	8010a02 <memcpy>
 80077a4:	f8cd 8000 	str.w	r8, [sp]
 80077a8:	463b      	mov	r3, r7
 80077aa:	4632      	mov	r2, r6
 80077ac:	4629      	mov	r1, r5
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7ff fe72 	bl	8007498 <rcl_publisher_init>
 80077b4:	b910      	cbnz	r0, 80077bc <rclc_publisher_init_default+0x48>
 80077b6:	b020      	add	sp, #128	; 0x80
 80077b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077bc:	9003      	str	r0, [sp, #12]
 80077be:	f000 f873 	bl	80078a8 <rcutils_reset_error>
 80077c2:	9803      	ldr	r0, [sp, #12]
 80077c4:	b020      	add	sp, #128	; 0x80
 80077c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ca:	200b      	movs	r0, #11
 80077cc:	b020      	add	sp, #128	; 0x80
 80077ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d2:	200b      	movs	r0, #11
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	08011970 	.word	0x08011970

080077dc <__default_zero_allocate>:
 80077dc:	f008 bc82 	b.w	80100e4 <calloc>

080077e0 <__default_reallocate>:
 80077e0:	f008 be0e 	b.w	8010400 <realloc>

080077e4 <__default_deallocate>:
 80077e4:	f008 bcec 	b.w	80101c0 <free>

080077e8 <__default_allocate>:
 80077e8:	f008 bce2 	b.w	80101b0 <malloc>

080077ec <rcutils_get_zero_initialized_allocator>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	4c05      	ldr	r4, [pc, #20]	; (8007804 <rcutils_get_zero_initialized_allocator+0x18>)
 80077f0:	4686      	mov	lr, r0
 80077f2:	4684      	mov	ip, r0
 80077f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	f8cc 3000 	str.w	r3, [ip]
 8007800:	4670      	mov	r0, lr
 8007802:	bd10      	pop	{r4, pc}
 8007804:	080119c0 	.word	0x080119c0

08007808 <rcutils_set_default_allocator>:
 8007808:	b1a8      	cbz	r0, 8007836 <rcutils_set_default_allocator+0x2e>
 800780a:	6802      	ldr	r2, [r0, #0]
 800780c:	b1a2      	cbz	r2, 8007838 <rcutils_set_default_allocator+0x30>
 800780e:	6841      	ldr	r1, [r0, #4]
 8007810:	b1a1      	cbz	r1, 800783c <rcutils_set_default_allocator+0x34>
 8007812:	b410      	push	{r4}
 8007814:	68c4      	ldr	r4, [r0, #12]
 8007816:	b164      	cbz	r4, 8007832 <rcutils_set_default_allocator+0x2a>
 8007818:	6880      	ldr	r0, [r0, #8]
 800781a:	b138      	cbz	r0, 800782c <rcutils_set_default_allocator+0x24>
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <rcutils_set_default_allocator+0x38>)
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8007826:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800782a:	2001      	movs	r0, #1
 800782c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	4620      	mov	r0, r4
 8007834:	e7fa      	b.n	800782c <rcutils_set_default_allocator+0x24>
 8007836:	4770      	bx	lr
 8007838:	4610      	mov	r0, r2
 800783a:	4770      	bx	lr
 800783c:	4608      	mov	r0, r1
 800783e:	4770      	bx	lr
 8007840:	20000014 	.word	0x20000014

08007844 <rcutils_get_default_allocator>:
 8007844:	b510      	push	{r4, lr}
 8007846:	4c05      	ldr	r4, [pc, #20]	; (800785c <rcutils_get_default_allocator+0x18>)
 8007848:	4686      	mov	lr, r0
 800784a:	4684      	mov	ip, r0
 800784c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800784e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	f8cc 3000 	str.w	r3, [ip]
 8007858:	4670      	mov	r0, lr
 800785a:	bd10      	pop	{r4, pc}
 800785c:	20000014 	.word	0x20000014

08007860 <rcutils_allocator_is_valid>:
 8007860:	b158      	cbz	r0, 800787a <rcutils_allocator_is_valid+0x1a>
 8007862:	6803      	ldr	r3, [r0, #0]
 8007864:	b143      	cbz	r3, 8007878 <rcutils_allocator_is_valid+0x18>
 8007866:	6843      	ldr	r3, [r0, #4]
 8007868:	b133      	cbz	r3, 8007878 <rcutils_allocator_is_valid+0x18>
 800786a:	68c3      	ldr	r3, [r0, #12]
 800786c:	b123      	cbz	r3, 8007878 <rcutils_allocator_is_valid+0x18>
 800786e:	6880      	ldr	r0, [r0, #8]
 8007870:	3800      	subs	r0, #0
 8007872:	bf18      	it	ne
 8007874:	2001      	movne	r0, #1
 8007876:	4770      	bx	lr
 8007878:	4618      	mov	r0, r3
 800787a:	4770      	bx	lr

0800787c <rcutils_get_error_string>:
 800787c:	4b06      	ldr	r3, [pc, #24]	; (8007898 <rcutils_get_error_string+0x1c>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b13b      	cbz	r3, 8007892 <rcutils_get_error_string+0x16>
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <rcutils_get_error_string+0x20>)
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	b90a      	cbnz	r2, 800788c <rcutils_get_error_string+0x10>
 8007888:	2201      	movs	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <rcutils_get_error_string+0x24>)
 800788e:	7818      	ldrb	r0, [r3, #0]
 8007890:	4770      	bx	lr
 8007892:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <rcutils_get_error_string+0x28>)
 8007894:	7818      	ldrb	r0, [r3, #0]
 8007896:	4770      	bx	lr
 8007898:	20009078 	.word	0x20009078
 800789c:	20009091 	.word	0x20009091
 80078a0:	20009090 	.word	0x20009090
 80078a4:	080119d4 	.word	0x080119d4

080078a8 <rcutils_reset_error>:
 80078a8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80078c8 <rcutils_reset_error+0x20>
 80078ac:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <rcutils_reset_error+0x28>)
 80078ae:	4809      	ldr	r0, [pc, #36]	; (80078d4 <rcutils_reset_error+0x2c>)
 80078b0:	4909      	ldr	r1, [pc, #36]	; (80078d8 <rcutils_reset_error+0x30>)
 80078b2:	2300      	movs	r3, #0
 80078b4:	8013      	strh	r3, [r2, #0]
 80078b6:	ed82 7b02 	vstr	d7, [r2, #8]
 80078ba:	4a08      	ldr	r2, [pc, #32]	; (80078dc <rcutils_reset_error+0x34>)
 80078bc:	7003      	strb	r3, [r0, #0]
 80078be:	700b      	strb	r3, [r1, #0]
 80078c0:	7013      	strb	r3, [r2, #0]
 80078c2:	4770      	bx	lr
 80078c4:	f3af 8000 	nop.w
	...
 80078d0:	20009080 	.word	0x20009080
 80078d4:	20009091 	.word	0x20009091
 80078d8:	20009090 	.word	0x20009090
 80078dc:	20009078 	.word	0x20009078

080078e0 <rmw_get_default_publisher_options>:
 80078e0:	2200      	movs	r2, #0
 80078e2:	6002      	str	r2, [r0, #0]
 80078e4:	7102      	strb	r2, [r0, #4]
 80078e6:	4770      	bx	lr

080078e8 <rmw_uros_set_custom_transport>:
 80078e8:	b470      	push	{r4, r5, r6}
 80078ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80078ee:	b162      	cbz	r2, 800790a <rmw_uros_set_custom_transport+0x22>
 80078f0:	b15b      	cbz	r3, 800790a <rmw_uros_set_custom_transport+0x22>
 80078f2:	b155      	cbz	r5, 800790a <rmw_uros_set_custom_transport+0x22>
 80078f4:	b14e      	cbz	r6, 800790a <rmw_uros_set_custom_transport+0x22>
 80078f6:	4c06      	ldr	r4, [pc, #24]	; (8007910 <rmw_uros_set_custom_transport+0x28>)
 80078f8:	7020      	strb	r0, [r4, #0]
 80078fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80078fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007902:	6166      	str	r6, [r4, #20]
 8007904:	2000      	movs	r0, #0
 8007906:	bc70      	pop	{r4, r5, r6}
 8007908:	4770      	bx	lr
 800790a:	200b      	movs	r0, #11
 800790c:	bc70      	pop	{r4, r5, r6}
 800790e:	4770      	bx	lr
 8007910:	20009094 	.word	0x20009094

08007914 <flush_session>:
 8007914:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8007916:	f002 bb3d 	b.w	8009f94 <uxr_run_session_until_confirm_delivery>
 800791a:	bf00      	nop

0800791c <rmw_publish>:
 800791c:	2800      	cmp	r0, #0
 800791e:	d053      	beq.n	80079c8 <rmw_publish+0xac>
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	460d      	mov	r5, r1
 8007924:	b08e      	sub	sp, #56	; 0x38
 8007926:	2900      	cmp	r1, #0
 8007928:	d04b      	beq.n	80079c2 <rmw_publish+0xa6>
 800792a:	4604      	mov	r4, r0
 800792c:	6800      	ldr	r0, [r0, #0]
 800792e:	f000 fc47 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 8007932:	2800      	cmp	r0, #0
 8007934:	d045      	beq.n	80079c2 <rmw_publish+0xa6>
 8007936:	6866      	ldr	r6, [r4, #4]
 8007938:	2e00      	cmp	r6, #0
 800793a:	d042      	beq.n	80079c2 <rmw_publish+0xa6>
 800793c:	69b4      	ldr	r4, [r6, #24]
 800793e:	4628      	mov	r0, r5
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	4798      	blx	r3
 8007944:	69f3      	ldr	r3, [r6, #28]
 8007946:	9005      	str	r0, [sp, #20]
 8007948:	b113      	cbz	r3, 8007950 <rmw_publish+0x34>
 800794a:	a805      	add	r0, sp, #20
 800794c:	4798      	blx	r3
 800794e:	9805      	ldr	r0, [sp, #20]
 8007950:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	9000      	str	r0, [sp, #0]
 8007958:	6972      	ldr	r2, [r6, #20]
 800795a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800795c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8007960:	ab06      	add	r3, sp, #24
 8007962:	f003 f903 	bl	800ab6c <uxr_prepare_output_stream>
 8007966:	b1d8      	cbz	r0, 80079a0 <rmw_publish+0x84>
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	a906      	add	r1, sp, #24
 800796c:	4628      	mov	r0, r5
 800796e:	4798      	blx	r3
 8007970:	6a33      	ldr	r3, [r6, #32]
 8007972:	4604      	mov	r4, r0
 8007974:	b10b      	cbz	r3, 800797a <rmw_publish+0x5e>
 8007976:	a806      	add	r0, sp, #24
 8007978:	4798      	blx	r3
 800797a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800797e:	2b01      	cmp	r3, #1
 8007980:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8007984:	d022      	beq.n	80079cc <rmw_publish+0xb0>
 8007986:	6918      	ldr	r0, [r3, #16]
 8007988:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800798a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800798e:	f002 fb01 	bl	8009f94 <uxr_run_session_until_confirm_delivery>
 8007992:	4020      	ands	r0, r4
 8007994:	b2c4      	uxtb	r4, r0
 8007996:	f084 0001 	eor.w	r0, r4, #1
 800799a:	b2c0      	uxtb	r0, r0
 800799c:	b00e      	add	sp, #56	; 0x38
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80079a4:	6918      	ldr	r0, [r3, #16]
 80079a6:	9b05      	ldr	r3, [sp, #20]
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <rmw_publish+0xbc>)
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	9602      	str	r6, [sp, #8]
 80079b0:	6972      	ldr	r2, [r6, #20]
 80079b2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80079b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80079b8:	ab06      	add	r3, sp, #24
 80079ba:	f003 f907 	bl	800abcc <uxr_prepare_output_stream_fragmented>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d1d2      	bne.n	8007968 <rmw_publish+0x4c>
 80079c2:	2001      	movs	r0, #1
 80079c4:	b00e      	add	sp, #56	; 0x38
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	2001      	movs	r0, #1
 80079ca:	4770      	bx	lr
 80079cc:	6918      	ldr	r0, [r3, #16]
 80079ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80079d2:	f001 ff59 	bl	8009888 <uxr_flash_output_streams>
 80079d6:	e7de      	b.n	8007996 <rmw_publish+0x7a>
 80079d8:	08007915 	.word	0x08007915

080079dc <rmw_create_publisher>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	b087      	sub	sp, #28
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f000 80cc 	beq.w	8007b80 <rmw_create_publisher+0x1a4>
 80079e8:	460e      	mov	r6, r1
 80079ea:	2900      	cmp	r1, #0
 80079ec:	f000 80c8 	beq.w	8007b80 <rmw_create_publisher+0x1a4>
 80079f0:	4604      	mov	r4, r0
 80079f2:	6800      	ldr	r0, [r0, #0]
 80079f4:	4615      	mov	r5, r2
 80079f6:	4698      	mov	r8, r3
 80079f8:	f000 fbe2 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f000 80bf 	beq.w	8007b80 <rmw_create_publisher+0x1a4>
 8007a02:	2d00      	cmp	r5, #0
 8007a04:	f000 80bc 	beq.w	8007b80 <rmw_create_publisher+0x1a4>
 8007a08:	782b      	ldrb	r3, [r5, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80b8 	beq.w	8007b80 <rmw_create_publisher+0x1a4>
 8007a10:	f1b8 0f00 	cmp.w	r8, #0
 8007a14:	f000 80b4 	beq.w	8007b80 <rmw_create_publisher+0x1a4>
 8007a18:	485c      	ldr	r0, [pc, #368]	; (8007b8c <rmw_create_publisher+0x1b0>)
 8007a1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007a1e:	f005 fc9b 	bl	800d358 <get_memory>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f000 80ac 	beq.w	8007b80 <rmw_create_publisher+0x1a4>
 8007a28:	6884      	ldr	r4, [r0, #8]
 8007a2a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8007a2e:	f005 fcb7 	bl	800d3a0 <rmw_get_implementation_identifier>
 8007a32:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8007a36:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8007a3a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f7f8 fbd8 	bl	80001f4 <strlen>
 8007a44:	3001      	adds	r0, #1
 8007a46:	283c      	cmp	r0, #60	; 0x3c
 8007a48:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8007a4c:	f200 8091 	bhi.w	8007b72 <rmw_create_publisher+0x196>
 8007a50:	4a4f      	ldr	r2, [pc, #316]	; (8007b90 <rmw_create_publisher+0x1b4>)
 8007a52:	462b      	mov	r3, r5
 8007a54:	213c      	movs	r1, #60	; 0x3c
 8007a56:	4650      	mov	r0, sl
 8007a58:	f008 fe5a 	bl	8010710 <sniprintf>
 8007a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a60:	67e3      	str	r3, [r4, #124]	; 0x7c
 8007a62:	4641      	mov	r1, r8
 8007a64:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8007a68:	2250      	movs	r2, #80	; 0x50
 8007a6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007a6e:	f008 ffc8 	bl	8010a02 <memcpy>
 8007a72:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007a76:	4947      	ldr	r1, [pc, #284]	; (8007b94 <rmw_create_publisher+0x1b8>)
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a7e:	bf0c      	ite	eq
 8007a80:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8007a84:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8007a88:	67a3      	str	r3, [r4, #120]	; 0x78
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 fba3 	bl	80081dc <get_message_typesupport_handle>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d06b      	beq.n	8007b72 <rmw_create_publisher+0x196>
 8007a9a:	6842      	ldr	r2, [r0, #4]
 8007a9c:	61a2      	str	r2, [r4, #24]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	d067      	beq.n	8007b72 <rmw_create_publisher+0x196>
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4643      	mov	r3, r8
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	f005 fee0 	bl	800d86c <create_topic>
 8007aac:	6260      	str	r0, [r4, #36]	; 0x24
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d063      	beq.n	8007b7a <rmw_create_publisher+0x19e>
 8007ab2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aba:	2103      	movs	r1, #3
 8007abc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8007ac0:	1c42      	adds	r2, r0, #1
 8007ac2:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8007ac6:	f001 fd91 	bl	80095ec <uxr_object_id>
 8007aca:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007ace:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ad2:	6120      	str	r0, [r4, #16]
 8007ad4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8007ad8:	6910      	ldr	r0, [r2, #16]
 8007ada:	2506      	movs	r5, #6
 8007adc:	9500      	str	r5, [sp, #0]
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	6922      	ldr	r2, [r4, #16]
 8007ae2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007ae6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8007aea:	f001 fcd9 	bl	80094a0 <uxr_buffer_create_publisher_bin>
 8007aee:	4602      	mov	r2, r0
 8007af0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007af4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8007af8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8007afc:	f000 fae0 	bl	80080c0 <run_xrce_session>
 8007b00:	b3b8      	cbz	r0, 8007b72 <rmw_create_publisher+0x196>
 8007b02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0a:	2105      	movs	r1, #5
 8007b0c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8007b10:	1c42      	adds	r2, r0, #1
 8007b12:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8007b16:	f001 fd69 	bl	80095ec <uxr_object_id>
 8007b1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007b1e:	6160      	str	r0, [r4, #20]
 8007b20:	691e      	ldr	r6, [r3, #16]
 8007b22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b26:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8007b2a:	f10d 0a10 	add.w	sl, sp, #16
 8007b2e:	4641      	mov	r1, r8
 8007b30:	4650      	mov	r0, sl
 8007b32:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8007b36:	f000 fadf 	bl	80080f8 <convert_qos_profile>
 8007b3a:	9503      	str	r5, [sp, #12]
 8007b3c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8007b40:	9001      	str	r0, [sp, #4]
 8007b42:	f8ad 1008 	strh.w	r1, [sp, #8]
 8007b46:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8007b50:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8007b54:	f8d8 1000 	ldr.w	r1, [r8]
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f001 fcd1 	bl	8009500 <uxr_buffer_create_datawriter_bin>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007b64:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8007b68:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8007b6c:	f000 faa8 	bl	80080c0 <run_xrce_session>
 8007b70:	b938      	cbnz	r0, 8007b82 <rmw_create_publisher+0x1a6>
 8007b72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b74:	b108      	cbz	r0, 8007b7a <rmw_create_publisher+0x19e>
 8007b76:	f000 fa47 	bl	8008008 <rmw_uxrce_fini_topic_memory>
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f000 f9ec 	bl	8007f58 <rmw_uxrce_fini_publisher_memory>
 8007b80:	2700      	movs	r7, #0
 8007b82:	4638      	mov	r0, r7
 8007b84:	b007      	add	sp, #28
 8007b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000d98c 	.word	0x2000d98c
 8007b90:	08011a0c 	.word	0x08011a0c
 8007b94:	080119d8 	.word	0x080119d8

08007b98 <rmw_publisher_get_actual_qos>:
 8007b98:	b150      	cbz	r0, 8007bb0 <rmw_publisher_get_actual_qos+0x18>
 8007b9a:	b508      	push	{r3, lr}
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	b149      	cbz	r1, 8007bb4 <rmw_publisher_get_actual_qos+0x1c>
 8007ba0:	6841      	ldr	r1, [r0, #4]
 8007ba2:	2250      	movs	r2, #80	; 0x50
 8007ba4:	3128      	adds	r1, #40	; 0x28
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f008 ff2b 	bl	8010a02 <memcpy>
 8007bac:	2000      	movs	r0, #0
 8007bae:	bd08      	pop	{r3, pc}
 8007bb0:	200b      	movs	r0, #11
 8007bb2:	4770      	bx	lr
 8007bb4:	200b      	movs	r0, #11
 8007bb6:	bd08      	pop	{r3, pc}

08007bb8 <rmw_destroy_publisher>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	b128      	cbz	r0, 8007bc8 <rmw_destroy_publisher+0x10>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	6800      	ldr	r0, [r0, #0]
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	f000 fafd 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 8007bc6:	b910      	cbnz	r0, 8007bce <rmw_destroy_publisher+0x16>
 8007bc8:	2401      	movs	r4, #1
 8007bca:	4620      	mov	r0, r4
 8007bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bce:	6863      	ldr	r3, [r4, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f9      	beq.n	8007bc8 <rmw_destroy_publisher+0x10>
 8007bd4:	2d00      	cmp	r5, #0
 8007bd6:	d0f7      	beq.n	8007bc8 <rmw_destroy_publisher+0x10>
 8007bd8:	6828      	ldr	r0, [r5, #0]
 8007bda:	f000 faf1 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0f2      	beq.n	8007bc8 <rmw_destroy_publisher+0x10>
 8007be2:	686c      	ldr	r4, [r5, #4]
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d0ef      	beq.n	8007bc8 <rmw_destroy_publisher+0x10>
 8007be8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007bea:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8007bee:	f005 fe8d 	bl	800d90c <destroy_topic>
 8007bf2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007bf6:	6962      	ldr	r2, [r4, #20]
 8007bf8:	6918      	ldr	r0, [r3, #16]
 8007bfa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8007bfe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	f001 fb98 	bl	8009338 <uxr_buffer_delete_entity>
 8007c08:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007c0c:	6922      	ldr	r2, [r4, #16]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8007c14:	4604      	mov	r4, r0
 8007c16:	6809      	ldr	r1, [r1, #0]
 8007c18:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8007c1c:	f001 fb8c 	bl	8009338 <uxr_buffer_delete_entity>
 8007c20:	693e      	ldr	r6, [r7, #16]
 8007c22:	4622      	mov	r2, r4
 8007c24:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8007c28:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 fa46 	bl	80080c0 <run_xrce_session>
 8007c34:	693e      	ldr	r6, [r7, #16]
 8007c36:	4622      	mov	r2, r4
 8007c38:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8007c3c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8007c40:	4604      	mov	r4, r0
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 fa3c 	bl	80080c0 <run_xrce_session>
 8007c48:	b12c      	cbz	r4, 8007c56 <rmw_destroy_publisher+0x9e>
 8007c4a:	b120      	cbz	r0, 8007c56 <rmw_destroy_publisher+0x9e>
 8007c4c:	2400      	movs	r4, #0
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 f982 	bl	8007f58 <rmw_uxrce_fini_publisher_memory>
 8007c54:	e7b9      	b.n	8007bca <rmw_destroy_publisher+0x12>
 8007c56:	2402      	movs	r4, #2
 8007c58:	e7f9      	b.n	8007c4e <rmw_destroy_publisher+0x96>
 8007c5a:	bf00      	nop

08007c5c <rmw_uxrce_init_service_memory>:
 8007c5c:	b1e2      	cbz	r2, 8007c98 <rmw_uxrce_init_service_memory+0x3c>
 8007c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c62:	7b05      	ldrb	r5, [r0, #12]
 8007c64:	4606      	mov	r6, r0
 8007c66:	b9ad      	cbnz	r5, 8007c94 <rmw_uxrce_init_service_memory+0x38>
 8007c68:	23c8      	movs	r3, #200	; 0xc8
 8007c6a:	e9c0 5500 	strd	r5, r5, [r0]
 8007c6e:	6083      	str	r3, [r0, #8]
 8007c70:	f240 1301 	movw	r3, #257	; 0x101
 8007c74:	4617      	mov	r7, r2
 8007c76:	8183      	strh	r3, [r0, #12]
 8007c78:	460c      	mov	r4, r1
 8007c7a:	46a8      	mov	r8, r5
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4630      	mov	r0, r6
 8007c80:	3501      	adds	r5, #1
 8007c82:	f005 fb79 	bl	800d378 <put_memory>
 8007c86:	42af      	cmp	r7, r5
 8007c88:	60a4      	str	r4, [r4, #8]
 8007c8a:	f884 800c 	strb.w	r8, [r4, #12]
 8007c8e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8007c92:	d1f3      	bne.n	8007c7c <rmw_uxrce_init_service_memory+0x20>
 8007c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop

08007c9c <rmw_uxrce_init_client_memory>:
 8007c9c:	b1e2      	cbz	r2, 8007cd8 <rmw_uxrce_init_client_memory+0x3c>
 8007c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca2:	7b05      	ldrb	r5, [r0, #12]
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	b9ad      	cbnz	r5, 8007cd4 <rmw_uxrce_init_client_memory+0x38>
 8007ca8:	23c8      	movs	r3, #200	; 0xc8
 8007caa:	e9c0 5500 	strd	r5, r5, [r0]
 8007cae:	6083      	str	r3, [r0, #8]
 8007cb0:	f240 1301 	movw	r3, #257	; 0x101
 8007cb4:	4617      	mov	r7, r2
 8007cb6:	8183      	strh	r3, [r0, #12]
 8007cb8:	460c      	mov	r4, r1
 8007cba:	46a8      	mov	r8, r5
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	f005 fb59 	bl	800d378 <put_memory>
 8007cc6:	42af      	cmp	r7, r5
 8007cc8:	60a4      	str	r4, [r4, #8]
 8007cca:	f884 800c 	strb.w	r8, [r4, #12]
 8007cce:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8007cd2:	d1f3      	bne.n	8007cbc <rmw_uxrce_init_client_memory+0x20>
 8007cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop

08007cdc <rmw_uxrce_init_publisher_memory>:
 8007cdc:	b1e2      	cbz	r2, 8007d18 <rmw_uxrce_init_publisher_memory+0x3c>
 8007cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce2:	7b05      	ldrb	r5, [r0, #12]
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	b9ad      	cbnz	r5, 8007d14 <rmw_uxrce_init_publisher_memory+0x38>
 8007ce8:	23d8      	movs	r3, #216	; 0xd8
 8007cea:	e9c0 5500 	strd	r5, r5, [r0]
 8007cee:	6083      	str	r3, [r0, #8]
 8007cf0:	f240 1301 	movw	r3, #257	; 0x101
 8007cf4:	4617      	mov	r7, r2
 8007cf6:	8183      	strh	r3, [r0, #12]
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	46a8      	mov	r8, r5
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4630      	mov	r0, r6
 8007d00:	3501      	adds	r5, #1
 8007d02:	f005 fb39 	bl	800d378 <put_memory>
 8007d06:	42af      	cmp	r7, r5
 8007d08:	60a4      	str	r4, [r4, #8]
 8007d0a:	f884 800c 	strb.w	r8, [r4, #12]
 8007d0e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8007d12:	d1f3      	bne.n	8007cfc <rmw_uxrce_init_publisher_memory+0x20>
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop

08007d1c <rmw_uxrce_init_subscription_memory>:
 8007d1c:	b1e2      	cbz	r2, 8007d58 <rmw_uxrce_init_subscription_memory+0x3c>
 8007d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d22:	7b05      	ldrb	r5, [r0, #12]
 8007d24:	4606      	mov	r6, r0
 8007d26:	b9ad      	cbnz	r5, 8007d54 <rmw_uxrce_init_subscription_memory+0x38>
 8007d28:	23d8      	movs	r3, #216	; 0xd8
 8007d2a:	e9c0 5500 	strd	r5, r5, [r0]
 8007d2e:	6083      	str	r3, [r0, #8]
 8007d30:	f240 1301 	movw	r3, #257	; 0x101
 8007d34:	4617      	mov	r7, r2
 8007d36:	8183      	strh	r3, [r0, #12]
 8007d38:	460c      	mov	r4, r1
 8007d3a:	46a8      	mov	r8, r5
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4630      	mov	r0, r6
 8007d40:	3501      	adds	r5, #1
 8007d42:	f005 fb19 	bl	800d378 <put_memory>
 8007d46:	42af      	cmp	r7, r5
 8007d48:	60a4      	str	r4, [r4, #8]
 8007d4a:	f884 800c 	strb.w	r8, [r4, #12]
 8007d4e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8007d52:	d1f3      	bne.n	8007d3c <rmw_uxrce_init_subscription_memory+0x20>
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop

08007d5c <rmw_uxrce_init_node_memory>:
 8007d5c:	b1e2      	cbz	r2, 8007d98 <rmw_uxrce_init_node_memory+0x3c>
 8007d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d62:	7b05      	ldrb	r5, [r0, #12]
 8007d64:	4606      	mov	r6, r0
 8007d66:	b9ad      	cbnz	r5, 8007d94 <rmw_uxrce_init_node_memory+0x38>
 8007d68:	23a4      	movs	r3, #164	; 0xa4
 8007d6a:	e9c0 5500 	strd	r5, r5, [r0]
 8007d6e:	6083      	str	r3, [r0, #8]
 8007d70:	f240 1301 	movw	r3, #257	; 0x101
 8007d74:	4617      	mov	r7, r2
 8007d76:	8183      	strh	r3, [r0, #12]
 8007d78:	460c      	mov	r4, r1
 8007d7a:	46a8      	mov	r8, r5
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4630      	mov	r0, r6
 8007d80:	3501      	adds	r5, #1
 8007d82:	f005 faf9 	bl	800d378 <put_memory>
 8007d86:	42af      	cmp	r7, r5
 8007d88:	60a4      	str	r4, [r4, #8]
 8007d8a:	f884 800c 	strb.w	r8, [r4, #12]
 8007d8e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8007d92:	d1f3      	bne.n	8007d7c <rmw_uxrce_init_node_memory+0x20>
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop

08007d9c <rmw_uxrce_init_session_memory>:
 8007d9c:	b1ea      	cbz	r2, 8007dda <rmw_uxrce_init_session_memory+0x3e>
 8007d9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da2:	7b05      	ldrb	r5, [r0, #12]
 8007da4:	4606      	mov	r6, r0
 8007da6:	b9b5      	cbnz	r5, 8007dd6 <rmw_uxrce_init_session_memory+0x3a>
 8007da8:	e9c0 5500 	strd	r5, r5, [r0]
 8007dac:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8007db0:	f240 1301 	movw	r3, #257	; 0x101
 8007db4:	4617      	mov	r7, r2
 8007db6:	f8c0 8008 	str.w	r8, [r0, #8]
 8007dba:	460c      	mov	r4, r1
 8007dbc:	8183      	strh	r3, [r0, #12]
 8007dbe:	46a9      	mov	r9, r5
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	3501      	adds	r5, #1
 8007dc6:	f005 fad7 	bl	800d378 <put_memory>
 8007dca:	42af      	cmp	r7, r5
 8007dcc:	60a4      	str	r4, [r4, #8]
 8007dce:	f884 900c 	strb.w	r9, [r4, #12]
 8007dd2:	4444      	add	r4, r8
 8007dd4:	d1f4      	bne.n	8007dc0 <rmw_uxrce_init_session_memory+0x24>
 8007dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dda:	4770      	bx	lr

08007ddc <rmw_uxrce_init_topic_memory>:
 8007ddc:	b1e2      	cbz	r2, 8007e18 <rmw_uxrce_init_topic_memory+0x3c>
 8007dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de2:	7b05      	ldrb	r5, [r0, #12]
 8007de4:	4606      	mov	r6, r0
 8007de6:	b9ad      	cbnz	r5, 8007e14 <rmw_uxrce_init_topic_memory+0x38>
 8007de8:	231c      	movs	r3, #28
 8007dea:	e9c0 5500 	strd	r5, r5, [r0]
 8007dee:	6083      	str	r3, [r0, #8]
 8007df0:	f240 1301 	movw	r3, #257	; 0x101
 8007df4:	4617      	mov	r7, r2
 8007df6:	8183      	strh	r3, [r0, #12]
 8007df8:	460c      	mov	r4, r1
 8007dfa:	46a8      	mov	r8, r5
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4630      	mov	r0, r6
 8007e00:	3501      	adds	r5, #1
 8007e02:	f005 fab9 	bl	800d378 <put_memory>
 8007e06:	42af      	cmp	r7, r5
 8007e08:	60a4      	str	r4, [r4, #8]
 8007e0a:	f884 800c 	strb.w	r8, [r4, #12]
 8007e0e:	f104 041c 	add.w	r4, r4, #28
 8007e12:	d1f3      	bne.n	8007dfc <rmw_uxrce_init_topic_memory+0x20>
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop

08007e1c <rmw_uxrce_init_static_input_buffer_memory>:
 8007e1c:	b1ea      	cbz	r2, 8007e5a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8007e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e22:	7b05      	ldrb	r5, [r0, #12]
 8007e24:	4606      	mov	r6, r0
 8007e26:	b9b5      	cbnz	r5, 8007e56 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8007e28:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8007e2c:	e9c0 5500 	strd	r5, r5, [r0]
 8007e30:	6083      	str	r3, [r0, #8]
 8007e32:	f240 1301 	movw	r3, #257	; 0x101
 8007e36:	4617      	mov	r7, r2
 8007e38:	8183      	strh	r3, [r0, #12]
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	46a8      	mov	r8, r5
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4630      	mov	r0, r6
 8007e42:	3501      	adds	r5, #1
 8007e44:	f005 fa98 	bl	800d378 <put_memory>
 8007e48:	42af      	cmp	r7, r5
 8007e4a:	60a4      	str	r4, [r4, #8]
 8007e4c:	f884 800c 	strb.w	r8, [r4, #12]
 8007e50:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8007e54:	d1f3      	bne.n	8007e3e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8007e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5a:	4770      	bx	lr

08007e5c <rmw_uxrce_init_init_options_impl_memory>:
 8007e5c:	b1e2      	cbz	r2, 8007e98 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8007e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	7b05      	ldrb	r5, [r0, #12]
 8007e64:	4606      	mov	r6, r0
 8007e66:	b9ad      	cbnz	r5, 8007e94 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8007e68:	232c      	movs	r3, #44	; 0x2c
 8007e6a:	e9c0 5500 	strd	r5, r5, [r0]
 8007e6e:	6083      	str	r3, [r0, #8]
 8007e70:	f240 1301 	movw	r3, #257	; 0x101
 8007e74:	4617      	mov	r7, r2
 8007e76:	8183      	strh	r3, [r0, #12]
 8007e78:	460c      	mov	r4, r1
 8007e7a:	46a8      	mov	r8, r5
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4630      	mov	r0, r6
 8007e80:	3501      	adds	r5, #1
 8007e82:	f005 fa79 	bl	800d378 <put_memory>
 8007e86:	42af      	cmp	r7, r5
 8007e88:	60a4      	str	r4, [r4, #8]
 8007e8a:	f884 800c 	strb.w	r8, [r4, #12]
 8007e8e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8007e92:	d1f3      	bne.n	8007e7c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop

08007e9c <rmw_uxrce_init_wait_set_memory>:
 8007e9c:	b1e2      	cbz	r2, 8007ed8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8007e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea2:	7b05      	ldrb	r5, [r0, #12]
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	b9ad      	cbnz	r5, 8007ed4 <rmw_uxrce_init_wait_set_memory+0x38>
 8007ea8:	231c      	movs	r3, #28
 8007eaa:	e9c0 5500 	strd	r5, r5, [r0]
 8007eae:	6083      	str	r3, [r0, #8]
 8007eb0:	f240 1301 	movw	r3, #257	; 0x101
 8007eb4:	4617      	mov	r7, r2
 8007eb6:	8183      	strh	r3, [r0, #12]
 8007eb8:	460c      	mov	r4, r1
 8007eba:	46a8      	mov	r8, r5
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	3501      	adds	r5, #1
 8007ec2:	f005 fa59 	bl	800d378 <put_memory>
 8007ec6:	42af      	cmp	r7, r5
 8007ec8:	60a4      	str	r4, [r4, #8]
 8007eca:	f884 800c 	strb.w	r8, [r4, #12]
 8007ece:	f104 041c 	add.w	r4, r4, #28
 8007ed2:	d1f3      	bne.n	8007ebc <rmw_uxrce_init_wait_set_memory+0x20>
 8007ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop

08007edc <rmw_uxrce_init_guard_condition_memory>:
 8007edc:	b1e2      	cbz	r2, 8007f18 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8007ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee2:	7b05      	ldrb	r5, [r0, #12]
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	b9ad      	cbnz	r5, 8007f14 <rmw_uxrce_init_guard_condition_memory+0x38>
 8007ee8:	2320      	movs	r3, #32
 8007eea:	e9c0 5500 	strd	r5, r5, [r0]
 8007eee:	6083      	str	r3, [r0, #8]
 8007ef0:	f240 1301 	movw	r3, #257	; 0x101
 8007ef4:	4617      	mov	r7, r2
 8007ef6:	8183      	strh	r3, [r0, #12]
 8007ef8:	460c      	mov	r4, r1
 8007efa:	46a8      	mov	r8, r5
 8007efc:	4621      	mov	r1, r4
 8007efe:	4630      	mov	r0, r6
 8007f00:	3501      	adds	r5, #1
 8007f02:	f005 fa39 	bl	800d378 <put_memory>
 8007f06:	42af      	cmp	r7, r5
 8007f08:	60a4      	str	r4, [r4, #8]
 8007f0a:	f884 800c 	strb.w	r8, [r4, #12]
 8007f0e:	f104 0420 	add.w	r4, r4, #32
 8007f12:	d1f3      	bne.n	8007efc <rmw_uxrce_init_guard_condition_memory+0x20>
 8007f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <rmw_uxrce_fini_session_memory>:
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	4801      	ldr	r0, [pc, #4]	; (8007f24 <rmw_uxrce_fini_session_memory+0x8>)
 8007f20:	f005 ba2a 	b.w	800d378 <put_memory>
 8007f24:	2000d9ac 	.word	0x2000d9ac

08007f28 <rmw_uxrce_fini_node_memory>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	b128      	cbz	r0, 8007f3c <rmw_uxrce_fini_node_memory+0x14>
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <rmw_uxrce_fini_node_memory+0x28>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	f7f8 f954 	bl	80001e0 <strcmp>
 8007f38:	b940      	cbnz	r0, 8007f4c <rmw_uxrce_fini_node_memory+0x24>
 8007f3a:	6020      	str	r0, [r4, #0]
 8007f3c:	6861      	ldr	r1, [r4, #4]
 8007f3e:	b129      	cbz	r1, 8007f4c <rmw_uxrce_fini_node_memory+0x24>
 8007f40:	2500      	movs	r5, #0
 8007f42:	4804      	ldr	r0, [pc, #16]	; (8007f54 <rmw_uxrce_fini_node_memory+0x2c>)
 8007f44:	610d      	str	r5, [r1, #16]
 8007f46:	f005 fa17 	bl	800d378 <put_memory>
 8007f4a:	6065      	str	r5, [r4, #4]
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	08011ff4 	.word	0x08011ff4
 8007f54:	2000d97c 	.word	0x2000d97c

08007f58 <rmw_uxrce_fini_publisher_memory>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	b128      	cbz	r0, 8007f6c <rmw_uxrce_fini_publisher_memory+0x14>
 8007f60:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <rmw_uxrce_fini_publisher_memory+0x24>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	f7f8 f93c 	bl	80001e0 <strcmp>
 8007f68:	b938      	cbnz	r0, 8007f7a <rmw_uxrce_fini_publisher_memory+0x22>
 8007f6a:	6020      	str	r0, [r4, #0]
 8007f6c:	6861      	ldr	r1, [r4, #4]
 8007f6e:	b121      	cbz	r1, 8007f7a <rmw_uxrce_fini_publisher_memory+0x22>
 8007f70:	4803      	ldr	r0, [pc, #12]	; (8007f80 <rmw_uxrce_fini_publisher_memory+0x28>)
 8007f72:	f005 fa01 	bl	800d378 <put_memory>
 8007f76:	2300      	movs	r3, #0
 8007f78:	6063      	str	r3, [r4, #4]
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	08011ff4 	.word	0x08011ff4
 8007f80:	2000d98c 	.word	0x2000d98c

08007f84 <rmw_uxrce_fini_subscription_memory>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	4604      	mov	r4, r0
 8007f88:	6800      	ldr	r0, [r0, #0]
 8007f8a:	b128      	cbz	r0, 8007f98 <rmw_uxrce_fini_subscription_memory+0x14>
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <rmw_uxrce_fini_subscription_memory+0x24>)
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	f7f8 f926 	bl	80001e0 <strcmp>
 8007f94:	b938      	cbnz	r0, 8007fa6 <rmw_uxrce_fini_subscription_memory+0x22>
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	6861      	ldr	r1, [r4, #4]
 8007f9a:	b121      	cbz	r1, 8007fa6 <rmw_uxrce_fini_subscription_memory+0x22>
 8007f9c:	4803      	ldr	r0, [pc, #12]	; (8007fac <rmw_uxrce_fini_subscription_memory+0x28>)
 8007f9e:	f005 f9eb 	bl	800d378 <put_memory>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6063      	str	r3, [r4, #4]
 8007fa6:	bd10      	pop	{r4, pc}
 8007fa8:	08011ff4 	.word	0x08011ff4
 8007fac:	2000d9cc 	.word	0x2000d9cc

08007fb0 <rmw_uxrce_fini_service_memory>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	6800      	ldr	r0, [r0, #0]
 8007fb6:	b128      	cbz	r0, 8007fc4 <rmw_uxrce_fini_service_memory+0x14>
 8007fb8:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <rmw_uxrce_fini_service_memory+0x24>)
 8007fba:	6819      	ldr	r1, [r3, #0]
 8007fbc:	f7f8 f910 	bl	80001e0 <strcmp>
 8007fc0:	b938      	cbnz	r0, 8007fd2 <rmw_uxrce_fini_service_memory+0x22>
 8007fc2:	6020      	str	r0, [r4, #0]
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	b121      	cbz	r1, 8007fd2 <rmw_uxrce_fini_service_memory+0x22>
 8007fc8:	4803      	ldr	r0, [pc, #12]	; (8007fd8 <rmw_uxrce_fini_service_memory+0x28>)
 8007fca:	f005 f9d5 	bl	800d378 <put_memory>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	bd10      	pop	{r4, pc}
 8007fd4:	08011ff4 	.word	0x08011ff4
 8007fd8:	2000d99c 	.word	0x2000d99c

08007fdc <rmw_uxrce_fini_client_memory>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	4604      	mov	r4, r0
 8007fe0:	6800      	ldr	r0, [r0, #0]
 8007fe2:	b128      	cbz	r0, 8007ff0 <rmw_uxrce_fini_client_memory+0x14>
 8007fe4:	4b06      	ldr	r3, [pc, #24]	; (8008000 <rmw_uxrce_fini_client_memory+0x24>)
 8007fe6:	6819      	ldr	r1, [r3, #0]
 8007fe8:	f7f8 f8fa 	bl	80001e0 <strcmp>
 8007fec:	b938      	cbnz	r0, 8007ffe <rmw_uxrce_fini_client_memory+0x22>
 8007fee:	6020      	str	r0, [r4, #0]
 8007ff0:	6861      	ldr	r1, [r4, #4]
 8007ff2:	b121      	cbz	r1, 8007ffe <rmw_uxrce_fini_client_memory+0x22>
 8007ff4:	4803      	ldr	r0, [pc, #12]	; (8008004 <rmw_uxrce_fini_client_memory+0x28>)
 8007ff6:	f005 f9bf 	bl	800d378 <put_memory>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6063      	str	r3, [r4, #4]
 8007ffe:	bd10      	pop	{r4, pc}
 8008000:	08011ff4 	.word	0x08011ff4
 8008004:	200090b0 	.word	0x200090b0

08008008 <rmw_uxrce_fini_topic_memory>:
 8008008:	b510      	push	{r4, lr}
 800800a:	4604      	mov	r4, r0
 800800c:	4621      	mov	r1, r4
 800800e:	4803      	ldr	r0, [pc, #12]	; (800801c <rmw_uxrce_fini_topic_memory+0x14>)
 8008010:	f005 f9b2 	bl	800d378 <put_memory>
 8008014:	2300      	movs	r3, #0
 8008016:	61a3      	str	r3, [r4, #24]
 8008018:	bd10      	pop	{r4, pc}
 800801a:	bf00      	nop
 800801c:	2000d9dc 	.word	0x2000d9dc

08008020 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008020:	b082      	sub	sp, #8
 8008022:	b530      	push	{r4, r5, lr}
 8008024:	4925      	ldr	r1, [pc, #148]	; (80080bc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008026:	680d      	ldr	r5, [r1, #0]
 8008028:	ac03      	add	r4, sp, #12
 800802a:	e884 000c 	stmia.w	r4, {r2, r3}
 800802e:	461c      	mov	r4, r3
 8008030:	2d00      	cmp	r5, #0
 8008032:	d041      	beq.n	80080b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8008034:	462b      	mov	r3, r5
 8008036:	2100      	movs	r1, #0
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8008040:	4290      	cmp	r0, r2
 8008042:	bf08      	it	eq
 8008044:	3101      	addeq	r1, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f6      	bne.n	8008038 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800804a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d029      	beq.n	80080a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008052:	d907      	bls.n	8008064 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008054:	2b03      	cmp	r3, #3
 8008056:	d005      	beq.n	8008064 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008058:	2100      	movs	r1, #0
 800805a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800805e:	4608      	mov	r0, r1
 8008060:	b002      	add	sp, #8
 8008062:	4770      	bx	lr
 8008064:	b314      	cbz	r4, 80080ac <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008066:	428c      	cmp	r4, r1
 8008068:	d820      	bhi.n	80080ac <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800806a:	2d00      	cmp	r5, #0
 800806c:	d0f4      	beq.n	8008058 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800806e:	2100      	movs	r1, #0
 8008070:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008074:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008078:	e002      	b.n	8008080 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800807a:	686d      	ldr	r5, [r5, #4]
 800807c:	2d00      	cmp	r5, #0
 800807e:	d0ec      	beq.n	800805a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8008080:	68ab      	ldr	r3, [r5, #8]
 8008082:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8008086:	4290      	cmp	r0, r2
 8008088:	d1f7      	bne.n	800807a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800808a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800808e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008092:	4562      	cmp	r2, ip
 8008094:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008098:	eb73 0e04 	sbcs.w	lr, r3, r4
 800809c:	daed      	bge.n	800807a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800809e:	4694      	mov	ip, r2
 80080a0:	461c      	mov	r4, r3
 80080a2:	4629      	mov	r1, r5
 80080a4:	e7e9      	b.n	800807a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80080a6:	b10c      	cbz	r4, 80080ac <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80080a8:	428c      	cmp	r4, r1
 80080aa:	d9d5      	bls.n	8008058 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80080ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080b0:	4802      	ldr	r0, [pc, #8]	; (80080bc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80080b2:	b002      	add	sp, #8
 80080b4:	f005 b950 	b.w	800d358 <get_memory>
 80080b8:	4629      	mov	r1, r5
 80080ba:	e7c6      	b.n	800804a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80080bc:	2000d9bc 	.word	0x2000d9bc

080080c0 <run_xrce_session>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	788c      	ldrb	r4, [r1, #2]
 80080c4:	b086      	sub	sp, #24
 80080c6:	2c01      	cmp	r4, #1
 80080c8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80080cc:	d00c      	beq.n	80080e8 <run_xrce_session+0x28>
 80080ce:	4619      	mov	r1, r3
 80080d0:	2301      	movs	r3, #1
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	f10d 020e 	add.w	r2, sp, #14
 80080d8:	f10d 0317 	add.w	r3, sp, #23
 80080dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80080e0:	f001 ff7e 	bl	8009fe0 <uxr_run_session_until_all_status>
 80080e4:	b006      	add	sp, #24
 80080e6:	bd10      	pop	{r4, pc}
 80080e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80080ec:	f001 fbcc 	bl	8009888 <uxr_flash_output_streams>
 80080f0:	4620      	mov	r0, r4
 80080f2:	b006      	add	sp, #24
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	bf00      	nop

080080f8 <convert_qos_profile>:
 80080f8:	7a4a      	ldrb	r2, [r1, #9]
 80080fa:	f891 c008 	ldrb.w	ip, [r1, #8]
 80080fe:	2a02      	cmp	r2, #2
 8008100:	bf18      	it	ne
 8008102:	2200      	movne	r2, #0
 8008104:	7002      	strb	r2, [r0, #0]
 8008106:	780a      	ldrb	r2, [r1, #0]
 8008108:	8889      	ldrh	r1, [r1, #4]
 800810a:	8081      	strh	r1, [r0, #4]
 800810c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008110:	f1a2 0202 	sub.w	r2, r2, #2
 8008114:	fabc fc8c 	clz	ip, ip
 8008118:	fab2 f282 	clz	r2, r2
 800811c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008120:	0952      	lsrs	r2, r2, #5
 8008122:	f880 c001 	strb.w	ip, [r0, #1]
 8008126:	7082      	strb	r2, [r0, #2]
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop

0800812c <generate_type_name>:
 800812c:	b530      	push	{r4, r5, lr}
 800812e:	2300      	movs	r3, #0
 8008130:	700b      	strb	r3, [r1, #0]
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	b087      	sub	sp, #28
 8008136:	4614      	mov	r4, r2
 8008138:	b1d3      	cbz	r3, 8008170 <generate_type_name+0x44>
 800813a:	4a0f      	ldr	r2, [pc, #60]	; (8008178 <generate_type_name+0x4c>)
 800813c:	4615      	mov	r5, r2
 800813e:	9203      	str	r2, [sp, #12]
 8008140:	9500      	str	r5, [sp, #0]
 8008142:	6842      	ldr	r2, [r0, #4]
 8008144:	480d      	ldr	r0, [pc, #52]	; (800817c <generate_type_name+0x50>)
 8008146:	9001      	str	r0, [sp, #4]
 8008148:	4608      	mov	r0, r1
 800814a:	490d      	ldr	r1, [pc, #52]	; (8008180 <generate_type_name+0x54>)
 800814c:	9204      	str	r2, [sp, #16]
 800814e:	9105      	str	r1, [sp, #20]
 8008150:	9102      	str	r1, [sp, #8]
 8008152:	4a0c      	ldr	r2, [pc, #48]	; (8008184 <generate_type_name+0x58>)
 8008154:	4621      	mov	r1, r4
 8008156:	f008 fadb 	bl	8010710 <sniprintf>
 800815a:	2800      	cmp	r0, #0
 800815c:	db05      	blt.n	800816a <generate_type_name+0x3e>
 800815e:	4284      	cmp	r4, r0
 8008160:	bfd4      	ite	le
 8008162:	2000      	movle	r0, #0
 8008164:	2001      	movgt	r0, #1
 8008166:	b007      	add	sp, #28
 8008168:	bd30      	pop	{r4, r5, pc}
 800816a:	2000      	movs	r0, #0
 800816c:	b007      	add	sp, #28
 800816e:	bd30      	pop	{r4, r5, pc}
 8008170:	4b05      	ldr	r3, [pc, #20]	; (8008188 <generate_type_name+0x5c>)
 8008172:	4a01      	ldr	r2, [pc, #4]	; (8008178 <generate_type_name+0x4c>)
 8008174:	461d      	mov	r5, r3
 8008176:	e7e2      	b.n	800813e <generate_type_name+0x12>
 8008178:	080119fc 	.word	0x080119fc
 800817c:	08011a14 	.word	0x08011a14
 8008180:	08011a10 	.word	0x08011a10
 8008184:	08011a00 	.word	0x08011a00
 8008188:	08011dcc 	.word	0x08011dcc

0800818c <generate_topic_name>:
 800818c:	b510      	push	{r4, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	4614      	mov	r4, r2
 8008192:	9000      	str	r0, [sp, #0]
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <generate_topic_name+0x2c>)
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <generate_topic_name+0x30>)
 8008198:	4608      	mov	r0, r1
 800819a:	4621      	mov	r1, r4
 800819c:	f008 fab8 	bl	8010710 <sniprintf>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	db05      	blt.n	80081b0 <generate_topic_name+0x24>
 80081a4:	4284      	cmp	r4, r0
 80081a6:	bfd4      	ite	le
 80081a8:	2000      	movle	r0, #0
 80081aa:	2001      	movgt	r0, #1
 80081ac:	b002      	add	sp, #8
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	2000      	movs	r0, #0
 80081b2:	b002      	add	sp, #8
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	bf00      	nop
 80081b8:	08011a20 	.word	0x08011a20
 80081bc:	08011a18 	.word	0x08011a18

080081c0 <is_uxrce_rmw_identifier_valid>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	b140      	cbz	r0, 80081d8 <is_uxrce_rmw_identifier_valid+0x18>
 80081c6:	f005 f8eb 	bl	800d3a0 <rmw_get_implementation_identifier>
 80081ca:	4601      	mov	r1, r0
 80081cc:	4620      	mov	r0, r4
 80081ce:	f7f8 f807 	bl	80001e0 <strcmp>
 80081d2:	fab0 f080 	clz	r0, r0
 80081d6:	0940      	lsrs	r0, r0, #5
 80081d8:	bd10      	pop	{r4, pc}
 80081da:	bf00      	nop

080081dc <get_message_typesupport_handle>:
 80081dc:	6883      	ldr	r3, [r0, #8]
 80081de:	4718      	bx	r3

080081e0 <get_message_typesupport_handle_function>:
 80081e0:	b510      	push	{r4, lr}
 80081e2:	4604      	mov	r4, r0
 80081e4:	6800      	ldr	r0, [r0, #0]
 80081e6:	f7f7 fffb 	bl	80001e0 <strcmp>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	bf0c      	ite	eq
 80081ee:	4620      	moveq	r0, r4
 80081f0:	2000      	movne	r0, #0
 80081f2:	bd10      	pop	{r4, pc}

080081f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80081f4:	4b04      	ldr	r3, [pc, #16]	; (8008208 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	b10a      	cbz	r2, 80081fe <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80081fa:	4803      	ldr	r0, [pc, #12]	; (8008208 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80081fc:	4770      	bx	lr
 80081fe:	4a03      	ldr	r2, [pc, #12]	; (800820c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008200:	4801      	ldr	r0, [pc, #4]	; (8008208 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	4770      	bx	lr
 8008208:	20000030 	.word	0x20000030
 800820c:	200000ac 	.word	0x200000ac

08008210 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008210:	4a02      	ldr	r2, [pc, #8]	; (800821c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8008212:	4b03      	ldr	r3, [pc, #12]	; (8008220 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	200000ac 	.word	0x200000ac
 8008220:	20000030 	.word	0x20000030

08008224 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8008224:	f005 bda0 	b.w	800dd68 <std_msgs__msg__Int32__init>

08008228 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8008228:	f005 bda2 	b.w	800dd70 <std_msgs__msg__Int32__fini>

0800822c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800822c:	4b04      	ldr	r3, [pc, #16]	; (8008240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	b10a      	cbz	r2, 8008236 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008232:	4803      	ldr	r0, [pc, #12]	; (8008240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008234:	4770      	bx	lr
 8008236:	4a03      	ldr	r2, [pc, #12]	; (8008244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008238:	4801      	ldr	r0, [pc, #4]	; (8008240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	4770      	bx	lr
 8008240:	20000078 	.word	0x20000078
 8008244:	200000b0 	.word	0x200000b0

08008248 <_Int32__max_serialized_size>:
 8008248:	b508      	push	{r3, lr}
 800824a:	2104      	movs	r1, #4
 800824c:	2000      	movs	r0, #0
 800824e:	f001 f807 	bl	8009260 <ucdr_alignment>
 8008252:	3004      	adds	r0, #4
 8008254:	bd08      	pop	{r3, pc}
 8008256:	bf00      	nop

08008258 <_Int32__cdr_deserialize>:
 8008258:	b109      	cbz	r1, 800825e <_Int32__cdr_deserialize+0x6>
 800825a:	f000 bf19 	b.w	8009090 <ucdr_deserialize_int32_t>
 800825e:	4608      	mov	r0, r1
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop

08008264 <get_serialized_size_std_msgs__msg__Int32>:
 8008264:	b138      	cbz	r0, 8008276 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8008266:	b508      	push	{r3, lr}
 8008268:	460b      	mov	r3, r1
 800826a:	4618      	mov	r0, r3
 800826c:	2104      	movs	r1, #4
 800826e:	f000 fff7 	bl	8009260 <ucdr_alignment>
 8008272:	3004      	adds	r0, #4
 8008274:	bd08      	pop	{r3, pc}
 8008276:	4770      	bx	lr

08008278 <_Int32__cdr_serialize>:
 8008278:	460a      	mov	r2, r1
 800827a:	b118      	cbz	r0, 8008284 <_Int32__cdr_serialize+0xc>
 800827c:	6801      	ldr	r1, [r0, #0]
 800827e:	4610      	mov	r0, r2
 8008280:	f000 be6e 	b.w	8008f60 <ucdr_serialize_int32_t>
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop

08008288 <_Int32__get_serialized_size>:
 8008288:	b130      	cbz	r0, 8008298 <_Int32__get_serialized_size+0x10>
 800828a:	b508      	push	{r3, lr}
 800828c:	2104      	movs	r1, #4
 800828e:	2000      	movs	r0, #0
 8008290:	f000 ffe6 	bl	8009260 <ucdr_alignment>
 8008294:	3004      	adds	r0, #4
 8008296:	bd08      	pop	{r3, pc}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop

0800829c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800829c:	4800      	ldr	r0, [pc, #0]	; (80082a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800829e:	4770      	bx	lr
 80082a0:	20000084 	.word	0x20000084

080082a4 <ucdr_serialize_bool>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	460d      	mov	r5, r1
 80082a8:	2101      	movs	r1, #1
 80082aa:	4604      	mov	r4, r0
 80082ac:	f000 ff8c 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80082b0:	b148      	cbz	r0, 80082c6 <ucdr_serialize_bool+0x22>
 80082b2:	68a3      	ldr	r3, [r4, #8]
 80082b4:	701d      	strb	r5, [r3, #0]
 80082b6:	68a2      	ldr	r2, [r4, #8]
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	2101      	movs	r1, #1
 80082bc:	440a      	add	r2, r1
 80082be:	440b      	add	r3, r1
 80082c0:	60a2      	str	r2, [r4, #8]
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	7561      	strb	r1, [r4, #21]
 80082c6:	7da0      	ldrb	r0, [r4, #22]
 80082c8:	f080 0001 	eor.w	r0, r0, #1
 80082cc:	bd38      	pop	{r3, r4, r5, pc}
 80082ce:	bf00      	nop

080082d0 <ucdr_deserialize_bool>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	460d      	mov	r5, r1
 80082d4:	2101      	movs	r1, #1
 80082d6:	4604      	mov	r4, r0
 80082d8:	f000 ff76 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80082dc:	b160      	cbz	r0, 80082f8 <ucdr_deserialize_bool+0x28>
 80082de:	68a2      	ldr	r2, [r4, #8]
 80082e0:	6923      	ldr	r3, [r4, #16]
 80082e2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80082e6:	3900      	subs	r1, #0
 80082e8:	bf18      	it	ne
 80082ea:	2101      	movne	r1, #1
 80082ec:	7029      	strb	r1, [r5, #0]
 80082ee:	3301      	adds	r3, #1
 80082f0:	2101      	movs	r1, #1
 80082f2:	60a2      	str	r2, [r4, #8]
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	7561      	strb	r1, [r4, #21]
 80082f8:	7da0      	ldrb	r0, [r4, #22]
 80082fa:	f080 0001 	eor.w	r0, r0, #1
 80082fe:	bd38      	pop	{r3, r4, r5, pc}

08008300 <ucdr_serialize_uint8_t>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	460d      	mov	r5, r1
 8008304:	2101      	movs	r1, #1
 8008306:	4604      	mov	r4, r0
 8008308:	f000 ff5e 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 800830c:	b148      	cbz	r0, 8008322 <ucdr_serialize_uint8_t+0x22>
 800830e:	68a3      	ldr	r3, [r4, #8]
 8008310:	701d      	strb	r5, [r3, #0]
 8008312:	68a2      	ldr	r2, [r4, #8]
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	2101      	movs	r1, #1
 8008318:	440a      	add	r2, r1
 800831a:	440b      	add	r3, r1
 800831c:	60a2      	str	r2, [r4, #8]
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	7561      	strb	r1, [r4, #21]
 8008322:	7da0      	ldrb	r0, [r4, #22]
 8008324:	f080 0001 	eor.w	r0, r0, #1
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop

0800832c <ucdr_deserialize_uint8_t>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	460d      	mov	r5, r1
 8008330:	2101      	movs	r1, #1
 8008332:	4604      	mov	r4, r0
 8008334:	f000 ff48 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008338:	b150      	cbz	r0, 8008350 <ucdr_deserialize_uint8_t+0x24>
 800833a:	68a3      	ldr	r3, [r4, #8]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	702b      	strb	r3, [r5, #0]
 8008340:	68a2      	ldr	r2, [r4, #8]
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	2101      	movs	r1, #1
 8008346:	440a      	add	r2, r1
 8008348:	440b      	add	r3, r1
 800834a:	60a2      	str	r2, [r4, #8]
 800834c:	6123      	str	r3, [r4, #16]
 800834e:	7561      	strb	r1, [r4, #21]
 8008350:	7da0      	ldrb	r0, [r4, #22]
 8008352:	f080 0001 	eor.w	r0, r0, #1
 8008356:	bd38      	pop	{r3, r4, r5, pc}

08008358 <ucdr_serialize_uint16_t>:
 8008358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	460b      	mov	r3, r1
 8008360:	2102      	movs	r1, #2
 8008362:	4604      	mov	r4, r0
 8008364:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008368:	f000 ff82 	bl	8009270 <ucdr_buffer_alignment>
 800836c:	4601      	mov	r1, r0
 800836e:	4620      	mov	r0, r4
 8008370:	7d67      	ldrb	r7, [r4, #21]
 8008372:	f000 ffc1 	bl	80092f8 <ucdr_advance_buffer>
 8008376:	2102      	movs	r1, #2
 8008378:	4620      	mov	r0, r4
 800837a:	f000 ff19 	bl	80091b0 <ucdr_check_buffer_available_for>
 800837e:	bb78      	cbnz	r0, 80083e0 <ucdr_serialize_uint16_t+0x88>
 8008380:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008384:	42ab      	cmp	r3, r5
 8008386:	d926      	bls.n	80083d6 <ucdr_serialize_uint16_t+0x7e>
 8008388:	1b5e      	subs	r6, r3, r5
 800838a:	60a3      	str	r3, [r4, #8]
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	f1c6 0802 	rsb	r8, r6, #2
 8008392:	4433      	add	r3, r6
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	4641      	mov	r1, r8
 8008398:	4620      	mov	r0, r4
 800839a:	f000 ff15 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d03b      	beq.n	800841a <ucdr_serialize_uint16_t+0xc2>
 80083a2:	7d23      	ldrb	r3, [r4, #20]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d04a      	beq.n	800843e <ucdr_serialize_uint16_t+0xe6>
 80083a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083ac:	702b      	strb	r3, [r5, #0]
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	d040      	beq.n	8008434 <ucdr_serialize_uint16_t+0xdc>
 80083b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80083b6:	706b      	strb	r3, [r5, #1]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	68a2      	ldr	r2, [r4, #8]
 80083bc:	7da0      	ldrb	r0, [r4, #22]
 80083be:	3302      	adds	r3, #2
 80083c0:	1b9e      	subs	r6, r3, r6
 80083c2:	4442      	add	r2, r8
 80083c4:	2302      	movs	r3, #2
 80083c6:	f080 0001 	eor.w	r0, r0, #1
 80083ca:	60a2      	str	r2, [r4, #8]
 80083cc:	6126      	str	r6, [r4, #16]
 80083ce:	7563      	strb	r3, [r4, #21]
 80083d0:	b002      	add	sp, #8
 80083d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d6:	2102      	movs	r1, #2
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 fef5 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80083de:	b190      	cbz	r0, 8008406 <ucdr_serialize_uint16_t+0xae>
 80083e0:	7d23      	ldrb	r3, [r4, #20]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	68a3      	ldr	r3, [r4, #8]
 80083e6:	d014      	beq.n	8008412 <ucdr_serialize_uint16_t+0xba>
 80083e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	68a3      	ldr	r3, [r4, #8]
 80083f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80083f4:	705a      	strb	r2, [r3, #1]
 80083f6:	68a2      	ldr	r2, [r4, #8]
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	3202      	adds	r2, #2
 80083fc:	3302      	adds	r3, #2
 80083fe:	2102      	movs	r1, #2
 8008400:	60a2      	str	r2, [r4, #8]
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	7561      	strb	r1, [r4, #21]
 8008406:	7da0      	ldrb	r0, [r4, #22]
 8008408:	f080 0001 	eor.w	r0, r0, #1
 800840c:	b002      	add	sp, #8
 800840e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008412:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	e7ed      	b.n	80083f6 <ucdr_serialize_uint16_t+0x9e>
 800841a:	68a2      	ldr	r2, [r4, #8]
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	7da0      	ldrb	r0, [r4, #22]
 8008420:	7567      	strb	r7, [r4, #21]
 8008422:	1b92      	subs	r2, r2, r6
 8008424:	1b9b      	subs	r3, r3, r6
 8008426:	f080 0001 	eor.w	r0, r0, #1
 800842a:	60a2      	str	r2, [r4, #8]
 800842c:	6123      	str	r3, [r4, #16]
 800842e:	b002      	add	sp, #8
 8008430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	e7bc      	b.n	80083b8 <ucdr_serialize_uint16_t+0x60>
 800843e:	4628      	mov	r0, r5
 8008440:	f10d 0506 	add.w	r5, sp, #6
 8008444:	4629      	mov	r1, r5
 8008446:	4632      	mov	r2, r6
 8008448:	f008 fadb 	bl	8010a02 <memcpy>
 800844c:	68a0      	ldr	r0, [r4, #8]
 800844e:	4642      	mov	r2, r8
 8008450:	19a9      	adds	r1, r5, r6
 8008452:	f008 fad6 	bl	8010a02 <memcpy>
 8008456:	e7af      	b.n	80083b8 <ucdr_serialize_uint16_t+0x60>

08008458 <ucdr_serialize_endian_uint16_t>:
 8008458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800845c:	b083      	sub	sp, #12
 800845e:	460d      	mov	r5, r1
 8008460:	2102      	movs	r1, #2
 8008462:	4604      	mov	r4, r0
 8008464:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008468:	f000 ff02 	bl	8009270 <ucdr_buffer_alignment>
 800846c:	4601      	mov	r1, r0
 800846e:	4620      	mov	r0, r4
 8008470:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008474:	f000 ff40 	bl	80092f8 <ucdr_advance_buffer>
 8008478:	2102      	movs	r1, #2
 800847a:	4620      	mov	r0, r4
 800847c:	f000 fe98 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008480:	bb70      	cbnz	r0, 80084e0 <ucdr_serialize_endian_uint16_t+0x88>
 8008482:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008486:	42be      	cmp	r6, r7
 8008488:	d925      	bls.n	80084d6 <ucdr_serialize_endian_uint16_t+0x7e>
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	60a6      	str	r6, [r4, #8]
 800848e:	1bf6      	subs	r6, r6, r7
 8008490:	4433      	add	r3, r6
 8008492:	f1c6 0902 	rsb	r9, r6, #2
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	4649      	mov	r1, r9
 800849a:	4620      	mov	r0, r4
 800849c:	f000 fe94 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d039      	beq.n	8008518 <ucdr_serialize_endian_uint16_t+0xc0>
 80084a4:	2d01      	cmp	r5, #1
 80084a6:	d04a      	beq.n	800853e <ucdr_serialize_endian_uint16_t+0xe6>
 80084a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80084ac:	703b      	strb	r3, [r7, #0]
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	d040      	beq.n	8008534 <ucdr_serialize_endian_uint16_t+0xdc>
 80084b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80084b6:	707b      	strb	r3, [r7, #1]
 80084b8:	6923      	ldr	r3, [r4, #16]
 80084ba:	68a2      	ldr	r2, [r4, #8]
 80084bc:	7da0      	ldrb	r0, [r4, #22]
 80084be:	3302      	adds	r3, #2
 80084c0:	444a      	add	r2, r9
 80084c2:	1b9b      	subs	r3, r3, r6
 80084c4:	2102      	movs	r1, #2
 80084c6:	f080 0001 	eor.w	r0, r0, #1
 80084ca:	60a2      	str	r2, [r4, #8]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	7561      	strb	r1, [r4, #21]
 80084d0:	b003      	add	sp, #12
 80084d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084d6:	2102      	movs	r1, #2
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fe75 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80084de:	b188      	cbz	r0, 8008504 <ucdr_serialize_endian_uint16_t+0xac>
 80084e0:	2d01      	cmp	r5, #1
 80084e2:	68a3      	ldr	r3, [r4, #8]
 80084e4:	d014      	beq.n	8008510 <ucdr_serialize_endian_uint16_t+0xb8>
 80084e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	68a3      	ldr	r3, [r4, #8]
 80084ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80084f2:	705a      	strb	r2, [r3, #1]
 80084f4:	68a2      	ldr	r2, [r4, #8]
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	3202      	adds	r2, #2
 80084fa:	3302      	adds	r3, #2
 80084fc:	2102      	movs	r1, #2
 80084fe:	60a2      	str	r2, [r4, #8]
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	7561      	strb	r1, [r4, #21]
 8008504:	7da0      	ldrb	r0, [r4, #22]
 8008506:	f080 0001 	eor.w	r0, r0, #1
 800850a:	b003      	add	sp, #12
 800850c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008510:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	e7ed      	b.n	80084f4 <ucdr_serialize_endian_uint16_t+0x9c>
 8008518:	68a2      	ldr	r2, [r4, #8]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	7da0      	ldrb	r0, [r4, #22]
 800851e:	f884 8015 	strb.w	r8, [r4, #21]
 8008522:	1b92      	subs	r2, r2, r6
 8008524:	1b9b      	subs	r3, r3, r6
 8008526:	f080 0001 	eor.w	r0, r0, #1
 800852a:	60a2      	str	r2, [r4, #8]
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	b003      	add	sp, #12
 8008530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008534:	68a3      	ldr	r3, [r4, #8]
 8008536:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	e7bc      	b.n	80084b8 <ucdr_serialize_endian_uint16_t+0x60>
 800853e:	f10d 0506 	add.w	r5, sp, #6
 8008542:	4629      	mov	r1, r5
 8008544:	4632      	mov	r2, r6
 8008546:	4638      	mov	r0, r7
 8008548:	f008 fa5b 	bl	8010a02 <memcpy>
 800854c:	68a0      	ldr	r0, [r4, #8]
 800854e:	464a      	mov	r2, r9
 8008550:	19a9      	adds	r1, r5, r6
 8008552:	f008 fa56 	bl	8010a02 <memcpy>
 8008556:	e7af      	b.n	80084b8 <ucdr_serialize_endian_uint16_t+0x60>

08008558 <ucdr_deserialize_uint16_t>:
 8008558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800855c:	460d      	mov	r5, r1
 800855e:	2102      	movs	r1, #2
 8008560:	4604      	mov	r4, r0
 8008562:	f000 fe85 	bl	8009270 <ucdr_buffer_alignment>
 8008566:	4601      	mov	r1, r0
 8008568:	4620      	mov	r0, r4
 800856a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800856e:	f000 fec3 	bl	80092f8 <ucdr_advance_buffer>
 8008572:	2102      	movs	r1, #2
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fe1b 	bl	80091b0 <ucdr_check_buffer_available_for>
 800857a:	bb60      	cbnz	r0, 80085d6 <ucdr_deserialize_uint16_t+0x7e>
 800857c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008580:	42be      	cmp	r6, r7
 8008582:	d923      	bls.n	80085cc <ucdr_deserialize_uint16_t+0x74>
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	60a6      	str	r6, [r4, #8]
 8008588:	1bf6      	subs	r6, r6, r7
 800858a:	4433      	add	r3, r6
 800858c:	f1c6 0902 	rsb	r9, r6, #2
 8008590:	6123      	str	r3, [r4, #16]
 8008592:	4649      	mov	r1, r9
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fe17 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 800859a:	2800      	cmp	r0, #0
 800859c:	d034      	beq.n	8008608 <ucdr_deserialize_uint16_t+0xb0>
 800859e:	7d23      	ldrb	r3, [r4, #20]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d042      	beq.n	800862a <ucdr_deserialize_uint16_t+0xd2>
 80085a4:	787b      	ldrb	r3, [r7, #1]
 80085a6:	702b      	strb	r3, [r5, #0]
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	d03a      	beq.n	8008622 <ucdr_deserialize_uint16_t+0xca>
 80085ac:	783b      	ldrb	r3, [r7, #0]
 80085ae:	706b      	strb	r3, [r5, #1]
 80085b0:	6923      	ldr	r3, [r4, #16]
 80085b2:	68a2      	ldr	r2, [r4, #8]
 80085b4:	7da0      	ldrb	r0, [r4, #22]
 80085b6:	2102      	movs	r1, #2
 80085b8:	3302      	adds	r3, #2
 80085ba:	444a      	add	r2, r9
 80085bc:	1b9b      	subs	r3, r3, r6
 80085be:	7561      	strb	r1, [r4, #21]
 80085c0:	60a2      	str	r2, [r4, #8]
 80085c2:	6123      	str	r3, [r4, #16]
 80085c4:	f080 0001 	eor.w	r0, r0, #1
 80085c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085cc:	2102      	movs	r1, #2
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fdfa 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80085d4:	b180      	cbz	r0, 80085f8 <ucdr_deserialize_uint16_t+0xa0>
 80085d6:	7d23      	ldrb	r3, [r4, #20]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	68a3      	ldr	r3, [r4, #8]
 80085dc:	d011      	beq.n	8008602 <ucdr_deserialize_uint16_t+0xaa>
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	702b      	strb	r3, [r5, #0]
 80085e2:	68a3      	ldr	r3, [r4, #8]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	706b      	strb	r3, [r5, #1]
 80085e8:	68a2      	ldr	r2, [r4, #8]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	3202      	adds	r2, #2
 80085ee:	3302      	adds	r3, #2
 80085f0:	2102      	movs	r1, #2
 80085f2:	60a2      	str	r2, [r4, #8]
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	7561      	strb	r1, [r4, #21]
 80085f8:	7da0      	ldrb	r0, [r4, #22]
 80085fa:	f080 0001 	eor.w	r0, r0, #1
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	802b      	strh	r3, [r5, #0]
 8008606:	e7ef      	b.n	80085e8 <ucdr_deserialize_uint16_t+0x90>
 8008608:	68a2      	ldr	r2, [r4, #8]
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	7da0      	ldrb	r0, [r4, #22]
 800860e:	f884 8015 	strb.w	r8, [r4, #21]
 8008612:	1b92      	subs	r2, r2, r6
 8008614:	1b9b      	subs	r3, r3, r6
 8008616:	60a2      	str	r2, [r4, #8]
 8008618:	6123      	str	r3, [r4, #16]
 800861a:	f080 0001 	eor.w	r0, r0, #1
 800861e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	706b      	strb	r3, [r5, #1]
 8008628:	e7c2      	b.n	80085b0 <ucdr_deserialize_uint16_t+0x58>
 800862a:	4639      	mov	r1, r7
 800862c:	4632      	mov	r2, r6
 800862e:	4628      	mov	r0, r5
 8008630:	f008 f9e7 	bl	8010a02 <memcpy>
 8008634:	68a1      	ldr	r1, [r4, #8]
 8008636:	464a      	mov	r2, r9
 8008638:	19a8      	adds	r0, r5, r6
 800863a:	f008 f9e2 	bl	8010a02 <memcpy>
 800863e:	e7b7      	b.n	80085b0 <ucdr_deserialize_uint16_t+0x58>

08008640 <ucdr_deserialize_endian_uint16_t>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	460e      	mov	r6, r1
 8008646:	2102      	movs	r1, #2
 8008648:	4604      	mov	r4, r0
 800864a:	4615      	mov	r5, r2
 800864c:	f000 fe10 	bl	8009270 <ucdr_buffer_alignment>
 8008650:	4601      	mov	r1, r0
 8008652:	4620      	mov	r0, r4
 8008654:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008658:	f000 fe4e 	bl	80092f8 <ucdr_advance_buffer>
 800865c:	2102      	movs	r1, #2
 800865e:	4620      	mov	r0, r4
 8008660:	f000 fda6 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008664:	bb70      	cbnz	r0, 80086c4 <ucdr_deserialize_endian_uint16_t+0x84>
 8008666:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800866a:	4547      	cmp	r7, r8
 800866c:	d925      	bls.n	80086ba <ucdr_deserialize_endian_uint16_t+0x7a>
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	60a7      	str	r7, [r4, #8]
 8008672:	eba7 0708 	sub.w	r7, r7, r8
 8008676:	443b      	add	r3, r7
 8008678:	f1c7 0a02 	rsb	sl, r7, #2
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	4651      	mov	r1, sl
 8008680:	4620      	mov	r0, r4
 8008682:	f000 fda1 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008686:	2800      	cmp	r0, #0
 8008688:	d034      	beq.n	80086f4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800868a:	2e01      	cmp	r6, #1
 800868c:	d043      	beq.n	8008716 <ucdr_deserialize_endian_uint16_t+0xd6>
 800868e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008692:	702b      	strb	r3, [r5, #0]
 8008694:	2f00      	cmp	r7, #0
 8008696:	d03a      	beq.n	800870e <ucdr_deserialize_endian_uint16_t+0xce>
 8008698:	f898 3000 	ldrb.w	r3, [r8]
 800869c:	706b      	strb	r3, [r5, #1]
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	68a2      	ldr	r2, [r4, #8]
 80086a2:	7da0      	ldrb	r0, [r4, #22]
 80086a4:	2102      	movs	r1, #2
 80086a6:	3302      	adds	r3, #2
 80086a8:	4452      	add	r2, sl
 80086aa:	1bdb      	subs	r3, r3, r7
 80086ac:	7561      	strb	r1, [r4, #21]
 80086ae:	60a2      	str	r2, [r4, #8]
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	f080 0001 	eor.w	r0, r0, #1
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	2102      	movs	r1, #2
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 fd83 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80086c2:	b178      	cbz	r0, 80086e4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80086c4:	2e01      	cmp	r6, #1
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	d011      	beq.n	80086ee <ucdr_deserialize_endian_uint16_t+0xae>
 80086ca:	785b      	ldrb	r3, [r3, #1]
 80086cc:	702b      	strb	r3, [r5, #0]
 80086ce:	68a3      	ldr	r3, [r4, #8]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	706b      	strb	r3, [r5, #1]
 80086d4:	68a2      	ldr	r2, [r4, #8]
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	3202      	adds	r2, #2
 80086da:	3302      	adds	r3, #2
 80086dc:	2102      	movs	r1, #2
 80086de:	60a2      	str	r2, [r4, #8]
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	7561      	strb	r1, [r4, #21]
 80086e4:	7da0      	ldrb	r0, [r4, #22]
 80086e6:	f080 0001 	eor.w	r0, r0, #1
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	802b      	strh	r3, [r5, #0]
 80086f2:	e7ef      	b.n	80086d4 <ucdr_deserialize_endian_uint16_t+0x94>
 80086f4:	68a2      	ldr	r2, [r4, #8]
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	7da0      	ldrb	r0, [r4, #22]
 80086fa:	f884 9015 	strb.w	r9, [r4, #21]
 80086fe:	1bd2      	subs	r2, r2, r7
 8008700:	1bdb      	subs	r3, r3, r7
 8008702:	60a2      	str	r2, [r4, #8]
 8008704:	6123      	str	r3, [r4, #16]
 8008706:	f080 0001 	eor.w	r0, r0, #1
 800870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	706b      	strb	r3, [r5, #1]
 8008714:	e7c3      	b.n	800869e <ucdr_deserialize_endian_uint16_t+0x5e>
 8008716:	4641      	mov	r1, r8
 8008718:	463a      	mov	r2, r7
 800871a:	4628      	mov	r0, r5
 800871c:	f008 f971 	bl	8010a02 <memcpy>
 8008720:	68a1      	ldr	r1, [r4, #8]
 8008722:	4652      	mov	r2, sl
 8008724:	19e8      	adds	r0, r5, r7
 8008726:	f008 f96c 	bl	8010a02 <memcpy>
 800872a:	e7b8      	b.n	800869e <ucdr_deserialize_endian_uint16_t+0x5e>

0800872c <ucdr_serialize_uint32_t>:
 800872c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	4604      	mov	r4, r0
 8008734:	9101      	str	r1, [sp, #4]
 8008736:	2104      	movs	r1, #4
 8008738:	f000 fd9a 	bl	8009270 <ucdr_buffer_alignment>
 800873c:	4601      	mov	r1, r0
 800873e:	4620      	mov	r0, r4
 8008740:	7d67      	ldrb	r7, [r4, #21]
 8008742:	f000 fdd9 	bl	80092f8 <ucdr_advance_buffer>
 8008746:	2104      	movs	r1, #4
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fd31 	bl	80091b0 <ucdr_check_buffer_available_for>
 800874e:	2800      	cmp	r0, #0
 8008750:	d139      	bne.n	80087c6 <ucdr_serialize_uint32_t+0x9a>
 8008752:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008756:	42ab      	cmp	r3, r5
 8008758:	d930      	bls.n	80087bc <ucdr_serialize_uint32_t+0x90>
 800875a:	1b5e      	subs	r6, r3, r5
 800875c:	60a3      	str	r3, [r4, #8]
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	f1c6 0804 	rsb	r8, r6, #4
 8008764:	4433      	add	r3, r6
 8008766:	6123      	str	r3, [r4, #16]
 8008768:	4641      	mov	r1, r8
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fd2c 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008770:	2800      	cmp	r0, #0
 8008772:	d04c      	beq.n	800880e <ucdr_serialize_uint32_t+0xe2>
 8008774:	7d23      	ldrb	r3, [r4, #20]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d063      	beq.n	8008842 <ucdr_serialize_uint32_t+0x116>
 800877a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800877e:	702b      	strb	r3, [r5, #0]
 8008780:	2e00      	cmp	r6, #0
 8008782:	d051      	beq.n	8008828 <ucdr_serialize_uint32_t+0xfc>
 8008784:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008788:	706b      	strb	r3, [r5, #1]
 800878a:	2e01      	cmp	r6, #1
 800878c:	d050      	beq.n	8008830 <ucdr_serialize_uint32_t+0x104>
 800878e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008792:	70ab      	strb	r3, [r5, #2]
 8008794:	2e02      	cmp	r6, #2
 8008796:	d04f      	beq.n	8008838 <ucdr_serialize_uint32_t+0x10c>
 8008798:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800879c:	70eb      	strb	r3, [r5, #3]
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	68a2      	ldr	r2, [r4, #8]
 80087a2:	7da0      	ldrb	r0, [r4, #22]
 80087a4:	3304      	adds	r3, #4
 80087a6:	1b9e      	subs	r6, r3, r6
 80087a8:	4442      	add	r2, r8
 80087aa:	2304      	movs	r3, #4
 80087ac:	f080 0001 	eor.w	r0, r0, #1
 80087b0:	60a2      	str	r2, [r4, #8]
 80087b2:	6126      	str	r6, [r4, #16]
 80087b4:	7563      	strb	r3, [r4, #21]
 80087b6:	b002      	add	sp, #8
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	2104      	movs	r1, #4
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 fd02 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80087c4:	b1d0      	cbz	r0, 80087fc <ucdr_serialize_uint32_t+0xd0>
 80087c6:	7d23      	ldrb	r3, [r4, #20]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	d01c      	beq.n	8008808 <ucdr_serialize_uint32_t+0xdc>
 80087ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80087da:	705a      	strb	r2, [r3, #1]
 80087dc:	68a3      	ldr	r3, [r4, #8]
 80087de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80087e2:	709a      	strb	r2, [r3, #2]
 80087e4:	68a3      	ldr	r3, [r4, #8]
 80087e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80087ea:	70da      	strb	r2, [r3, #3]
 80087ec:	68a2      	ldr	r2, [r4, #8]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	3204      	adds	r2, #4
 80087f2:	3304      	adds	r3, #4
 80087f4:	2104      	movs	r1, #4
 80087f6:	60a2      	str	r2, [r4, #8]
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	7561      	strb	r1, [r4, #21]
 80087fc:	7da0      	ldrb	r0, [r4, #22]
 80087fe:	f080 0001 	eor.w	r0, r0, #1
 8008802:	b002      	add	sp, #8
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	9a01      	ldr	r2, [sp, #4]
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	e7ee      	b.n	80087ec <ucdr_serialize_uint32_t+0xc0>
 800880e:	68a2      	ldr	r2, [r4, #8]
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	7da0      	ldrb	r0, [r4, #22]
 8008814:	7567      	strb	r7, [r4, #21]
 8008816:	1b92      	subs	r2, r2, r6
 8008818:	1b9b      	subs	r3, r3, r6
 800881a:	f080 0001 	eor.w	r0, r0, #1
 800881e:	60a2      	str	r2, [r4, #8]
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	b002      	add	sp, #8
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800882e:	701a      	strb	r2, [r3, #0]
 8008830:	68a3      	ldr	r3, [r4, #8]
 8008832:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	e7ad      	b.n	800879e <ucdr_serialize_uint32_t+0x72>
 8008842:	4628      	mov	r0, r5
 8008844:	ad01      	add	r5, sp, #4
 8008846:	4629      	mov	r1, r5
 8008848:	4632      	mov	r2, r6
 800884a:	f008 f8da 	bl	8010a02 <memcpy>
 800884e:	68a0      	ldr	r0, [r4, #8]
 8008850:	4642      	mov	r2, r8
 8008852:	19a9      	adds	r1, r5, r6
 8008854:	f008 f8d5 	bl	8010a02 <memcpy>
 8008858:	e7a1      	b.n	800879e <ucdr_serialize_uint32_t+0x72>
 800885a:	bf00      	nop

0800885c <ucdr_serialize_endian_uint32_t>:
 800885c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008860:	b083      	sub	sp, #12
 8008862:	460d      	mov	r5, r1
 8008864:	2104      	movs	r1, #4
 8008866:	4604      	mov	r4, r0
 8008868:	9201      	str	r2, [sp, #4]
 800886a:	f000 fd01 	bl	8009270 <ucdr_buffer_alignment>
 800886e:	4601      	mov	r1, r0
 8008870:	4620      	mov	r0, r4
 8008872:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008876:	f000 fd3f 	bl	80092f8 <ucdr_advance_buffer>
 800887a:	2104      	movs	r1, #4
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fc97 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008882:	2800      	cmp	r0, #0
 8008884:	d138      	bne.n	80088f8 <ucdr_serialize_endian_uint32_t+0x9c>
 8008886:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800888a:	42b7      	cmp	r7, r6
 800888c:	d92f      	bls.n	80088ee <ucdr_serialize_endian_uint32_t+0x92>
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	60a7      	str	r7, [r4, #8]
 8008892:	1bbf      	subs	r7, r7, r6
 8008894:	443b      	add	r3, r7
 8008896:	f1c7 0904 	rsb	r9, r7, #4
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	4649      	mov	r1, r9
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fc92 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d04a      	beq.n	800893e <ucdr_serialize_endian_uint32_t+0xe2>
 80088a8:	2d01      	cmp	r5, #1
 80088aa:	d063      	beq.n	8008974 <ucdr_serialize_endian_uint32_t+0x118>
 80088ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088b0:	7033      	strb	r3, [r6, #0]
 80088b2:	2f00      	cmp	r7, #0
 80088b4:	d051      	beq.n	800895a <ucdr_serialize_endian_uint32_t+0xfe>
 80088b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088ba:	7073      	strb	r3, [r6, #1]
 80088bc:	2f01      	cmp	r7, #1
 80088be:	d050      	beq.n	8008962 <ucdr_serialize_endian_uint32_t+0x106>
 80088c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80088c4:	70b3      	strb	r3, [r6, #2]
 80088c6:	2f02      	cmp	r7, #2
 80088c8:	d04f      	beq.n	800896a <ucdr_serialize_endian_uint32_t+0x10e>
 80088ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80088ce:	70f3      	strb	r3, [r6, #3]
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	68a2      	ldr	r2, [r4, #8]
 80088d4:	7da0      	ldrb	r0, [r4, #22]
 80088d6:	3304      	adds	r3, #4
 80088d8:	444a      	add	r2, r9
 80088da:	1bdb      	subs	r3, r3, r7
 80088dc:	2104      	movs	r1, #4
 80088de:	f080 0001 	eor.w	r0, r0, #1
 80088e2:	60a2      	str	r2, [r4, #8]
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	7561      	strb	r1, [r4, #21]
 80088e8:	b003      	add	sp, #12
 80088ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ee:	2104      	movs	r1, #4
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fc69 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80088f6:	b1c8      	cbz	r0, 800892c <ucdr_serialize_endian_uint32_t+0xd0>
 80088f8:	2d01      	cmp	r5, #1
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	d01c      	beq.n	8008938 <ucdr_serialize_endian_uint32_t+0xdc>
 80088fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	68a3      	ldr	r3, [r4, #8]
 8008906:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800890a:	705a      	strb	r2, [r3, #1]
 800890c:	68a3      	ldr	r3, [r4, #8]
 800890e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008912:	709a      	strb	r2, [r3, #2]
 8008914:	68a3      	ldr	r3, [r4, #8]
 8008916:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800891a:	70da      	strb	r2, [r3, #3]
 800891c:	68a2      	ldr	r2, [r4, #8]
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	3204      	adds	r2, #4
 8008922:	3304      	adds	r3, #4
 8008924:	2104      	movs	r1, #4
 8008926:	60a2      	str	r2, [r4, #8]
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	7561      	strb	r1, [r4, #21]
 800892c:	7da0      	ldrb	r0, [r4, #22]
 800892e:	f080 0001 	eor.w	r0, r0, #1
 8008932:	b003      	add	sp, #12
 8008934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008938:	9a01      	ldr	r2, [sp, #4]
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e7ee      	b.n	800891c <ucdr_serialize_endian_uint32_t+0xc0>
 800893e:	68a2      	ldr	r2, [r4, #8]
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	7da0      	ldrb	r0, [r4, #22]
 8008944:	f884 8015 	strb.w	r8, [r4, #21]
 8008948:	1bd2      	subs	r2, r2, r7
 800894a:	1bdb      	subs	r3, r3, r7
 800894c:	f080 0001 	eor.w	r0, r0, #1
 8008950:	60a2      	str	r2, [r4, #8]
 8008952:	6123      	str	r3, [r4, #16]
 8008954:	b003      	add	sp, #12
 8008956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008970:	701a      	strb	r2, [r3, #0]
 8008972:	e7ad      	b.n	80088d0 <ucdr_serialize_endian_uint32_t+0x74>
 8008974:	ad01      	add	r5, sp, #4
 8008976:	4629      	mov	r1, r5
 8008978:	463a      	mov	r2, r7
 800897a:	4630      	mov	r0, r6
 800897c:	f008 f841 	bl	8010a02 <memcpy>
 8008980:	68a0      	ldr	r0, [r4, #8]
 8008982:	464a      	mov	r2, r9
 8008984:	19e9      	adds	r1, r5, r7
 8008986:	f008 f83c 	bl	8010a02 <memcpy>
 800898a:	e7a1      	b.n	80088d0 <ucdr_serialize_endian_uint32_t+0x74>

0800898c <ucdr_deserialize_uint32_t>:
 800898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008990:	460d      	mov	r5, r1
 8008992:	2104      	movs	r1, #4
 8008994:	4604      	mov	r4, r0
 8008996:	f000 fc6b 	bl	8009270 <ucdr_buffer_alignment>
 800899a:	4601      	mov	r1, r0
 800899c:	4620      	mov	r0, r4
 800899e:	f894 8015 	ldrb.w	r8, [r4, #21]
 80089a2:	f000 fca9 	bl	80092f8 <ucdr_advance_buffer>
 80089a6:	2104      	movs	r1, #4
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fc01 	bl	80091b0 <ucdr_check_buffer_available_for>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d138      	bne.n	8008a24 <ucdr_deserialize_uint32_t+0x98>
 80089b2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80089b6:	42b7      	cmp	r7, r6
 80089b8:	d92f      	bls.n	8008a1a <ucdr_deserialize_uint32_t+0x8e>
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	60a7      	str	r7, [r4, #8]
 80089be:	1bbf      	subs	r7, r7, r6
 80089c0:	443b      	add	r3, r7
 80089c2:	f1c7 0904 	rsb	r9, r7, #4
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	4649      	mov	r1, r9
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fbfc 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d046      	beq.n	8008a62 <ucdr_deserialize_uint32_t+0xd6>
 80089d4:	7d23      	ldrb	r3, [r4, #20]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d05c      	beq.n	8008a94 <ucdr_deserialize_uint32_t+0x108>
 80089da:	78f3      	ldrb	r3, [r6, #3]
 80089dc:	702b      	strb	r3, [r5, #0]
 80089de:	2f00      	cmp	r7, #0
 80089e0:	d04c      	beq.n	8008a7c <ucdr_deserialize_uint32_t+0xf0>
 80089e2:	78b3      	ldrb	r3, [r6, #2]
 80089e4:	706b      	strb	r3, [r5, #1]
 80089e6:	2f01      	cmp	r7, #1
 80089e8:	f105 0302 	add.w	r3, r5, #2
 80089ec:	d04a      	beq.n	8008a84 <ucdr_deserialize_uint32_t+0xf8>
 80089ee:	7873      	ldrb	r3, [r6, #1]
 80089f0:	70ab      	strb	r3, [r5, #2]
 80089f2:	2f02      	cmp	r7, #2
 80089f4:	f105 0303 	add.w	r3, r5, #3
 80089f8:	d048      	beq.n	8008a8c <ucdr_deserialize_uint32_t+0x100>
 80089fa:	7833      	ldrb	r3, [r6, #0]
 80089fc:	70eb      	strb	r3, [r5, #3]
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	68a2      	ldr	r2, [r4, #8]
 8008a02:	7da0      	ldrb	r0, [r4, #22]
 8008a04:	2104      	movs	r1, #4
 8008a06:	3304      	adds	r3, #4
 8008a08:	444a      	add	r2, r9
 8008a0a:	1bdb      	subs	r3, r3, r7
 8008a0c:	7561      	strb	r1, [r4, #21]
 8008a0e:	60a2      	str	r2, [r4, #8]
 8008a10:	6123      	str	r3, [r4, #16]
 8008a12:	f080 0001 	eor.w	r0, r0, #1
 8008a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1a:	2104      	movs	r1, #4
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fbd3 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008a22:	b1b0      	cbz	r0, 8008a52 <ucdr_deserialize_uint32_t+0xc6>
 8008a24:	7d23      	ldrb	r3, [r4, #20]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	68a3      	ldr	r3, [r4, #8]
 8008a2a:	d017      	beq.n	8008a5c <ucdr_deserialize_uint32_t+0xd0>
 8008a2c:	78db      	ldrb	r3, [r3, #3]
 8008a2e:	702b      	strb	r3, [r5, #0]
 8008a30:	68a3      	ldr	r3, [r4, #8]
 8008a32:	789b      	ldrb	r3, [r3, #2]
 8008a34:	706b      	strb	r3, [r5, #1]
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	70ab      	strb	r3, [r5, #2]
 8008a3c:	68a3      	ldr	r3, [r4, #8]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	70eb      	strb	r3, [r5, #3]
 8008a42:	68a2      	ldr	r2, [r4, #8]
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	3204      	adds	r2, #4
 8008a48:	3304      	adds	r3, #4
 8008a4a:	2104      	movs	r1, #4
 8008a4c:	60a2      	str	r2, [r4, #8]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	7561      	strb	r1, [r4, #21]
 8008a52:	7da0      	ldrb	r0, [r4, #22]
 8008a54:	f080 0001 	eor.w	r0, r0, #1
 8008a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	e7ef      	b.n	8008a42 <ucdr_deserialize_uint32_t+0xb6>
 8008a62:	68a2      	ldr	r2, [r4, #8]
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	7da0      	ldrb	r0, [r4, #22]
 8008a68:	f884 8015 	strb.w	r8, [r4, #21]
 8008a6c:	1bd2      	subs	r2, r2, r7
 8008a6e:	1bdb      	subs	r3, r3, r7
 8008a70:	60a2      	str	r2, [r4, #8]
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	f080 0001 	eor.w	r0, r0, #1
 8008a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7c:	68a3      	ldr	r3, [r4, #8]
 8008a7e:	789b      	ldrb	r3, [r3, #2]
 8008a80:	706b      	strb	r3, [r5, #1]
 8008a82:	1cab      	adds	r3, r5, #2
 8008a84:	68a2      	ldr	r2, [r4, #8]
 8008a86:	7852      	ldrb	r2, [r2, #1]
 8008a88:	f803 2b01 	strb.w	r2, [r3], #1
 8008a8c:	68a2      	ldr	r2, [r4, #8]
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	e7b4      	b.n	80089fe <ucdr_deserialize_uint32_t+0x72>
 8008a94:	4631      	mov	r1, r6
 8008a96:	463a      	mov	r2, r7
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f007 ffb2 	bl	8010a02 <memcpy>
 8008a9e:	68a1      	ldr	r1, [r4, #8]
 8008aa0:	464a      	mov	r2, r9
 8008aa2:	19e8      	adds	r0, r5, r7
 8008aa4:	f007 ffad 	bl	8010a02 <memcpy>
 8008aa8:	e7a9      	b.n	80089fe <ucdr_deserialize_uint32_t+0x72>
 8008aaa:	bf00      	nop

08008aac <ucdr_deserialize_endian_uint32_t>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	2104      	movs	r1, #4
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4615      	mov	r5, r2
 8008ab8:	f000 fbda 	bl	8009270 <ucdr_buffer_alignment>
 8008abc:	4601      	mov	r1, r0
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008ac4:	f000 fc18 	bl	80092f8 <ucdr_advance_buffer>
 8008ac8:	2104      	movs	r1, #4
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fb70 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d13c      	bne.n	8008b4e <ucdr_deserialize_endian_uint32_t+0xa2>
 8008ad4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008ad8:	42bb      	cmp	r3, r7
 8008ada:	d933      	bls.n	8008b44 <ucdr_deserialize_endian_uint32_t+0x98>
 8008adc:	eba3 0807 	sub.w	r8, r3, r7
 8008ae0:	60a3      	str	r3, [r4, #8]
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	f1c8 0a04 	rsb	sl, r8, #4
 8008ae8:	4443      	add	r3, r8
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	4651      	mov	r1, sl
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 fb6a 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d048      	beq.n	8008b8a <ucdr_deserialize_endian_uint32_t+0xde>
 8008af8:	2e01      	cmp	r6, #1
 8008afa:	d061      	beq.n	8008bc0 <ucdr_deserialize_endian_uint32_t+0x114>
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	702b      	strb	r3, [r5, #0]
 8008b00:	f1b8 0f00 	cmp.w	r8, #0
 8008b04:	d050      	beq.n	8008ba8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8008b06:	78bb      	ldrb	r3, [r7, #2]
 8008b08:	706b      	strb	r3, [r5, #1]
 8008b0a:	f1b8 0f01 	cmp.w	r8, #1
 8008b0e:	f105 0302 	add.w	r3, r5, #2
 8008b12:	d04d      	beq.n	8008bb0 <ucdr_deserialize_endian_uint32_t+0x104>
 8008b14:	787b      	ldrb	r3, [r7, #1]
 8008b16:	70ab      	strb	r3, [r5, #2]
 8008b18:	f1b8 0f02 	cmp.w	r8, #2
 8008b1c:	f105 0303 	add.w	r3, r5, #3
 8008b20:	d04a      	beq.n	8008bb8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8008b22:	783b      	ldrb	r3, [r7, #0]
 8008b24:	70eb      	strb	r3, [r5, #3]
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	68a2      	ldr	r2, [r4, #8]
 8008b2a:	7da0      	ldrb	r0, [r4, #22]
 8008b2c:	2104      	movs	r1, #4
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4452      	add	r2, sl
 8008b32:	eba3 0308 	sub.w	r3, r3, r8
 8008b36:	7561      	strb	r1, [r4, #21]
 8008b38:	60a2      	str	r2, [r4, #8]
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	f080 0001 	eor.w	r0, r0, #1
 8008b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b44:	2104      	movs	r1, #4
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fb3e 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008b4c:	b1a8      	cbz	r0, 8008b7a <ucdr_deserialize_endian_uint32_t+0xce>
 8008b4e:	2e01      	cmp	r6, #1
 8008b50:	68a3      	ldr	r3, [r4, #8]
 8008b52:	d017      	beq.n	8008b84 <ucdr_deserialize_endian_uint32_t+0xd8>
 8008b54:	78db      	ldrb	r3, [r3, #3]
 8008b56:	702b      	strb	r3, [r5, #0]
 8008b58:	68a3      	ldr	r3, [r4, #8]
 8008b5a:	789b      	ldrb	r3, [r3, #2]
 8008b5c:	706b      	strb	r3, [r5, #1]
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	70ab      	strb	r3, [r5, #2]
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	70eb      	strb	r3, [r5, #3]
 8008b6a:	68a2      	ldr	r2, [r4, #8]
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	3204      	adds	r2, #4
 8008b70:	3304      	adds	r3, #4
 8008b72:	2104      	movs	r1, #4
 8008b74:	60a2      	str	r2, [r4, #8]
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	7561      	strb	r1, [r4, #21]
 8008b7a:	7da0      	ldrb	r0, [r4, #22]
 8008b7c:	f080 0001 	eor.w	r0, r0, #1
 8008b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	e7ef      	b.n	8008b6a <ucdr_deserialize_endian_uint32_t+0xbe>
 8008b8a:	68a2      	ldr	r2, [r4, #8]
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	7da0      	ldrb	r0, [r4, #22]
 8008b90:	f884 9015 	strb.w	r9, [r4, #21]
 8008b94:	eba2 0208 	sub.w	r2, r2, r8
 8008b98:	eba3 0308 	sub.w	r3, r3, r8
 8008b9c:	60a2      	str	r2, [r4, #8]
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	f080 0001 	eor.w	r0, r0, #1
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	68a3      	ldr	r3, [r4, #8]
 8008baa:	789b      	ldrb	r3, [r3, #2]
 8008bac:	706b      	strb	r3, [r5, #1]
 8008bae:	1cab      	adds	r3, r5, #2
 8008bb0:	68a2      	ldr	r2, [r4, #8]
 8008bb2:	7852      	ldrb	r2, [r2, #1]
 8008bb4:	f803 2b01 	strb.w	r2, [r3], #1
 8008bb8:	68a2      	ldr	r2, [r4, #8]
 8008bba:	7812      	ldrb	r2, [r2, #0]
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e7b2      	b.n	8008b26 <ucdr_deserialize_endian_uint32_t+0x7a>
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	4642      	mov	r2, r8
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f007 ff1c 	bl	8010a02 <memcpy>
 8008bca:	68a1      	ldr	r1, [r4, #8]
 8008bcc:	4652      	mov	r2, sl
 8008bce:	eb05 0008 	add.w	r0, r5, r8
 8008bd2:	f007 ff16 	bl	8010a02 <memcpy>
 8008bd6:	e7a6      	b.n	8008b26 <ucdr_deserialize_endian_uint32_t+0x7a>

08008bd8 <ucdr_serialize_uint64_t>:
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	2108      	movs	r1, #8
 8008bde:	b082      	sub	sp, #8
 8008be0:	4604      	mov	r4, r0
 8008be2:	e9cd 2300 	strd	r2, r3, [sp]
 8008be6:	f000 fb43 	bl	8009270 <ucdr_buffer_alignment>
 8008bea:	4601      	mov	r1, r0
 8008bec:	4620      	mov	r0, r4
 8008bee:	7d67      	ldrb	r7, [r4, #21]
 8008bf0:	f000 fb82 	bl	80092f8 <ucdr_advance_buffer>
 8008bf4:	2108      	movs	r1, #8
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 fada 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d14e      	bne.n	8008c9e <ucdr_serialize_uint64_t+0xc6>
 8008c00:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	d945      	bls.n	8008c94 <ucdr_serialize_uint64_t+0xbc>
 8008c08:	1b5e      	subs	r6, r3, r5
 8008c0a:	60a3      	str	r3, [r4, #8]
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	f1c6 0808 	rsb	r8, r6, #8
 8008c12:	4433      	add	r3, r6
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	4641      	mov	r1, r8
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 fad5 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d074      	beq.n	8008d0c <ucdr_serialize_uint64_t+0x134>
 8008c22:	7d23      	ldrb	r3, [r4, #20]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	f000 809b 	beq.w	8008d60 <ucdr_serialize_uint64_t+0x188>
 8008c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c2e:	702b      	strb	r3, [r5, #0]
 8008c30:	2e00      	cmp	r6, #0
 8008c32:	d078      	beq.n	8008d26 <ucdr_serialize_uint64_t+0x14e>
 8008c34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c38:	706b      	strb	r3, [r5, #1]
 8008c3a:	2e01      	cmp	r6, #1
 8008c3c:	d077      	beq.n	8008d2e <ucdr_serialize_uint64_t+0x156>
 8008c3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008c42:	70ab      	strb	r3, [r5, #2]
 8008c44:	2e02      	cmp	r6, #2
 8008c46:	d076      	beq.n	8008d36 <ucdr_serialize_uint64_t+0x15e>
 8008c48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c4c:	70eb      	strb	r3, [r5, #3]
 8008c4e:	2e03      	cmp	r6, #3
 8008c50:	d075      	beq.n	8008d3e <ucdr_serialize_uint64_t+0x166>
 8008c52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008c56:	712b      	strb	r3, [r5, #4]
 8008c58:	2e04      	cmp	r6, #4
 8008c5a:	d074      	beq.n	8008d46 <ucdr_serialize_uint64_t+0x16e>
 8008c5c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008c60:	716b      	strb	r3, [r5, #5]
 8008c62:	2e05      	cmp	r6, #5
 8008c64:	d073      	beq.n	8008d4e <ucdr_serialize_uint64_t+0x176>
 8008c66:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008c6a:	71ab      	strb	r3, [r5, #6]
 8008c6c:	2e06      	cmp	r6, #6
 8008c6e:	d072      	beq.n	8008d56 <ucdr_serialize_uint64_t+0x17e>
 8008c70:	f89d 3000 	ldrb.w	r3, [sp]
 8008c74:	71eb      	strb	r3, [r5, #7]
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	68a2      	ldr	r2, [r4, #8]
 8008c7a:	7da0      	ldrb	r0, [r4, #22]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	1b9e      	subs	r6, r3, r6
 8008c80:	4442      	add	r2, r8
 8008c82:	2308      	movs	r3, #8
 8008c84:	f080 0001 	eor.w	r0, r0, #1
 8008c88:	60a2      	str	r2, [r4, #8]
 8008c8a:	6126      	str	r6, [r4, #16]
 8008c8c:	7563      	strb	r3, [r4, #21]
 8008c8e:	b002      	add	sp, #8
 8008c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c94:	2108      	movs	r1, #8
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 fa96 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008c9c:	b350      	cbz	r0, 8008cf4 <ucdr_serialize_uint64_t+0x11c>
 8008c9e:	7d23      	ldrb	r3, [r4, #20]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d02d      	beq.n	8008d00 <ucdr_serialize_uint64_t+0x128>
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	68a3      	ldr	r3, [r4, #8]
 8008cae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008cb2:	705a      	strb	r2, [r3, #1]
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008cba:	709a      	strb	r2, [r3, #2]
 8008cbc:	68a3      	ldr	r3, [r4, #8]
 8008cbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008cc2:	70da      	strb	r2, [r3, #3]
 8008cc4:	68a3      	ldr	r3, [r4, #8]
 8008cc6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008cca:	711a      	strb	r2, [r3, #4]
 8008ccc:	68a3      	ldr	r3, [r4, #8]
 8008cce:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008cd2:	715a      	strb	r2, [r3, #5]
 8008cd4:	68a3      	ldr	r3, [r4, #8]
 8008cd6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008cda:	719a      	strb	r2, [r3, #6]
 8008cdc:	68a3      	ldr	r3, [r4, #8]
 8008cde:	f89d 2000 	ldrb.w	r2, [sp]
 8008ce2:	71da      	strb	r2, [r3, #7]
 8008ce4:	68a2      	ldr	r2, [r4, #8]
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	3208      	adds	r2, #8
 8008cea:	3308      	adds	r3, #8
 8008cec:	2108      	movs	r1, #8
 8008cee:	60a2      	str	r2, [r4, #8]
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	7561      	strb	r1, [r4, #21]
 8008cf4:	7da0      	ldrb	r0, [r4, #22]
 8008cf6:	f080 0001 	eor.w	r0, r0, #1
 8008cfa:	b002      	add	sp, #8
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	466b      	mov	r3, sp
 8008d02:	cb03      	ldmia	r3!, {r0, r1}
 8008d04:	68a3      	ldr	r3, [r4, #8]
 8008d06:	6018      	str	r0, [r3, #0]
 8008d08:	6059      	str	r1, [r3, #4]
 8008d0a:	e7eb      	b.n	8008ce4 <ucdr_serialize_uint64_t+0x10c>
 8008d0c:	68a2      	ldr	r2, [r4, #8]
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	7da0      	ldrb	r0, [r4, #22]
 8008d12:	7567      	strb	r7, [r4, #21]
 8008d14:	1b92      	subs	r2, r2, r6
 8008d16:	1b9b      	subs	r3, r3, r6
 8008d18:	f080 0001 	eor.w	r0, r0, #1
 8008d1c:	60a2      	str	r2, [r4, #8]
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	b002      	add	sp, #8
 8008d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d2c:	701a      	strb	r2, [r3, #0]
 8008d2e:	68a3      	ldr	r3, [r4, #8]
 8008d30:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	68a3      	ldr	r3, [r4, #8]
 8008d50:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	68a3      	ldr	r3, [r4, #8]
 8008d58:	f89d 2000 	ldrb.w	r2, [sp]
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	e78a      	b.n	8008c76 <ucdr_serialize_uint64_t+0x9e>
 8008d60:	4628      	mov	r0, r5
 8008d62:	466d      	mov	r5, sp
 8008d64:	4629      	mov	r1, r5
 8008d66:	4632      	mov	r2, r6
 8008d68:	f007 fe4b 	bl	8010a02 <memcpy>
 8008d6c:	68a0      	ldr	r0, [r4, #8]
 8008d6e:	4642      	mov	r2, r8
 8008d70:	19a9      	adds	r1, r5, r6
 8008d72:	f007 fe46 	bl	8010a02 <memcpy>
 8008d76:	e77e      	b.n	8008c76 <ucdr_serialize_uint64_t+0x9e>

08008d78 <ucdr_serialize_int16_t>:
 8008d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	460b      	mov	r3, r1
 8008d80:	2102      	movs	r1, #2
 8008d82:	4604      	mov	r4, r0
 8008d84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008d88:	f000 fa72 	bl	8009270 <ucdr_buffer_alignment>
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	7d67      	ldrb	r7, [r4, #21]
 8008d92:	f000 fab1 	bl	80092f8 <ucdr_advance_buffer>
 8008d96:	2102      	movs	r1, #2
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 fa09 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008d9e:	bb78      	cbnz	r0, 8008e00 <ucdr_serialize_int16_t+0x88>
 8008da0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008da4:	42ab      	cmp	r3, r5
 8008da6:	d926      	bls.n	8008df6 <ucdr_serialize_int16_t+0x7e>
 8008da8:	1b5e      	subs	r6, r3, r5
 8008daa:	60a3      	str	r3, [r4, #8]
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	f1c6 0802 	rsb	r8, r6, #2
 8008db2:	4433      	add	r3, r6
 8008db4:	6123      	str	r3, [r4, #16]
 8008db6:	4641      	mov	r1, r8
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fa05 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d03b      	beq.n	8008e3a <ucdr_serialize_int16_t+0xc2>
 8008dc2:	7d23      	ldrb	r3, [r4, #20]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d04a      	beq.n	8008e5e <ucdr_serialize_int16_t+0xe6>
 8008dc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008dcc:	702b      	strb	r3, [r5, #0]
 8008dce:	2e00      	cmp	r6, #0
 8008dd0:	d040      	beq.n	8008e54 <ucdr_serialize_int16_t+0xdc>
 8008dd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008dd6:	706b      	strb	r3, [r5, #1]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	68a2      	ldr	r2, [r4, #8]
 8008ddc:	7da0      	ldrb	r0, [r4, #22]
 8008dde:	3302      	adds	r3, #2
 8008de0:	1b9e      	subs	r6, r3, r6
 8008de2:	4442      	add	r2, r8
 8008de4:	2302      	movs	r3, #2
 8008de6:	f080 0001 	eor.w	r0, r0, #1
 8008dea:	60a2      	str	r2, [r4, #8]
 8008dec:	6126      	str	r6, [r4, #16]
 8008dee:	7563      	strb	r3, [r4, #21]
 8008df0:	b002      	add	sp, #8
 8008df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df6:	2102      	movs	r1, #2
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 f9e5 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008dfe:	b190      	cbz	r0, 8008e26 <ucdr_serialize_int16_t+0xae>
 8008e00:	7d23      	ldrb	r3, [r4, #20]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	68a3      	ldr	r3, [r4, #8]
 8008e06:	d014      	beq.n	8008e32 <ucdr_serialize_int16_t+0xba>
 8008e08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e14:	705a      	strb	r2, [r3, #1]
 8008e16:	68a2      	ldr	r2, [r4, #8]
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	3202      	adds	r2, #2
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	2102      	movs	r1, #2
 8008e20:	60a2      	str	r2, [r4, #8]
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	7561      	strb	r1, [r4, #21]
 8008e26:	7da0      	ldrb	r0, [r4, #22]
 8008e28:	f080 0001 	eor.w	r0, r0, #1
 8008e2c:	b002      	add	sp, #8
 8008e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e36:	801a      	strh	r2, [r3, #0]
 8008e38:	e7ed      	b.n	8008e16 <ucdr_serialize_int16_t+0x9e>
 8008e3a:	68a2      	ldr	r2, [r4, #8]
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	7da0      	ldrb	r0, [r4, #22]
 8008e40:	7567      	strb	r7, [r4, #21]
 8008e42:	1b92      	subs	r2, r2, r6
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	f080 0001 	eor.w	r0, r0, #1
 8008e4a:	60a2      	str	r2, [r4, #8]
 8008e4c:	6123      	str	r3, [r4, #16]
 8008e4e:	b002      	add	sp, #8
 8008e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e54:	68a3      	ldr	r3, [r4, #8]
 8008e56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e5a:	701a      	strb	r2, [r3, #0]
 8008e5c:	e7bc      	b.n	8008dd8 <ucdr_serialize_int16_t+0x60>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f10d 0506 	add.w	r5, sp, #6
 8008e64:	4629      	mov	r1, r5
 8008e66:	4632      	mov	r2, r6
 8008e68:	f007 fdcb 	bl	8010a02 <memcpy>
 8008e6c:	68a0      	ldr	r0, [r4, #8]
 8008e6e:	4642      	mov	r2, r8
 8008e70:	19a9      	adds	r1, r5, r6
 8008e72:	f007 fdc6 	bl	8010a02 <memcpy>
 8008e76:	e7af      	b.n	8008dd8 <ucdr_serialize_int16_t+0x60>

08008e78 <ucdr_deserialize_int16_t>:
 8008e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	2102      	movs	r1, #2
 8008e80:	4604      	mov	r4, r0
 8008e82:	f000 f9f5 	bl	8009270 <ucdr_buffer_alignment>
 8008e86:	4601      	mov	r1, r0
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008e8e:	f000 fa33 	bl	80092f8 <ucdr_advance_buffer>
 8008e92:	2102      	movs	r1, #2
 8008e94:	4620      	mov	r0, r4
 8008e96:	f000 f98b 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008e9a:	bb60      	cbnz	r0, 8008ef6 <ucdr_deserialize_int16_t+0x7e>
 8008e9c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008ea0:	42be      	cmp	r6, r7
 8008ea2:	d923      	bls.n	8008eec <ucdr_deserialize_int16_t+0x74>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	60a6      	str	r6, [r4, #8]
 8008ea8:	1bf6      	subs	r6, r6, r7
 8008eaa:	4433      	add	r3, r6
 8008eac:	f1c6 0902 	rsb	r9, r6, #2
 8008eb0:	6123      	str	r3, [r4, #16]
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 f987 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d034      	beq.n	8008f28 <ucdr_deserialize_int16_t+0xb0>
 8008ebe:	7d23      	ldrb	r3, [r4, #20]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d042      	beq.n	8008f4a <ucdr_deserialize_int16_t+0xd2>
 8008ec4:	787b      	ldrb	r3, [r7, #1]
 8008ec6:	702b      	strb	r3, [r5, #0]
 8008ec8:	2e00      	cmp	r6, #0
 8008eca:	d03a      	beq.n	8008f42 <ucdr_deserialize_int16_t+0xca>
 8008ecc:	783b      	ldrb	r3, [r7, #0]
 8008ece:	706b      	strb	r3, [r5, #1]
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	68a2      	ldr	r2, [r4, #8]
 8008ed4:	7da0      	ldrb	r0, [r4, #22]
 8008ed6:	2102      	movs	r1, #2
 8008ed8:	3302      	adds	r3, #2
 8008eda:	444a      	add	r2, r9
 8008edc:	1b9b      	subs	r3, r3, r6
 8008ede:	7561      	strb	r1, [r4, #21]
 8008ee0:	60a2      	str	r2, [r4, #8]
 8008ee2:	6123      	str	r3, [r4, #16]
 8008ee4:	f080 0001 	eor.w	r0, r0, #1
 8008ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eec:	2102      	movs	r1, #2
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 f96a 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008ef4:	b180      	cbz	r0, 8008f18 <ucdr_deserialize_int16_t+0xa0>
 8008ef6:	7d23      	ldrb	r3, [r4, #20]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	68a3      	ldr	r3, [r4, #8]
 8008efc:	d011      	beq.n	8008f22 <ucdr_deserialize_int16_t+0xaa>
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	702b      	strb	r3, [r5, #0]
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	706b      	strb	r3, [r5, #1]
 8008f08:	68a2      	ldr	r2, [r4, #8]
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	3202      	adds	r2, #2
 8008f0e:	3302      	adds	r3, #2
 8008f10:	2102      	movs	r1, #2
 8008f12:	60a2      	str	r2, [r4, #8]
 8008f14:	6123      	str	r3, [r4, #16]
 8008f16:	7561      	strb	r1, [r4, #21]
 8008f18:	7da0      	ldrb	r0, [r4, #22]
 8008f1a:	f080 0001 	eor.w	r0, r0, #1
 8008f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	802b      	strh	r3, [r5, #0]
 8008f26:	e7ef      	b.n	8008f08 <ucdr_deserialize_int16_t+0x90>
 8008f28:	68a2      	ldr	r2, [r4, #8]
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	7da0      	ldrb	r0, [r4, #22]
 8008f2e:	f884 8015 	strb.w	r8, [r4, #21]
 8008f32:	1b92      	subs	r2, r2, r6
 8008f34:	1b9b      	subs	r3, r3, r6
 8008f36:	60a2      	str	r2, [r4, #8]
 8008f38:	6123      	str	r3, [r4, #16]
 8008f3a:	f080 0001 	eor.w	r0, r0, #1
 8008f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	706b      	strb	r3, [r5, #1]
 8008f48:	e7c2      	b.n	8008ed0 <ucdr_deserialize_int16_t+0x58>
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f007 fd57 	bl	8010a02 <memcpy>
 8008f54:	68a1      	ldr	r1, [r4, #8]
 8008f56:	464a      	mov	r2, r9
 8008f58:	19a8      	adds	r0, r5, r6
 8008f5a:	f007 fd52 	bl	8010a02 <memcpy>
 8008f5e:	e7b7      	b.n	8008ed0 <ucdr_deserialize_int16_t+0x58>

08008f60 <ucdr_serialize_int32_t>:
 8008f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	4604      	mov	r4, r0
 8008f68:	9101      	str	r1, [sp, #4]
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	f000 f980 	bl	8009270 <ucdr_buffer_alignment>
 8008f70:	4601      	mov	r1, r0
 8008f72:	4620      	mov	r0, r4
 8008f74:	7d67      	ldrb	r7, [r4, #21]
 8008f76:	f000 f9bf 	bl	80092f8 <ucdr_advance_buffer>
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 f917 	bl	80091b0 <ucdr_check_buffer_available_for>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d139      	bne.n	8008ffa <ucdr_serialize_int32_t+0x9a>
 8008f86:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008f8a:	42ab      	cmp	r3, r5
 8008f8c:	d930      	bls.n	8008ff0 <ucdr_serialize_int32_t+0x90>
 8008f8e:	1b5e      	subs	r6, r3, r5
 8008f90:	60a3      	str	r3, [r4, #8]
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	f1c6 0804 	rsb	r8, r6, #4
 8008f98:	4433      	add	r3, r6
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	4641      	mov	r1, r8
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 f912 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d04c      	beq.n	8009042 <ucdr_serialize_int32_t+0xe2>
 8008fa8:	7d23      	ldrb	r3, [r4, #20]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d063      	beq.n	8009076 <ucdr_serialize_int32_t+0x116>
 8008fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008fb2:	702b      	strb	r3, [r5, #0]
 8008fb4:	2e00      	cmp	r6, #0
 8008fb6:	d051      	beq.n	800905c <ucdr_serialize_int32_t+0xfc>
 8008fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008fbc:	706b      	strb	r3, [r5, #1]
 8008fbe:	2e01      	cmp	r6, #1
 8008fc0:	d050      	beq.n	8009064 <ucdr_serialize_int32_t+0x104>
 8008fc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008fc6:	70ab      	strb	r3, [r5, #2]
 8008fc8:	2e02      	cmp	r6, #2
 8008fca:	d04f      	beq.n	800906c <ucdr_serialize_int32_t+0x10c>
 8008fcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008fd0:	70eb      	strb	r3, [r5, #3]
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	68a2      	ldr	r2, [r4, #8]
 8008fd6:	7da0      	ldrb	r0, [r4, #22]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	1b9e      	subs	r6, r3, r6
 8008fdc:	4442      	add	r2, r8
 8008fde:	2304      	movs	r3, #4
 8008fe0:	f080 0001 	eor.w	r0, r0, #1
 8008fe4:	60a2      	str	r2, [r4, #8]
 8008fe6:	6126      	str	r6, [r4, #16]
 8008fe8:	7563      	strb	r3, [r4, #21]
 8008fea:	b002      	add	sp, #8
 8008fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff0:	2104      	movs	r1, #4
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 f8e8 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8008ff8:	b1d0      	cbz	r0, 8009030 <ucdr_serialize_int32_t+0xd0>
 8008ffa:	7d23      	ldrb	r3, [r4, #20]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	68a3      	ldr	r3, [r4, #8]
 8009000:	d01c      	beq.n	800903c <ucdr_serialize_int32_t+0xdc>
 8009002:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	68a3      	ldr	r3, [r4, #8]
 800900a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800900e:	705a      	strb	r2, [r3, #1]
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009016:	709a      	strb	r2, [r3, #2]
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800901e:	70da      	strb	r2, [r3, #3]
 8009020:	68a2      	ldr	r2, [r4, #8]
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	3204      	adds	r2, #4
 8009026:	3304      	adds	r3, #4
 8009028:	2104      	movs	r1, #4
 800902a:	60a2      	str	r2, [r4, #8]
 800902c:	6123      	str	r3, [r4, #16]
 800902e:	7561      	strb	r1, [r4, #21]
 8009030:	7da0      	ldrb	r0, [r4, #22]
 8009032:	f080 0001 	eor.w	r0, r0, #1
 8009036:	b002      	add	sp, #8
 8009038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800903c:	9a01      	ldr	r2, [sp, #4]
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	e7ee      	b.n	8009020 <ucdr_serialize_int32_t+0xc0>
 8009042:	68a2      	ldr	r2, [r4, #8]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	7da0      	ldrb	r0, [r4, #22]
 8009048:	7567      	strb	r7, [r4, #21]
 800904a:	1b92      	subs	r2, r2, r6
 800904c:	1b9b      	subs	r3, r3, r6
 800904e:	f080 0001 	eor.w	r0, r0, #1
 8009052:	60a2      	str	r2, [r4, #8]
 8009054:	6123      	str	r3, [r4, #16]
 8009056:	b002      	add	sp, #8
 8009058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905c:	68a3      	ldr	r3, [r4, #8]
 800905e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	68a3      	ldr	r3, [r4, #8]
 8009066:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800906a:	701a      	strb	r2, [r3, #0]
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	e7ad      	b.n	8008fd2 <ucdr_serialize_int32_t+0x72>
 8009076:	4628      	mov	r0, r5
 8009078:	ad01      	add	r5, sp, #4
 800907a:	4629      	mov	r1, r5
 800907c:	4632      	mov	r2, r6
 800907e:	f007 fcc0 	bl	8010a02 <memcpy>
 8009082:	68a0      	ldr	r0, [r4, #8]
 8009084:	4642      	mov	r2, r8
 8009086:	19a9      	adds	r1, r5, r6
 8009088:	f007 fcbb 	bl	8010a02 <memcpy>
 800908c:	e7a1      	b.n	8008fd2 <ucdr_serialize_int32_t+0x72>
 800908e:	bf00      	nop

08009090 <ucdr_deserialize_int32_t>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	460d      	mov	r5, r1
 8009096:	2104      	movs	r1, #4
 8009098:	4604      	mov	r4, r0
 800909a:	f000 f8e9 	bl	8009270 <ucdr_buffer_alignment>
 800909e:	4601      	mov	r1, r0
 80090a0:	4620      	mov	r0, r4
 80090a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80090a6:	f000 f927 	bl	80092f8 <ucdr_advance_buffer>
 80090aa:	2104      	movs	r1, #4
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 f87f 	bl	80091b0 <ucdr_check_buffer_available_for>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d138      	bne.n	8009128 <ucdr_deserialize_int32_t+0x98>
 80090b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80090ba:	42b7      	cmp	r7, r6
 80090bc:	d92f      	bls.n	800911e <ucdr_deserialize_int32_t+0x8e>
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	60a7      	str	r7, [r4, #8]
 80090c2:	1bbf      	subs	r7, r7, r6
 80090c4:	443b      	add	r3, r7
 80090c6:	f1c7 0904 	rsb	r9, r7, #4
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	4649      	mov	r1, r9
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 f87a 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d046      	beq.n	8009166 <ucdr_deserialize_int32_t+0xd6>
 80090d8:	7d23      	ldrb	r3, [r4, #20]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d05c      	beq.n	8009198 <ucdr_deserialize_int32_t+0x108>
 80090de:	78f3      	ldrb	r3, [r6, #3]
 80090e0:	702b      	strb	r3, [r5, #0]
 80090e2:	2f00      	cmp	r7, #0
 80090e4:	d04c      	beq.n	8009180 <ucdr_deserialize_int32_t+0xf0>
 80090e6:	78b3      	ldrb	r3, [r6, #2]
 80090e8:	706b      	strb	r3, [r5, #1]
 80090ea:	2f01      	cmp	r7, #1
 80090ec:	f105 0302 	add.w	r3, r5, #2
 80090f0:	d04a      	beq.n	8009188 <ucdr_deserialize_int32_t+0xf8>
 80090f2:	7873      	ldrb	r3, [r6, #1]
 80090f4:	70ab      	strb	r3, [r5, #2]
 80090f6:	2f02      	cmp	r7, #2
 80090f8:	f105 0303 	add.w	r3, r5, #3
 80090fc:	d048      	beq.n	8009190 <ucdr_deserialize_int32_t+0x100>
 80090fe:	7833      	ldrb	r3, [r6, #0]
 8009100:	70eb      	strb	r3, [r5, #3]
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	68a2      	ldr	r2, [r4, #8]
 8009106:	7da0      	ldrb	r0, [r4, #22]
 8009108:	2104      	movs	r1, #4
 800910a:	3304      	adds	r3, #4
 800910c:	444a      	add	r2, r9
 800910e:	1bdb      	subs	r3, r3, r7
 8009110:	7561      	strb	r1, [r4, #21]
 8009112:	60a2      	str	r2, [r4, #8]
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	f080 0001 	eor.w	r0, r0, #1
 800911a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911e:	2104      	movs	r1, #4
 8009120:	4620      	mov	r0, r4
 8009122:	f000 f851 	bl	80091c8 <ucdr_check_final_buffer_behavior>
 8009126:	b1b0      	cbz	r0, 8009156 <ucdr_deserialize_int32_t+0xc6>
 8009128:	7d23      	ldrb	r3, [r4, #20]
 800912a:	2b01      	cmp	r3, #1
 800912c:	68a3      	ldr	r3, [r4, #8]
 800912e:	d017      	beq.n	8009160 <ucdr_deserialize_int32_t+0xd0>
 8009130:	78db      	ldrb	r3, [r3, #3]
 8009132:	702b      	strb	r3, [r5, #0]
 8009134:	68a3      	ldr	r3, [r4, #8]
 8009136:	789b      	ldrb	r3, [r3, #2]
 8009138:	706b      	strb	r3, [r5, #1]
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	70ab      	strb	r3, [r5, #2]
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	70eb      	strb	r3, [r5, #3]
 8009146:	68a2      	ldr	r2, [r4, #8]
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	3204      	adds	r2, #4
 800914c:	3304      	adds	r3, #4
 800914e:	2104      	movs	r1, #4
 8009150:	60a2      	str	r2, [r4, #8]
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	7561      	strb	r1, [r4, #21]
 8009156:	7da0      	ldrb	r0, [r4, #22]
 8009158:	f080 0001 	eor.w	r0, r0, #1
 800915c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	e7ef      	b.n	8009146 <ucdr_deserialize_int32_t+0xb6>
 8009166:	68a2      	ldr	r2, [r4, #8]
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	7da0      	ldrb	r0, [r4, #22]
 800916c:	f884 8015 	strb.w	r8, [r4, #21]
 8009170:	1bd2      	subs	r2, r2, r7
 8009172:	1bdb      	subs	r3, r3, r7
 8009174:	60a2      	str	r2, [r4, #8]
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	f080 0001 	eor.w	r0, r0, #1
 800917c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009180:	68a3      	ldr	r3, [r4, #8]
 8009182:	789b      	ldrb	r3, [r3, #2]
 8009184:	706b      	strb	r3, [r5, #1]
 8009186:	1cab      	adds	r3, r5, #2
 8009188:	68a2      	ldr	r2, [r4, #8]
 800918a:	7852      	ldrb	r2, [r2, #1]
 800918c:	f803 2b01 	strb.w	r2, [r3], #1
 8009190:	68a2      	ldr	r2, [r4, #8]
 8009192:	7812      	ldrb	r2, [r2, #0]
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	e7b4      	b.n	8009102 <ucdr_deserialize_int32_t+0x72>
 8009198:	4631      	mov	r1, r6
 800919a:	463a      	mov	r2, r7
 800919c:	4628      	mov	r0, r5
 800919e:	f007 fc30 	bl	8010a02 <memcpy>
 80091a2:	68a1      	ldr	r1, [r4, #8]
 80091a4:	464a      	mov	r2, r9
 80091a6:	19e8      	adds	r0, r5, r7
 80091a8:	f007 fc2b 	bl	8010a02 <memcpy>
 80091ac:	e7a9      	b.n	8009102 <ucdr_deserialize_int32_t+0x72>
 80091ae:	bf00      	nop

080091b0 <ucdr_check_buffer_available_for>:
 80091b0:	7d83      	ldrb	r3, [r0, #22]
 80091b2:	b93b      	cbnz	r3, 80091c4 <ucdr_check_buffer_available_for+0x14>
 80091b4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80091b8:	4419      	add	r1, r3
 80091ba:	4288      	cmp	r0, r1
 80091bc:	bf34      	ite	cc
 80091be:	2000      	movcc	r0, #0
 80091c0:	2001      	movcs	r0, #1
 80091c2:	4770      	bx	lr
 80091c4:	2000      	movs	r0, #0
 80091c6:	4770      	bx	lr

080091c8 <ucdr_check_final_buffer_behavior>:
 80091c8:	7d83      	ldrb	r3, [r0, #22]
 80091ca:	b943      	cbnz	r3, 80091de <ucdr_check_final_buffer_behavior+0x16>
 80091cc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80091d0:	4291      	cmp	r1, r2
 80091d2:	b510      	push	{r4, lr}
 80091d4:	4604      	mov	r4, r0
 80091d6:	d205      	bcs.n	80091e4 <ucdr_check_final_buffer_behavior+0x1c>
 80091d8:	2301      	movs	r3, #1
 80091da:	4618      	mov	r0, r3
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	2300      	movs	r3, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	4770      	bx	lr
 80091e4:	6982      	ldr	r2, [r0, #24]
 80091e6:	b13a      	cbz	r2, 80091f8 <ucdr_check_final_buffer_behavior+0x30>
 80091e8:	69c1      	ldr	r1, [r0, #28]
 80091ea:	4790      	blx	r2
 80091ec:	f080 0301 	eor.w	r3, r0, #1
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	75a0      	strb	r0, [r4, #22]
 80091f4:	4618      	mov	r0, r3
 80091f6:	bd10      	pop	{r4, pc}
 80091f8:	2001      	movs	r0, #1
 80091fa:	75a0      	strb	r0, [r4, #22]
 80091fc:	e7fa      	b.n	80091f4 <ucdr_check_final_buffer_behavior+0x2c>
 80091fe:	bf00      	nop

08009200 <ucdr_set_on_full_buffer_callback>:
 8009200:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop

08009208 <ucdr_init_buffer_origin_offset_endian>:
 8009208:	b410      	push	{r4}
 800920a:	9c01      	ldr	r4, [sp, #4]
 800920c:	6001      	str	r1, [r0, #0]
 800920e:	440a      	add	r2, r1
 8009210:	6042      	str	r2, [r0, #4]
 8009212:	190a      	adds	r2, r1, r4
 8009214:	441c      	add	r4, r3
 8009216:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800921a:	6082      	str	r2, [r0, #8]
 800921c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009220:	7503      	strb	r3, [r0, #20]
 8009222:	2200      	movs	r2, #0
 8009224:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800922c:	7542      	strb	r2, [r0, #21]
 800922e:	7582      	strb	r2, [r0, #22]
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop

08009234 <ucdr_init_buffer_origin_offset>:
 8009234:	b510      	push	{r4, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	9c04      	ldr	r4, [sp, #16]
 800923a:	9400      	str	r4, [sp, #0]
 800923c:	2401      	movs	r4, #1
 800923e:	9401      	str	r4, [sp, #4]
 8009240:	f7ff ffe2 	bl	8009208 <ucdr_init_buffer_origin_offset_endian>
 8009244:	b002      	add	sp, #8
 8009246:	bd10      	pop	{r4, pc}

08009248 <ucdr_init_buffer_origin>:
 8009248:	b510      	push	{r4, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	2400      	movs	r4, #0
 800924e:	9400      	str	r4, [sp, #0]
 8009250:	f7ff fff0 	bl	8009234 <ucdr_init_buffer_origin_offset>
 8009254:	b002      	add	sp, #8
 8009256:	bd10      	pop	{r4, pc}

08009258 <ucdr_init_buffer>:
 8009258:	2300      	movs	r3, #0
 800925a:	f7ff bff5 	b.w	8009248 <ucdr_init_buffer_origin>
 800925e:	bf00      	nop

08009260 <ucdr_alignment>:
 8009260:	fbb0 f3f1 	udiv	r3, r0, r1
 8009264:	fb03 0011 	mls	r0, r3, r1, r0
 8009268:	1a08      	subs	r0, r1, r0
 800926a:	3901      	subs	r1, #1
 800926c:	4008      	ands	r0, r1
 800926e:	4770      	bx	lr

08009270 <ucdr_buffer_alignment>:
 8009270:	7d43      	ldrb	r3, [r0, #21]
 8009272:	428b      	cmp	r3, r1
 8009274:	d208      	bcs.n	8009288 <ucdr_buffer_alignment+0x18>
 8009276:	6900      	ldr	r0, [r0, #16]
 8009278:	fbb0 f3f1 	udiv	r3, r0, r1
 800927c:	fb01 0013 	mls	r0, r1, r3, r0
 8009280:	1a08      	subs	r0, r1, r0
 8009282:	3901      	subs	r1, #1
 8009284:	4008      	ands	r0, r1
 8009286:	4770      	bx	lr
 8009288:	2000      	movs	r0, #0
 800928a:	4770      	bx	lr

0800928c <ucdr_align_to>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4604      	mov	r4, r0
 8009290:	460d      	mov	r5, r1
 8009292:	f7ff ffed 	bl	8009270 <ucdr_buffer_alignment>
 8009296:	68a3      	ldr	r3, [r4, #8]
 8009298:	6921      	ldr	r1, [r4, #16]
 800929a:	7565      	strb	r5, [r4, #21]
 800929c:	181a      	adds	r2, r3, r0
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	4293      	cmp	r3, r2
 80092a2:	4408      	add	r0, r1
 80092a4:	bf28      	it	cs
 80092a6:	4613      	movcs	r3, r2
 80092a8:	6120      	str	r0, [r4, #16]
 80092aa:	60a3      	str	r3, [r4, #8]
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	bf00      	nop

080092b0 <ucdr_buffer_length>:
 80092b0:	6882      	ldr	r2, [r0, #8]
 80092b2:	6800      	ldr	r0, [r0, #0]
 80092b4:	1a10      	subs	r0, r2, r0
 80092b6:	4770      	bx	lr

080092b8 <ucdr_buffer_remaining>:
 80092b8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80092bc:	1a10      	subs	r0, r2, r0
 80092be:	4770      	bx	lr

080092c0 <ucdr_check_final_buffer_behavior_array>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	7d83      	ldrb	r3, [r0, #22]
 80092c4:	b963      	cbnz	r3, 80092e0 <ucdr_check_final_buffer_behavior_array+0x20>
 80092c6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	4604      	mov	r4, r0
 80092ce:	460d      	mov	r5, r1
 80092d0:	d308      	bcc.n	80092e4 <ucdr_check_final_buffer_behavior_array+0x24>
 80092d2:	b139      	cbz	r1, 80092e4 <ucdr_check_final_buffer_behavior_array+0x24>
 80092d4:	6983      	ldr	r3, [r0, #24]
 80092d6:	b163      	cbz	r3, 80092f2 <ucdr_check_final_buffer_behavior_array+0x32>
 80092d8:	69c1      	ldr	r1, [r0, #28]
 80092da:	4798      	blx	r3
 80092dc:	75a0      	strb	r0, [r4, #22]
 80092de:	b108      	cbz	r0, 80092e4 <ucdr_check_final_buffer_behavior_array+0x24>
 80092e0:	2000      	movs	r0, #0
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	4620      	mov	r0, r4
 80092e6:	f7ff ffe7 	bl	80092b8 <ucdr_buffer_remaining>
 80092ea:	42a8      	cmp	r0, r5
 80092ec:	bf28      	it	cs
 80092ee:	4628      	movcs	r0, r5
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	2301      	movs	r3, #1
 80092f4:	7583      	strb	r3, [r0, #22]
 80092f6:	e7f3      	b.n	80092e0 <ucdr_check_final_buffer_behavior_array+0x20>

080092f8 <ucdr_advance_buffer>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4604      	mov	r4, r0
 80092fc:	460d      	mov	r5, r1
 80092fe:	f7ff ff57 	bl	80091b0 <ucdr_check_buffer_available_for>
 8009302:	b178      	cbz	r0, 8009324 <ucdr_advance_buffer+0x2c>
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	68a2      	ldr	r2, [r4, #8]
 8009308:	442b      	add	r3, r5
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	2301      	movs	r3, #1
 800930e:	442a      	add	r2, r5
 8009310:	7563      	strb	r3, [r4, #21]
 8009312:	60a2      	str	r2, [r4, #8]
 8009314:	bd38      	pop	{r3, r4, r5, pc}
 8009316:	68a2      	ldr	r2, [r4, #8]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	4402      	add	r2, r0
 800931c:	4403      	add	r3, r0
 800931e:	1a2d      	subs	r5, r5, r0
 8009320:	60a2      	str	r2, [r4, #8]
 8009322:	6123      	str	r3, [r4, #16]
 8009324:	4629      	mov	r1, r5
 8009326:	2201      	movs	r2, #1
 8009328:	4620      	mov	r0, r4
 800932a:	f7ff ffc9 	bl	80092c0 <ucdr_check_final_buffer_behavior_array>
 800932e:	2800      	cmp	r0, #0
 8009330:	d1f1      	bne.n	8009316 <ucdr_advance_buffer+0x1e>
 8009332:	2301      	movs	r3, #1
 8009334:	7563      	strb	r3, [r4, #21]
 8009336:	bd38      	pop	{r3, r4, r5, pc}

08009338 <uxr_buffer_delete_entity>:
 8009338:	b510      	push	{r4, lr}
 800933a:	2300      	movs	r3, #0
 800933c:	b08e      	sub	sp, #56	; 0x38
 800933e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009342:	2303      	movs	r3, #3
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	2204      	movs	r2, #4
 8009348:	ab06      	add	r3, sp, #24
 800934a:	4604      	mov	r4, r0
 800934c:	9103      	str	r1, [sp, #12]
 800934e:	f001 f86f 	bl	800a430 <uxr_prepare_stream_to_write_submessage>
 8009352:	b918      	cbnz	r0, 800935c <uxr_buffer_delete_entity+0x24>
 8009354:	4604      	mov	r4, r0
 8009356:	4620      	mov	r0, r4
 8009358:	b00e      	add	sp, #56	; 0x38
 800935a:	bd10      	pop	{r4, pc}
 800935c:	9902      	ldr	r1, [sp, #8]
 800935e:	aa05      	add	r2, sp, #20
 8009360:	4620      	mov	r0, r4
 8009362:	f001 f99b 	bl	800a69c <uxr_init_base_object_request>
 8009366:	a905      	add	r1, sp, #20
 8009368:	4604      	mov	r4, r0
 800936a:	a806      	add	r0, sp, #24
 800936c:	f002 fb00 	bl	800b970 <uxr_serialize_DELETE_Payload>
 8009370:	4620      	mov	r0, r4
 8009372:	b00e      	add	sp, #56	; 0x38
 8009374:	bd10      	pop	{r4, pc}
 8009376:	bf00      	nop

08009378 <uxr_common_create_entity>:
 8009378:	b510      	push	{r4, lr}
 800937a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800937e:	b08c      	sub	sp, #48	; 0x30
 8009380:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009384:	f1bc 0f01 	cmp.w	ip, #1
 8009388:	bf0c      	ite	eq
 800938a:	f003 0201 	andeq.w	r2, r3, #1
 800938e:	2200      	movne	r2, #0
 8009390:	330e      	adds	r3, #14
 8009392:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8009396:	9101      	str	r1, [sp, #4]
 8009398:	441a      	add	r2, r3
 800939a:	2301      	movs	r3, #1
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	9903      	ldr	r1, [sp, #12]
 80093a0:	ab04      	add	r3, sp, #16
 80093a2:	b292      	uxth	r2, r2
 80093a4:	4604      	mov	r4, r0
 80093a6:	f001 f843 	bl	800a430 <uxr_prepare_stream_to_write_submessage>
 80093aa:	b918      	cbnz	r0, 80093b4 <uxr_common_create_entity+0x3c>
 80093ac:	4604      	mov	r4, r0
 80093ae:	4620      	mov	r0, r4
 80093b0:	b00c      	add	sp, #48	; 0x30
 80093b2:	bd10      	pop	{r4, pc}
 80093b4:	9902      	ldr	r1, [sp, #8]
 80093b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093b8:	4620      	mov	r0, r4
 80093ba:	f001 f96f 	bl	800a69c <uxr_init_base_object_request>
 80093be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093c0:	4604      	mov	r4, r0
 80093c2:	a804      	add	r0, sp, #16
 80093c4:	f002 fa30 	bl	800b828 <uxr_serialize_CREATE_Payload>
 80093c8:	4620      	mov	r0, r4
 80093ca:	b00c      	add	sp, #48	; 0x30
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	bf00      	nop

080093d0 <uxr_buffer_create_participant_bin>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80093d6:	ac11      	add	r4, sp, #68	; 0x44
 80093d8:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 80093dc:	2303      	movs	r3, #3
 80093de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80093e2:	7223      	strb	r3, [r4, #8]
 80093e4:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 80093e6:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 80093ea:	2201      	movs	r2, #1
 80093ec:	2100      	movs	r1, #0
 80093ee:	4605      	mov	r5, r0
 80093f0:	7122      	strb	r2, [r4, #4]
 80093f2:	f88d 1014 	strb.w	r1, [sp, #20]
 80093f6:	b1cb      	cbz	r3, 800942c <uxr_buffer_create_participant_bin+0x5c>
 80093f8:	f88d 201c 	strb.w	r2, [sp, #28]
 80093fc:	9308      	str	r3, [sp, #32]
 80093fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009402:	a915      	add	r1, sp, #84	; 0x54
 8009404:	a809      	add	r0, sp, #36	; 0x24
 8009406:	f7ff ff27 	bl	8009258 <ucdr_init_buffer>
 800940a:	a905      	add	r1, sp, #20
 800940c:	a809      	add	r0, sp, #36	; 0x24
 800940e:	f001 fed9 	bl	800b1c4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009414:	9600      	str	r6, [sp, #0]
 8009416:	9401      	str	r4, [sp, #4]
 8009418:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800941c:	60e3      	str	r3, [r4, #12]
 800941e:	4628      	mov	r0, r5
 8009420:	b29b      	uxth	r3, r3
 8009422:	f7ff ffa9 	bl	8009378 <uxr_common_create_entity>
 8009426:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f88d 301c 	strb.w	r3, [sp, #28]
 8009430:	e7e5      	b.n	80093fe <uxr_buffer_create_participant_bin+0x2e>
 8009432:	bf00      	nop

08009434 <uxr_buffer_create_topic_bin>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800943a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800943e:	9105      	str	r1, [sp, #20]
 8009440:	4605      	mov	r5, r0
 8009442:	a997      	add	r1, sp, #604	; 0x25c
 8009444:	4618      	mov	r0, r3
 8009446:	2302      	movs	r3, #2
 8009448:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800944c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8009450:	f000 f8ee 	bl	8009630 <uxr_object_id_to_raw>
 8009454:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8009456:	9306      	str	r3, [sp, #24]
 8009458:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800945a:	930a      	str	r3, [sp, #40]	; 0x28
 800945c:	2303      	movs	r3, #3
 800945e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009462:	2301      	movs	r3, #1
 8009464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009468:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800946c:	a917      	add	r1, sp, #92	; 0x5c
 800946e:	2300      	movs	r3, #0
 8009470:	a80b      	add	r0, sp, #44	; 0x2c
 8009472:	f88d 301c 	strb.w	r3, [sp, #28]
 8009476:	f7ff feef 	bl	8009258 <ucdr_init_buffer>
 800947a:	a906      	add	r1, sp, #24
 800947c:	a80b      	add	r0, sp, #44	; 0x2c
 800947e:	f001 fec3 	bl	800b208 <uxr_serialize_OBJK_Topic_Binary>
 8009482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009484:	9316      	str	r3, [sp, #88]	; 0x58
 8009486:	ac13      	add	r4, sp, #76	; 0x4c
 8009488:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800948c:	9600      	str	r6, [sp, #0]
 800948e:	9401      	str	r4, [sp, #4]
 8009490:	b29b      	uxth	r3, r3
 8009492:	4628      	mov	r0, r5
 8009494:	f7ff ff70 	bl	8009378 <uxr_common_create_entity>
 8009498:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800949c:	bd70      	pop	{r4, r5, r6, pc}
 800949e:	bf00      	nop

080094a0 <uxr_buffer_create_publisher_bin>:
 80094a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094a2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80094a6:	4605      	mov	r5, r0
 80094a8:	9105      	str	r1, [sp, #20]
 80094aa:	4618      	mov	r0, r3
 80094ac:	2603      	movs	r6, #3
 80094ae:	a992      	add	r1, sp, #584	; 0x248
 80094b0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80094b4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80094b8:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80094bc:	f000 f8b8 	bl	8009630 <uxr_object_id_to_raw>
 80094c0:	2300      	movs	r3, #0
 80094c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094c6:	a912      	add	r1, sp, #72	; 0x48
 80094c8:	a806      	add	r0, sp, #24
 80094ca:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80094ce:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80094d2:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 80094d6:	f7ff febf 	bl	8009258 <ucdr_init_buffer>
 80094da:	a993      	add	r1, sp, #588	; 0x24c
 80094dc:	a806      	add	r0, sp, #24
 80094de:	f001 ff47 	bl	800b370 <uxr_serialize_OBJK_Publisher_Binary>
 80094e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e4:	9311      	str	r3, [sp, #68]	; 0x44
 80094e6:	ac0e      	add	r4, sp, #56	; 0x38
 80094e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80094ec:	9700      	str	r7, [sp, #0]
 80094ee:	9401      	str	r4, [sp, #4]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	4628      	mov	r0, r5
 80094f4:	f7ff ff40 	bl	8009378 <uxr_common_create_entity>
 80094f8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80094fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094fe:	bf00      	nop

08009500 <uxr_buffer_create_datawriter_bin>:
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009508:	ac1d      	add	r4, sp, #116	; 0x74
 800950a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800950e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8009512:	9105      	str	r1, [sp, #20]
 8009514:	4606      	mov	r6, r0
 8009516:	a9a1      	add	r1, sp, #644	; 0x284
 8009518:	4618      	mov	r0, r3
 800951a:	2305      	movs	r3, #5
 800951c:	7123      	strb	r3, [r4, #4]
 800951e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8009522:	2703      	movs	r7, #3
 8009524:	f000 f884 	bl	8009630 <uxr_object_id_to_raw>
 8009528:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800952a:	7227      	strb	r7, [r4, #8]
 800952c:	a90e      	add	r1, sp, #56	; 0x38
 800952e:	f000 f87f 	bl	8009630 <uxr_object_id_to_raw>
 8009532:	2300      	movs	r3, #0
 8009534:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8009538:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800953c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8009540:	3d00      	subs	r5, #0
 8009542:	bf18      	it	ne
 8009544:	2501      	movne	r5, #1
 8009546:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800954a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800954e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009552:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009556:	2301      	movs	r3, #1
 8009558:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800955c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8009560:	bb8a      	cbnz	r2, 80095c6 <uxr_buffer_create_datawriter_bin+0xc6>
 8009562:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009566:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800956a:	f04f 0c13 	mov.w	ip, #19
 800956e:	250b      	movs	r5, #11
 8009570:	2221      	movs	r2, #33	; 0x21
 8009572:	2111      	movs	r1, #17
 8009574:	2009      	movs	r0, #9
 8009576:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800957a:	b923      	cbnz	r3, 8009586 <uxr_buffer_create_datawriter_bin+0x86>
 800957c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8009580:	4672      	mov	r2, lr
 8009582:	4661      	mov	r1, ip
 8009584:	4628      	mov	r0, r5
 8009586:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800958a:	2b01      	cmp	r3, #1
 800958c:	d025      	beq.n	80095da <uxr_buffer_create_datawriter_bin+0xda>
 800958e:	2b03      	cmp	r3, #3
 8009590:	d029      	beq.n	80095e6 <uxr_buffer_create_datawriter_bin+0xe6>
 8009592:	b32b      	cbz	r3, 80095e0 <uxr_buffer_create_datawriter_bin+0xe0>
 8009594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009598:	a921      	add	r1, sp, #132	; 0x84
 800959a:	a806      	add	r0, sp, #24
 800959c:	f7ff fe5c 	bl	8009258 <ucdr_init_buffer>
 80095a0:	a90e      	add	r1, sp, #56	; 0x38
 80095a2:	a806      	add	r0, sp, #24
 80095a4:	f001 ff5a 	bl	800b45c <uxr_serialize_OBJK_DataWriter_Binary>
 80095a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095aa:	f8cd 8000 	str.w	r8, [sp]
 80095ae:	9401      	str	r4, [sp, #4]
 80095b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80095b4:	60e3      	str	r3, [r4, #12]
 80095b6:	4630      	mov	r0, r6
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f7ff fedd 	bl	8009378 <uxr_common_create_entity>
 80095be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80095c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80095ca:	f04f 0c12 	mov.w	ip, #18
 80095ce:	250a      	movs	r5, #10
 80095d0:	2220      	movs	r2, #32
 80095d2:	2110      	movs	r1, #16
 80095d4:	2008      	movs	r0, #8
 80095d6:	2702      	movs	r7, #2
 80095d8:	e7cd      	b.n	8009576 <uxr_buffer_create_datawriter_bin+0x76>
 80095da:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80095de:	e7d9      	b.n	8009594 <uxr_buffer_create_datawriter_bin+0x94>
 80095e0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80095e4:	e7d6      	b.n	8009594 <uxr_buffer_create_datawriter_bin+0x94>
 80095e6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80095ea:	e7d3      	b.n	8009594 <uxr_buffer_create_datawriter_bin+0x94>

080095ec <uxr_object_id>:
 80095ec:	b082      	sub	sp, #8
 80095ee:	2300      	movs	r3, #0
 80095f0:	f88d 1006 	strb.w	r1, [sp, #6]
 80095f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80095f8:	f360 030f 	bfi	r3, r0, #0, #16
 80095fc:	f362 431f 	bfi	r3, r2, #16, #16
 8009600:	4618      	mov	r0, r3
 8009602:	b002      	add	sp, #8
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop

08009608 <uxr_object_id_from_raw>:
 8009608:	7843      	ldrb	r3, [r0, #1]
 800960a:	7801      	ldrb	r1, [r0, #0]
 800960c:	b082      	sub	sp, #8
 800960e:	f003 020f 	and.w	r2, r3, #15
 8009612:	f88d 2006 	strb.w	r2, [sp, #6]
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800961c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009620:	2000      	movs	r0, #0
 8009622:	f363 000f 	bfi	r0, r3, #0, #16
 8009626:	f362 401f 	bfi	r0, r2, #16, #16
 800962a:	b002      	add	sp, #8
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop

08009630 <uxr_object_id_to_raw>:
 8009630:	4602      	mov	r2, r0
 8009632:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8009636:	b082      	sub	sp, #8
 8009638:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800963c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8009640:	f881 c000 	strb.w	ip, [r1]
 8009644:	7048      	strb	r0, [r1, #1]
 8009646:	b002      	add	sp, #8
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop

0800964c <on_get_fragmentation_info>:
 800964c:	b500      	push	{lr}
 800964e:	b08b      	sub	sp, #44	; 0x2c
 8009650:	4601      	mov	r1, r0
 8009652:	2204      	movs	r2, #4
 8009654:	a802      	add	r0, sp, #8
 8009656:	f7ff fdff 	bl	8009258 <ucdr_init_buffer>
 800965a:	f10d 0305 	add.w	r3, sp, #5
 800965e:	f10d 0206 	add.w	r2, sp, #6
 8009662:	a901      	add	r1, sp, #4
 8009664:	a802      	add	r0, sp, #8
 8009666:	f001 f99b 	bl	800a9a0 <uxr_read_submessage_header>
 800966a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800966e:	2b0d      	cmp	r3, #13
 8009670:	d003      	beq.n	800967a <on_get_fragmentation_info+0x2e>
 8009672:	2000      	movs	r0, #0
 8009674:	b00b      	add	sp, #44	; 0x2c
 8009676:	f85d fb04 	ldr.w	pc, [sp], #4
 800967a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800967e:	f013 0f02 	tst.w	r3, #2
 8009682:	bf14      	ite	ne
 8009684:	2002      	movne	r0, #2
 8009686:	2001      	moveq	r0, #1
 8009688:	b00b      	add	sp, #44	; 0x2c
 800968a:	f85d fb04 	ldr.w	pc, [sp], #4
 800968e:	bf00      	nop

08009690 <read_submessage_get_info>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	2500      	movs	r5, #0
 8009694:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8009698:	4604      	mov	r4, r0
 800969a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800969e:	460e      	mov	r6, r1
 80096a0:	a810      	add	r0, sp, #64	; 0x40
 80096a2:	4629      	mov	r1, r5
 80096a4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80096a8:	f007 f8e2 	bl	8010870 <memset>
 80096ac:	a903      	add	r1, sp, #12
 80096ae:	4630      	mov	r0, r6
 80096b0:	f002 f94a 	bl	800b948 <uxr_deserialize_GET_INFO_Payload>
 80096b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80096b8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 ffe5 	bl	800a68c <uxr_session_header_offset>
 80096c2:	462b      	mov	r3, r5
 80096c4:	9000      	str	r0, [sp, #0]
 80096c6:	220c      	movs	r2, #12
 80096c8:	a905      	add	r1, sp, #20
 80096ca:	a808      	add	r0, sp, #32
 80096cc:	f7ff fdb2 	bl	8009234 <ucdr_init_buffer_origin_offset>
 80096d0:	a910      	add	r1, sp, #64	; 0x40
 80096d2:	a808      	add	r0, sp, #32
 80096d4:	f002 f9aa 	bl	800ba2c <uxr_serialize_INFO_Payload>
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	462a      	mov	r2, r5
 80096dc:	4629      	mov	r1, r5
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 ff7e 	bl	800a5e0 <uxr_stamp_session_header>
 80096e4:	a808      	add	r0, sp, #32
 80096e6:	f7ff fde3 	bl	80092b0 <ucdr_buffer_length>
 80096ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80096ec:	4602      	mov	r2, r0
 80096ee:	a905      	add	r1, sp, #20
 80096f0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80096f4:	47a0      	blx	r4
 80096f6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80096fa:	bd70      	pop	{r4, r5, r6, pc}

080096fc <write_submessage_acknack.isra.0>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	b092      	sub	sp, #72	; 0x48
 8009700:	4605      	mov	r5, r0
 8009702:	460e      	mov	r6, r1
 8009704:	4614      	mov	r4, r2
 8009706:	f000 ffc1 	bl	800a68c <uxr_session_header_offset>
 800970a:	a905      	add	r1, sp, #20
 800970c:	9000      	str	r0, [sp, #0]
 800970e:	2300      	movs	r3, #0
 8009710:	a80a      	add	r0, sp, #40	; 0x28
 8009712:	2211      	movs	r2, #17
 8009714:	f7ff fd8e 	bl	8009234 <ucdr_init_buffer_origin_offset>
 8009718:	2218      	movs	r2, #24
 800971a:	fb02 5404 	mla	r4, r2, r4, r5
 800971e:	2300      	movs	r3, #0
 8009720:	2205      	movs	r2, #5
 8009722:	3450      	adds	r4, #80	; 0x50
 8009724:	210a      	movs	r1, #10
 8009726:	a80a      	add	r0, sp, #40	; 0x28
 8009728:	f001 f920 	bl	800a96c <uxr_buffer_submessage_header>
 800972c:	a903      	add	r1, sp, #12
 800972e:	4620      	mov	r0, r4
 8009730:	f004 ff20 	bl	800e574 <uxr_compute_acknack>
 8009734:	ba40      	rev16	r0, r0
 8009736:	f8ad 000e 	strh.w	r0, [sp, #14]
 800973a:	a903      	add	r1, sp, #12
 800973c:	a80a      	add	r0, sp, #40	; 0x28
 800973e:	f88d 6010 	strb.w	r6, [sp, #16]
 8009742:	f002 f9e3 	bl	800bb0c <uxr_serialize_ACKNACK_Payload>
 8009746:	2200      	movs	r2, #0
 8009748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800974a:	4611      	mov	r1, r2
 800974c:	4628      	mov	r0, r5
 800974e:	f000 ff47 	bl	800a5e0 <uxr_stamp_session_header>
 8009752:	a80a      	add	r0, sp, #40	; 0x28
 8009754:	f7ff fdac 	bl	80092b0 <ucdr_buffer_length>
 8009758:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800975a:	4602      	mov	r2, r0
 800975c:	a905      	add	r1, sp, #20
 800975e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009762:	47a0      	blx	r4
 8009764:	b012      	add	sp, #72	; 0x48
 8009766:	bd70      	pop	{r4, r5, r6, pc}

08009768 <uxr_init_session>:
 8009768:	b510      	push	{r4, lr}
 800976a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80097a0 <uxr_init_session+0x38>
 800976e:	2300      	movs	r3, #0
 8009770:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8009774:	4604      	mov	r4, r0
 8009776:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800977a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800977e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8009782:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8009786:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800978a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800978e:	2181      	movs	r1, #129	; 0x81
 8009790:	f000 fe92 	bl	800a4b8 <uxr_init_session_info>
 8009794:	f104 0008 	add.w	r0, r4, #8
 8009798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800979c:	f001 b802 	b.w	800a7a4 <uxr_init_stream_storage>
	...

080097a8 <uxr_set_status_callback>:
 80097a8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop

080097b0 <uxr_set_topic_callback>:
 80097b0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop

080097b8 <uxr_set_request_callback>:
 80097b8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop

080097c0 <uxr_set_reply_callback>:
 80097c0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop

080097c8 <uxr_create_output_best_effort_stream>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	e9cd 2100 	strd	r2, r1, [sp]
 80097d0:	4604      	mov	r4, r0
 80097d2:	f000 ff5b 	bl	800a68c <uxr_session_header_offset>
 80097d6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80097da:	4603      	mov	r3, r0
 80097dc:	f104 0008 	add.w	r0, r4, #8
 80097e0:	b004      	add	sp, #16
 80097e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e6:	f001 b827 	b.w	800a838 <uxr_add_output_best_effort_buffer>
 80097ea:	bf00      	nop

080097ec <uxr_create_output_reliable_stream>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80097f4:	4604      	mov	r4, r0
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	f000 ff48 	bl	800a68c <uxr_session_header_offset>
 80097fc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009800:	9000      	str	r0, [sp, #0]
 8009802:	9905      	ldr	r1, [sp, #20]
 8009804:	f104 0008 	add.w	r0, r4, #8
 8009808:	f001 f82a 	bl	800a860 <uxr_add_output_reliable_buffer>
 800980c:	2200      	movs	r2, #0
 800980e:	b2c3      	uxtb	r3, r0
 8009810:	f363 0207 	bfi	r2, r3, #0, #8
 8009814:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009818:	f363 220f 	bfi	r2, r3, #8, #8
 800981c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009820:	f363 4217 	bfi	r2, r3, #16, #8
 8009824:	0e03      	lsrs	r3, r0, #24
 8009826:	f363 621f 	bfi	r2, r3, #24, #8
 800982a:	4610      	mov	r0, r2
 800982c:	b008      	add	sp, #32
 800982e:	bd10      	pop	{r4, pc}

08009830 <uxr_create_input_best_effort_stream>:
 8009830:	b082      	sub	sp, #8
 8009832:	3008      	adds	r0, #8
 8009834:	b002      	add	sp, #8
 8009836:	f001 b82d 	b.w	800a894 <uxr_add_input_best_effort_buffer>
 800983a:	bf00      	nop

0800983c <uxr_create_input_reliable_stream>:
 800983c:	b510      	push	{r4, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	4c0b      	ldr	r4, [pc, #44]	; (8009870 <uxr_create_input_reliable_stream+0x34>)
 8009842:	9400      	str	r4, [sp, #0]
 8009844:	3008      	adds	r0, #8
 8009846:	f001 f83b 	bl	800a8c0 <uxr_add_input_reliable_buffer>
 800984a:	2200      	movs	r2, #0
 800984c:	b2c3      	uxtb	r3, r0
 800984e:	f363 0207 	bfi	r2, r3, #0, #8
 8009852:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009856:	f363 220f 	bfi	r2, r3, #8, #8
 800985a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800985e:	f363 4217 	bfi	r2, r3, #16, #8
 8009862:	0e03      	lsrs	r3, r0, #24
 8009864:	f363 621f 	bfi	r2, r3, #24, #8
 8009868:	4610      	mov	r0, r2
 800986a:	b004      	add	sp, #16
 800986c:	bd10      	pop	{r4, pc}
 800986e:	bf00      	nop
 8009870:	0800964d 	.word	0x0800964d

08009874 <uxr_epoch_nanos>:
 8009874:	b510      	push	{r4, lr}
 8009876:	4604      	mov	r4, r0
 8009878:	f001 f8d8 	bl	800aa2c <uxr_nanos>
 800987c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8009880:	1ac0      	subs	r0, r0, r3
 8009882:	eb61 0102 	sbc.w	r1, r1, r2
 8009886:	bd10      	pop	{r4, pc}

08009888 <uxr_flash_output_streams>:
 8009888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800988c:	7e03      	ldrb	r3, [r0, #24]
 800988e:	b084      	sub	sp, #16
 8009890:	4604      	mov	r4, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d035      	beq.n	8009902 <uxr_flash_output_streams+0x7a>
 8009896:	f04f 0900 	mov.w	r9, #0
 800989a:	4648      	mov	r0, r9
 800989c:	f10d 0802 	add.w	r8, sp, #2
 80098a0:	af03      	add	r7, sp, #12
 80098a2:	ae02      	add	r6, sp, #8
 80098a4:	e006      	b.n	80098b4 <uxr_flash_output_streams+0x2c>
 80098a6:	7e23      	ldrb	r3, [r4, #24]
 80098a8:	f109 0901 	add.w	r9, r9, #1
 80098ac:	fa5f f089 	uxtb.w	r0, r9
 80098b0:	4283      	cmp	r3, r0
 80098b2:	d926      	bls.n	8009902 <uxr_flash_output_streams+0x7a>
 80098b4:	2201      	movs	r2, #1
 80098b6:	4611      	mov	r1, r2
 80098b8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80098bc:	f000 ff1e 	bl	800a6fc <uxr_stream_id>
 80098c0:	3508      	adds	r5, #8
 80098c2:	4684      	mov	ip, r0
 80098c4:	4643      	mov	r3, r8
 80098c6:	463a      	mov	r2, r7
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	f8cd c004 	str.w	ip, [sp, #4]
 80098d0:	f004 fed6 	bl	800e680 <uxr_prepare_best_effort_buffer_to_send>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d0e6      	beq.n	80098a6 <uxr_flash_output_streams+0x1e>
 80098d8:	9b02      	ldr	r3, [sp, #8]
 80098da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80098de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 fe7c 	bl	800a5e0 <uxr_stamp_session_header>
 80098e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80098ea:	9a03      	ldr	r2, [sp, #12]
 80098ec:	685d      	ldr	r5, [r3, #4]
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	9902      	ldr	r1, [sp, #8]
 80098f2:	47a8      	blx	r5
 80098f4:	f109 0901 	add.w	r9, r9, #1
 80098f8:	7e23      	ldrb	r3, [r4, #24]
 80098fa:	fa5f f089 	uxtb.w	r0, r9
 80098fe:	4283      	cmp	r3, r0
 8009900:	d8d8      	bhi.n	80098b4 <uxr_flash_output_streams+0x2c>
 8009902:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8009906:	b38b      	cbz	r3, 800996c <uxr_flash_output_streams+0xe4>
 8009908:	f04f 0900 	mov.w	r9, #0
 800990c:	f10d 0802 	add.w	r8, sp, #2
 8009910:	af03      	add	r7, sp, #12
 8009912:	ae02      	add	r6, sp, #8
 8009914:	4648      	mov	r0, r9
 8009916:	2201      	movs	r2, #1
 8009918:	2102      	movs	r1, #2
 800991a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800991e:	f000 feed 	bl	800a6fc <uxr_stream_id>
 8009922:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8009926:	3520      	adds	r5, #32
 8009928:	9001      	str	r0, [sp, #4]
 800992a:	e00d      	b.n	8009948 <uxr_flash_output_streams+0xc0>
 800992c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009930:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	f000 fe53 	bl	800a5e0 <uxr_stamp_session_header>
 800993a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800993c:	9a03      	ldr	r2, [sp, #12]
 800993e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009942:	9902      	ldr	r1, [sp, #8]
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	47d0      	blx	sl
 8009948:	4643      	mov	r3, r8
 800994a:	463a      	mov	r2, r7
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	f005 f8b4 	bl	800eabc <uxr_prepare_next_reliable_buffer_to_send>
 8009954:	4603      	mov	r3, r0
 8009956:	4620      	mov	r0, r4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e7      	bne.n	800992c <uxr_flash_output_streams+0xa4>
 800995c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8009960:	f109 0901 	add.w	r9, r9, #1
 8009964:	fa5f f089 	uxtb.w	r0, r9
 8009968:	4283      	cmp	r3, r0
 800996a:	d8d4      	bhi.n	8009916 <uxr_flash_output_streams+0x8e>
 800996c:	b004      	add	sp, #16
 800996e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009972:	bf00      	nop

08009974 <read_submessage_info>:
 8009974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009978:	460d      	mov	r5, r1
 800997a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800997e:	4669      	mov	r1, sp
 8009980:	4607      	mov	r7, r0
 8009982:	4628      	mov	r0, r5
 8009984:	f001 feee 	bl	800b764 <uxr_deserialize_BaseObjectReply>
 8009988:	a902      	add	r1, sp, #8
 800998a:	4604      	mov	r4, r0
 800998c:	4628      	mov	r0, r5
 800998e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8009992:	f7fe fc9d 	bl	80082d0 <ucdr_deserialize_bool>
 8009996:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800999a:	4004      	ands	r4, r0
 800999c:	b2e4      	uxtb	r4, r4
 800999e:	b95b      	cbnz	r3, 80099b8 <read_submessage_info+0x44>
 80099a0:	a987      	add	r1, sp, #540	; 0x21c
 80099a2:	4628      	mov	r0, r5
 80099a4:	f7fe fc94 	bl	80082d0 <ucdr_deserialize_bool>
 80099a8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80099ac:	4606      	mov	r6, r0
 80099ae:	b94b      	cbnz	r3, 80099c4 <read_submessage_info+0x50>
 80099b0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b8:	a903      	add	r1, sp, #12
 80099ba:	4628      	mov	r0, r5
 80099bc:	f001 fd7a 	bl	800b4b4 <uxr_deserialize_ObjectVariant>
 80099c0:	4004      	ands	r4, r0
 80099c2:	e7ed      	b.n	80099a0 <read_submessage_info+0x2c>
 80099c4:	a988      	add	r1, sp, #544	; 0x220
 80099c6:	4628      	mov	r0, r5
 80099c8:	f7fe fcb0 	bl	800832c <ucdr_deserialize_uint8_t>
 80099cc:	4234      	tst	r4, r6
 80099ce:	d0ef      	beq.n	80099b0 <read_submessage_info+0x3c>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0ed      	beq.n	80099b0 <read_submessage_info+0x3c>
 80099d4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80099d8:	2b0d      	cmp	r3, #13
 80099da:	d1e9      	bne.n	80099b0 <read_submessage_info+0x3c>
 80099dc:	a98a      	add	r1, sp, #552	; 0x228
 80099de:	4628      	mov	r0, r5
 80099e0:	f7ff fa4a 	bl	8008e78 <ucdr_deserialize_int16_t>
 80099e4:	b140      	cbz	r0, 80099f8 <read_submessage_info+0x84>
 80099e6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	dd07      	ble.n	80099fe <read_submessage_info+0x8a>
 80099ee:	f1b8 0f00 	cmp.w	r8, #0
 80099f2:	bf14      	ite	ne
 80099f4:	2001      	movne	r0, #1
 80099f6:	2002      	moveq	r0, #2
 80099f8:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 80099fc:	e7d8      	b.n	80099b0 <read_submessage_info+0x3c>
 80099fe:	2000      	movs	r0, #0
 8009a00:	e7fa      	b.n	80099f8 <read_submessage_info+0x84>
 8009a02:	bf00      	nop

08009a04 <read_submessage_list>:
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	b097      	sub	sp, #92	; 0x5c
 8009a0a:	4ec1      	ldr	r6, [pc, #772]	; (8009d10 <read_submessage_list+0x30c>)
 8009a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a0e:	4604      	mov	r4, r0
 8009a10:	460d      	mov	r5, r1
 8009a12:	f04f 0801 	mov.w	r8, #1
 8009a16:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8009a1a:	aa0c      	add	r2, sp, #48	; 0x30
 8009a1c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 ffbd 	bl	800a9a0 <uxr_read_submessage_header>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f000 813e 	beq.w	8009ca8 <read_submessage_list+0x2a4>
 8009a2c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8009a30:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8009a34:	3b02      	subs	r3, #2
 8009a36:	2b0d      	cmp	r3, #13
 8009a38:	d8ed      	bhi.n	8009a16 <read_submessage_list+0x12>
 8009a3a:	a101      	add	r1, pc, #4	; (adr r1, 8009a40 <read_submessage_list+0x3c>)
 8009a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a40:	08009c9f 	.word	0x08009c9f
 8009a44:	08009a17 	.word	0x08009a17
 8009a48:	08009c8f 	.word	0x08009c8f
 8009a4c:	08009c2d 	.word	0x08009c2d
 8009a50:	08009c23 	.word	0x08009c23
 8009a54:	08009a17 	.word	0x08009a17
 8009a58:	08009a17 	.word	0x08009a17
 8009a5c:	08009b83 	.word	0x08009b83
 8009a60:	08009b13 	.word	0x08009b13
 8009a64:	08009ad3 	.word	0x08009ad3
 8009a68:	08009a17 	.word	0x08009a17
 8009a6c:	08009a17 	.word	0x08009a17
 8009a70:	08009a17 	.word	0x08009a17
 8009a74:	08009a79 	.word	0x08009a79
 8009a78:	a910      	add	r1, sp, #64	; 0x40
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f002 f896 	bl	800bbac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8009a80:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 8009a84:	f1b9 0f00 	cmp.w	r9, #0
 8009a88:	f000 8116 	beq.w	8009cb8 <read_submessage_list+0x2b4>
 8009a8c:	f000 ffce 	bl	800aa2c <uxr_nanos>
 8009a90:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009a98:	2100      	movs	r1, #0
 8009a9a:	468c      	mov	ip, r1
 8009a9c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009aa0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8009aa4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009aa6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009aa8:	468c      	mov	ip, r1
 8009aaa:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009aae:	46e2      	mov	sl, ip
 8009ab0:	46bc      	mov	ip, r7
 8009ab2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 8009ab6:	fbc0 7106 	smlal	r7, r1, r0, r6
 8009aba:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8009abe:	e9cd 7100 	strd	r7, r1, [sp]
 8009ac2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009ac6:	9106      	str	r1, [sp, #24]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	47c8      	blx	r9
 8009acc:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8009ad0:	e7a1      	b.n	8009a16 <read_submessage_list+0x12>
 8009ad2:	a910      	add	r1, sp, #64	; 0x40
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f002 f857 	bl	800bb88 <uxr_deserialize_HEARTBEAT_Payload>
 8009ada:	2100      	movs	r1, #0
 8009adc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8009ae0:	f000 fe36 	bl	800a750 <uxr_stream_id_from_raw>
 8009ae4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8009ae8:	900f      	str	r0, [sp, #60]	; 0x3c
 8009aea:	4639      	mov	r1, r7
 8009aec:	f104 0008 	add.w	r0, r4, #8
 8009af0:	f000 ff1c 	bl	800a92c <uxr_get_input_reliable_stream>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d08e      	beq.n	8009a16 <read_submessage_list+0x12>
 8009af8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8009afc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8009b00:	f004 fd2c 	bl	800e55c <uxr_process_heartbeat>
 8009b04:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8009b08:	463a      	mov	r2, r7
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f7ff fdf6 	bl	80096fc <write_submessage_acknack.isra.0>
 8009b10:	e781      	b.n	8009a16 <read_submessage_list+0x12>
 8009b12:	a910      	add	r1, sp, #64	; 0x40
 8009b14:	4628      	mov	r0, r5
 8009b16:	f002 f80f 	bl	800bb38 <uxr_deserialize_ACKNACK_Payload>
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8009b20:	f000 fe16 	bl	800a750 <uxr_stream_id_from_raw>
 8009b24:	900d      	str	r0, [sp, #52]	; 0x34
 8009b26:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009b2a:	f104 0008 	add.w	r0, r4, #8
 8009b2e:	f000 fee9 	bl	800a904 <uxr_get_output_reliable_stream>
 8009b32:	4607      	mov	r7, r0
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f43f af6e 	beq.w	8009a16 <read_submessage_list+0x12>
 8009b3a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009b3e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8009b42:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8009b46:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009b4a:	b289      	uxth	r1, r1
 8009b4c:	f005 f860 	bl	800ec10 <uxr_process_acknack>
 8009b50:	4638      	mov	r0, r7
 8009b52:	f005 f81d 	bl	800eb90 <uxr_begin_output_nack_buffer_it>
 8009b56:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8009b5a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8009b5e:	e006      	b.n	8009b6e <read_submessage_list+0x16a>
 8009b60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009b62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b64:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009b68:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	47c8      	blx	r9
 8009b6e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8009b72:	aa0f      	add	r2, sp, #60	; 0x3c
 8009b74:	4651      	mov	r1, sl
 8009b76:	4638      	mov	r0, r7
 8009b78:	f005 f80c 	bl	800eb94 <uxr_next_reliable_nack_buffer_to_send>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d1ef      	bne.n	8009b60 <read_submessage_list+0x15c>
 8009b80:	e749      	b.n	8009a16 <read_submessage_list+0x12>
 8009b82:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009b86:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8009b8a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8009b8e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8009b92:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8009b96:	4651      	mov	r1, sl
 8009b98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009b9c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8009ba0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8009ba4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8009bae:	f001 fd23 	bl	800b5f8 <uxr_deserialize_BaseObjectRequest>
 8009bb2:	4650      	mov	r0, sl
 8009bb4:	a90f      	add	r1, sp, #60	; 0x3c
 8009bb6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8009bba:	f000 fd8d 	bl	800a6d8 <uxr_parse_base_object_request>
 8009bbe:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8009bc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bc4:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8009bc8:	9110      	str	r1, [sp, #64]	; 0x40
 8009bca:	3f04      	subs	r7, #4
 8009bcc:	f009 090e 	and.w	r9, r9, #14
 8009bd0:	b2bf      	uxth	r7, r7
 8009bd2:	f1bb 0f00 	cmp.w	fp, #0
 8009bd6:	d006      	beq.n	8009be6 <read_submessage_list+0x1e2>
 8009bd8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4652      	mov	r2, sl
 8009be0:	2300      	movs	r3, #0
 8009be2:	4620      	mov	r0, r4
 8009be4:	47d8      	blx	fp
 8009be6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009be8:	b16a      	cbz	r2, 8009c06 <read_submessage_list+0x202>
 8009bea:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009bec:	2100      	movs	r1, #0
 8009bee:	3802      	subs	r0, #2
 8009bf0:	e002      	b.n	8009bf8 <read_submessage_list+0x1f4>
 8009bf2:	3101      	adds	r1, #1
 8009bf4:	4291      	cmp	r1, r2
 8009bf6:	d006      	beq.n	8009c06 <read_submessage_list+0x202>
 8009bf8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8009bfc:	4553      	cmp	r3, sl
 8009bfe:	d1f8      	bne.n	8009bf2 <read_submessage_list+0x1ee>
 8009c00:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009c02:	2200      	movs	r2, #0
 8009c04:	545a      	strb	r2, [r3, r1]
 8009c06:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8009c0a:	9102      	str	r1, [sp, #8]
 8009c0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c0e:	9101      	str	r1, [sp, #4]
 8009c10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c12:	9100      	str	r1, [sp, #0]
 8009c14:	464b      	mov	r3, r9
 8009c16:	463a      	mov	r2, r7
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f005 f87c 	bl	800ed18 <read_submessage_format>
 8009c20:	e6f9      	b.n	8009a16 <read_submessage_list+0x12>
 8009c22:	4629      	mov	r1, r5
 8009c24:	4620      	mov	r0, r4
 8009c26:	f7ff fea5 	bl	8009974 <read_submessage_info>
 8009c2a:	e6f4      	b.n	8009a16 <read_submessage_list+0x12>
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	d03e      	beq.n	8009cae <read_submessage_list+0x2aa>
 8009c30:	a910      	add	r1, sp, #64	; 0x40
 8009c32:	4628      	mov	r0, r5
 8009c34:	f001 fedc 	bl	800b9f0 <uxr_deserialize_STATUS_Payload>
 8009c38:	a90e      	add	r1, sp, #56	; 0x38
 8009c3a:	aa0d      	add	r2, sp, #52	; 0x34
 8009c3c:	a810      	add	r0, sp, #64	; 0x40
 8009c3e:	f000 fd4b 	bl	800a6d8 <uxr_parse_base_object_request>
 8009c42:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8009c46:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c48:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8009c4c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8009c50:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c52:	f1ba 0f00 	cmp.w	sl, #0
 8009c56:	d006      	beq.n	8009c66 <read_submessage_list+0x262>
 8009c58:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	463a      	mov	r2, r7
 8009c60:	464b      	mov	r3, r9
 8009c62:	4620      	mov	r0, r4
 8009c64:	47d0      	blx	sl
 8009c66:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009c68:	2a00      	cmp	r2, #0
 8009c6a:	f43f aed4 	beq.w	8009a16 <read_submessage_list+0x12>
 8009c6e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009c70:	2100      	movs	r1, #0
 8009c72:	3802      	subs	r0, #2
 8009c74:	e003      	b.n	8009c7e <read_submessage_list+0x27a>
 8009c76:	3101      	adds	r1, #1
 8009c78:	4291      	cmp	r1, r2
 8009c7a:	f43f aecc 	beq.w	8009a16 <read_submessage_list+0x12>
 8009c7e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8009c82:	42bb      	cmp	r3, r7
 8009c84:	d1f7      	bne.n	8009c76 <read_submessage_list+0x272>
 8009c86:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009c88:	f803 9001 	strb.w	r9, [r3, r1]
 8009c8c:	e6c3      	b.n	8009a16 <read_submessage_list+0x12>
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	f47f aec1 	bne.w	8009a16 <read_submessage_list+0x12>
 8009c94:	4629      	mov	r1, r5
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fc64 	bl	800a564 <uxr_read_create_session_status>
 8009c9c:	e6bb      	b.n	8009a16 <read_submessage_list+0x12>
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f7ff fcf5 	bl	8009690 <read_submessage_get_info>
 8009ca6:	e6b6      	b.n	8009a16 <read_submessage_list+0x12>
 8009ca8:	b017      	add	sp, #92	; 0x5c
 8009caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 fc63 	bl	800a57c <uxr_read_delete_session_status>
 8009cb6:	e6ae      	b.n	8009a16 <read_submessage_list+0x12>
 8009cb8:	f000 feb8 	bl	800aa2c <uxr_nanos>
 8009cbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009cc0:	464f      	mov	r7, r9
 8009cc2:	fbc3 2706 	smlal	r2, r7, r3, r6
 8009cc6:	1812      	adds	r2, r2, r0
 8009cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009ccc:	eb47 0101 	adc.w	r1, r7, r1
 8009cd0:	464f      	mov	r7, r9
 8009cd2:	fbc3 0706 	smlal	r0, r7, r3, r6
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	4684      	mov	ip, r0
 8009cda:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8009cde:	fbc7 0906 	smlal	r0, r9, r7, r6
 8009ce2:	eb1c 0c00 	adds.w	ip, ip, r0
 8009ce6:	464f      	mov	r7, r9
 8009ce8:	eb43 0307 	adc.w	r3, r3, r7
 8009cec:	ebb2 0c0c 	subs.w	ip, r2, ip
 8009cf0:	eb61 0303 	sbc.w	r3, r1, r3
 8009cf4:	0fda      	lsrs	r2, r3, #31
 8009cf6:	eb12 020c 	adds.w	r2, r2, ip
 8009cfa:	f143 0300 	adc.w	r3, r3, #0
 8009cfe:	0852      	lsrs	r2, r2, #1
 8009d00:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8009d04:	105b      	asrs	r3, r3, #1
 8009d06:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8009d0a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8009d0e:	e6dd      	b.n	8009acc <read_submessage_list+0xc8>
 8009d10:	3b9aca00 	.word	0x3b9aca00

08009d14 <listen_message_reliably>:
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	1e0b      	subs	r3, r1, #0
 8009d1a:	b09d      	sub	sp, #116	; 0x74
 8009d1c:	bfb8      	it	lt
 8009d1e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8009d22:	4680      	mov	r8, r0
 8009d24:	9305      	str	r3, [sp, #20]
 8009d26:	f000 fe67 	bl	800a9f8 <uxr_millis>
 8009d2a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8009d2e:	4681      	mov	r9, r0
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	f000 80a1 	beq.w	8009e78 <listen_message_reliably+0x164>
 8009d36:	2600      	movs	r6, #0
 8009d38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d3c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009d40:	9303      	str	r3, [sp, #12]
 8009d42:	4630      	mov	r0, r6
 8009d44:	460f      	mov	r7, r1
 8009d46:	e00f      	b.n	8009d68 <listen_message_reliably+0x54>
 8009d48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8009d4c:	9903      	ldr	r1, [sp, #12]
 8009d4e:	455a      	cmp	r2, fp
 8009d50:	f106 0601 	add.w	r6, r6, #1
 8009d54:	eb73 0101 	sbcs.w	r1, r3, r1
 8009d58:	b2f0      	uxtb	r0, r6
 8009d5a:	da01      	bge.n	8009d60 <listen_message_reliably+0x4c>
 8009d5c:	4693      	mov	fp, r2
 8009d5e:	9303      	str	r3, [sp, #12]
 8009d60:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8009d64:	4283      	cmp	r3, r0
 8009d66:	d960      	bls.n	8009e2a <listen_message_reliably+0x116>
 8009d68:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f000 fcc4 	bl	800a6fc <uxr_stream_id>
 8009d74:	00e4      	lsls	r4, r4, #3
 8009d76:	f104 0520 	add.w	r5, r4, #32
 8009d7a:	4445      	add	r5, r8
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	463b      	mov	r3, r7
 8009d80:	464a      	mov	r2, r9
 8009d82:	4628      	mov	r0, r5
 8009d84:	9109      	str	r1, [sp, #36]	; 0x24
 8009d86:	f004 fed9 	bl	800eb3c <uxr_update_output_stream_heartbeat_timestamp>
 8009d8a:	eb08 0304 	add.w	r3, r8, r4
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d0da      	beq.n	8009d48 <listen_message_reliably+0x34>
 8009d92:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009d96:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	f000 fc75 	bl	800a68c <uxr_session_header_offset>
 8009da2:	3501      	adds	r5, #1
 8009da4:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8009da8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009dac:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8009db0:	2300      	movs	r3, #0
 8009db2:	2211      	movs	r2, #17
 8009db4:	9000      	str	r0, [sp, #0]
 8009db6:	a90c      	add	r1, sp, #48	; 0x30
 8009db8:	4650      	mov	r0, sl
 8009dba:	f7ff fa3b 	bl	8009234 <ucdr_init_buffer_origin_offset>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	210b      	movs	r1, #11
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	f000 fdd1 	bl	800a96c <uxr_buffer_submessage_header>
 8009dca:	8968      	ldrh	r0, [r5, #10]
 8009dcc:	2101      	movs	r1, #1
 8009dce:	f005 f86d 	bl	800eeac <uxr_seq_num_add>
 8009dd2:	892b      	ldrh	r3, [r5, #8]
 8009dd4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8009dd8:	4602      	mov	r2, r0
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8009de0:	a90a      	add	r1, sp, #40	; 0x28
 8009de2:	4650      	mov	r0, sl
 8009de4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8009de8:	f001 feba 	bl	800bb60 <uxr_serialize_HEARTBEAT_Payload>
 8009dec:	2200      	movs	r2, #0
 8009dee:	4611      	mov	r1, r2
 8009df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009df2:	4640      	mov	r0, r8
 8009df4:	f000 fbf4 	bl	800a5e0 <uxr_stamp_session_header>
 8009df8:	4650      	mov	r0, sl
 8009dfa:	f7ff fa59 	bl	80092b0 <ucdr_buffer_length>
 8009dfe:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8009e02:	4602      	mov	r2, r0
 8009e04:	a90c      	add	r1, sp, #48	; 0x30
 8009e06:	e9d3 0500 	ldrd	r0, r5, [r3]
 8009e0a:	4444      	add	r4, r8
 8009e0c:	47a8      	blx	r5
 8009e0e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8009e12:	9903      	ldr	r1, [sp, #12]
 8009e14:	455a      	cmp	r2, fp
 8009e16:	f106 0601 	add.w	r6, r6, #1
 8009e1a:	eb73 0101 	sbcs.w	r1, r3, r1
 8009e1e:	b2f0      	uxtb	r0, r6
 8009e20:	db9c      	blt.n	8009d5c <listen_message_reliably+0x48>
 8009e22:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8009e26:	4283      	cmp	r3, r0
 8009e28:	d89e      	bhi.n	8009d68 <listen_message_reliably+0x54>
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009e30:	429a      	cmp	r2, r3
 8009e32:	bf08      	it	eq
 8009e34:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8009e38:	d01e      	beq.n	8009e78 <listen_message_reliably+0x164>
 8009e3a:	ebab 0309 	sub.w	r3, fp, r9
 8009e3e:	9905      	ldr	r1, [sp, #20]
 8009e40:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bf08      	it	eq
 8009e48:	2301      	moveq	r3, #1
 8009e4a:	4299      	cmp	r1, r3
 8009e4c:	bfa8      	it	ge
 8009e4e:	4619      	movge	r1, r3
 8009e50:	6894      	ldr	r4, [r2, #8]
 8009e52:	6810      	ldr	r0, [r2, #0]
 8009e54:	4689      	mov	r9, r1
 8009e56:	460b      	mov	r3, r1
 8009e58:	aa08      	add	r2, sp, #32
 8009e5a:	a907      	add	r1, sp, #28
 8009e5c:	47a0      	blx	r4
 8009e5e:	b968      	cbnz	r0, 8009e7c <listen_message_reliably+0x168>
 8009e60:	9b05      	ldr	r3, [sp, #20]
 8009e62:	eba3 0309 	sub.w	r3, r3, r9
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	9305      	str	r3, [sp, #20]
 8009e6a:	f73f af5c 	bgt.w	8009d26 <listen_message_reliably+0x12>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4620      	mov	r0, r4
 8009e72:	b01d      	add	sp, #116	; 0x74
 8009e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e78:	9b05      	ldr	r3, [sp, #20]
 8009e7a:	e7e0      	b.n	8009e3e <listen_message_reliably+0x12a>
 8009e7c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8009e80:	4604      	mov	r4, r0
 8009e82:	a80c      	add	r0, sp, #48	; 0x30
 8009e84:	f7ff f9e8 	bl	8009258 <ucdr_init_buffer>
 8009e88:	2500      	movs	r5, #0
 8009e8a:	f10d 031a 	add.w	r3, sp, #26
 8009e8e:	aa06      	add	r2, sp, #24
 8009e90:	a90c      	add	r1, sp, #48	; 0x30
 8009e92:	4640      	mov	r0, r8
 8009e94:	f88d 5018 	strb.w	r5, [sp, #24]
 8009e98:	f000 fbb6 	bl	800a608 <uxr_read_session_header>
 8009e9c:	b918      	cbnz	r0, 8009ea6 <listen_message_reliably+0x192>
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	b01d      	add	sp, #116	; 0x74
 8009ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8009eac:	f000 fc50 	bl	800a750 <uxr_stream_id_from_raw>
 8009eb0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8009eb4:	2d01      	cmp	r5, #1
 8009eb6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8009eba:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8009ebe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8009ec2:	d04b      	beq.n	8009f5c <listen_message_reliably+0x248>
 8009ec4:	2d02      	cmp	r5, #2
 8009ec6:	d00f      	beq.n	8009ee8 <listen_message_reliably+0x1d4>
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	d1e8      	bne.n	8009e9e <listen_message_reliably+0x18a>
 8009ecc:	4629      	mov	r1, r5
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f000 fc3e 	bl	800a750 <uxr_stream_id_from_raw>
 8009ed4:	a90c      	add	r1, sp, #48	; 0x30
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	4640      	mov	r0, r8
 8009eda:	920a      	str	r2, [sp, #40]	; 0x28
 8009edc:	f7ff fd92 	bl	8009a04 <read_submessage_list>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	b01d      	add	sp, #116	; 0x74
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	4631      	mov	r1, r6
 8009eea:	f108 0008 	add.w	r0, r8, #8
 8009eee:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8009ef2:	f000 fd1b 	bl	800a92c <uxr_get_input_reliable_stream>
 8009ef6:	4607      	mov	r7, r0
 8009ef8:	b338      	cbz	r0, 8009f4a <listen_message_reliably+0x236>
 8009efa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009efc:	9203      	str	r2, [sp, #12]
 8009efe:	a80c      	add	r0, sp, #48	; 0x30
 8009f00:	f7ff f9da 	bl	80092b8 <ucdr_buffer_remaining>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f10d 0019 	add.w	r0, sp, #25
 8009f0a:	9000      	str	r0, [sp, #0]
 8009f0c:	9a03      	ldr	r2, [sp, #12]
 8009f0e:	4651      	mov	r1, sl
 8009f10:	4638      	mov	r0, r7
 8009f12:	f004 fa29 	bl	800e368 <uxr_receive_reliable_message>
 8009f16:	b1c0      	cbz	r0, 8009f4a <listen_message_reliably+0x236>
 8009f18:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009f1c:	b393      	cbz	r3, 8009f84 <listen_message_reliably+0x270>
 8009f1e:	ad14      	add	r5, sp, #80	; 0x50
 8009f20:	f04f 0a02 	mov.w	sl, #2
 8009f24:	e00a      	b.n	8009f3c <listen_message_reliably+0x228>
 8009f26:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8009f2a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8009f2e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8009f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f34:	4629      	mov	r1, r5
 8009f36:	4640      	mov	r0, r8
 8009f38:	f7ff fd64 	bl	8009a04 <read_submessage_list>
 8009f3c:	2204      	movs	r2, #4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4638      	mov	r0, r7
 8009f42:	f004 fa91 	bl	800e468 <uxr_next_input_reliable_buffer_available>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d1ed      	bne.n	8009f26 <listen_message_reliably+0x212>
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7ff fbd4 	bl	80096fc <write_submessage_acknack.isra.0>
 8009f54:	4620      	mov	r0, r4
 8009f56:	b01d      	add	sp, #116	; 0x74
 8009f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	f108 0008 	add.w	r0, r8, #8
 8009f62:	f000 fcd9 	bl	800a918 <uxr_get_input_best_effort_stream>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d099      	beq.n	8009e9e <listen_message_reliably+0x18a>
 8009f6a:	4651      	mov	r1, sl
 8009f6c:	f004 f968 	bl	800e240 <uxr_receive_best_effort_message>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d094      	beq.n	8009e9e <listen_message_reliably+0x18a>
 8009f74:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8009f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f7a:	a90c      	add	r1, sp, #48	; 0x30
 8009f7c:	4640      	mov	r0, r8
 8009f7e:	f7ff fd41 	bl	8009a04 <read_submessage_list>
 8009f82:	e78c      	b.n	8009e9e <listen_message_reliably+0x18a>
 8009f84:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8009f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f8a:	a90c      	add	r1, sp, #48	; 0x30
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	f7ff fd39 	bl	8009a04 <read_submessage_list>
 8009f92:	e7c4      	b.n	8009f1e <listen_message_reliably+0x20a>

08009f94 <uxr_run_session_until_confirm_delivery>:
 8009f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f98:	4606      	mov	r6, r0
 8009f9a:	460d      	mov	r5, r1
 8009f9c:	f000 fd2c 	bl	800a9f8 <uxr_millis>
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7ff fc70 	bl	8009888 <uxr_flash_output_streams>
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	f106 0808 	add.w	r8, r6, #8
 8009fae:	bfa8      	it	ge
 8009fb0:	462c      	movge	r4, r5
 8009fb2:	da07      	bge.n	8009fc4 <uxr_run_session_until_confirm_delivery+0x30>
 8009fb4:	e00e      	b.n	8009fd4 <uxr_run_session_until_confirm_delivery+0x40>
 8009fb6:	f7ff fead 	bl	8009d14 <listen_message_reliably>
 8009fba:	f000 fd1d 	bl	800a9f8 <uxr_millis>
 8009fbe:	1bc3      	subs	r3, r0, r7
 8009fc0:	1aec      	subs	r4, r5, r3
 8009fc2:	d407      	bmi.n	8009fd4 <uxr_run_session_until_confirm_delivery+0x40>
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	f000 fcbb 	bl	800a940 <uxr_output_streams_confirmed>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4630      	mov	r0, r6
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d0f0      	beq.n	8009fb6 <uxr_run_session_until_confirm_delivery+0x22>
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fda:	f000 bcb1 	b.w	800a940 <uxr_output_streams_confirmed>
 8009fde:	bf00      	nop

08009fe0 <uxr_run_session_until_all_status>:
 8009fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe4:	9c08      	ldr	r4, [sp, #32]
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	460f      	mov	r7, r1
 8009fea:	4691      	mov	r9, r2
 8009fec:	461d      	mov	r5, r3
 8009fee:	f7ff fc4b 	bl	8009888 <uxr_flash_output_streams>
 8009ff2:	b124      	cbz	r4, 8009ffe <uxr_run_session_until_all_status+0x1e>
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	21ff      	movs	r1, #255	; 0xff
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f006 fc39 	bl	8010870 <memset>
 8009ffe:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800a002:	67f4      	str	r4, [r6, #124]	; 0x7c
 800a004:	f000 fcf8 	bl	800a9f8 <uxr_millis>
 800a008:	3d01      	subs	r5, #1
 800a00a:	f1a9 0902 	sub.w	r9, r9, #2
 800a00e:	4680      	mov	r8, r0
 800a010:	4639      	mov	r1, r7
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff fe7e 	bl	8009d14 <listen_message_reliably>
 800a018:	f000 fcee 	bl	800a9f8 <uxr_millis>
 800a01c:	eba0 0008 	sub.w	r0, r0, r8
 800a020:	1a39      	subs	r1, r7, r0
 800a022:	b344      	cbz	r4, 800a076 <uxr_run_session_until_all_status+0x96>
 800a024:	4628      	mov	r0, r5
 800a026:	46ac      	mov	ip, r5
 800a028:	2301      	movs	r3, #1
 800a02a:	e002      	b.n	800a032 <uxr_run_session_until_all_status+0x52>
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	d20d      	bcs.n	800a04c <uxr_run_session_until_all_status+0x6c>
 800a030:	3301      	adds	r3, #1
 800a032:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800a036:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800a03a:	d1f7      	bne.n	800a02c <uxr_run_session_until_all_status+0x4c>
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800a042:	d213      	bcs.n	800a06c <uxr_run_session_until_all_status+0x8c>
 800a044:	2a00      	cmp	r2, #0
 800a046:	d0f3      	beq.n	800a030 <uxr_run_session_until_all_status+0x50>
 800a048:	2900      	cmp	r1, #0
 800a04a:	dce2      	bgt.n	800a012 <uxr_run_session_until_all_status+0x32>
 800a04c:	2300      	movs	r3, #0
 800a04e:	67f3      	str	r3, [r6, #124]	; 0x7c
 800a050:	442c      	add	r4, r5
 800a052:	e001      	b.n	800a058 <uxr_run_session_until_all_status+0x78>
 800a054:	2b01      	cmp	r3, #1
 800a056:	d812      	bhi.n	800a07e <uxr_run_session_until_all_status+0x9e>
 800a058:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a05c:	4284      	cmp	r4, r0
 800a05e:	d1f9      	bne.n	800a054 <uxr_run_session_until_all_status+0x74>
 800a060:	2b01      	cmp	r3, #1
 800a062:	bf8c      	ite	hi
 800a064:	2000      	movhi	r0, #0
 800a066:	2001      	movls	r0, #1
 800a068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06c:	2900      	cmp	r1, #0
 800a06e:	dded      	ble.n	800a04c <uxr_run_session_until_all_status+0x6c>
 800a070:	2a00      	cmp	r2, #0
 800a072:	d1ce      	bne.n	800a012 <uxr_run_session_until_all_status+0x32>
 800a074:	e7ea      	b.n	800a04c <uxr_run_session_until_all_status+0x6c>
 800a076:	67f4      	str	r4, [r6, #124]	; 0x7c
 800a078:	2001      	movs	r0, #1
 800a07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a07e:	2000      	movs	r0, #0
 800a080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a084 <wait_session_status>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4604      	mov	r4, r0
 800a08a:	b09d      	sub	sp, #116	; 0x74
 800a08c:	20ff      	movs	r0, #255	; 0xff
 800a08e:	7160      	strb	r0, [r4, #5]
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80b6 	beq.w	800a204 <wait_session_status+0x180>
 800a098:	468a      	mov	sl, r1
 800a09a:	4691      	mov	r9, r2
 800a09c:	f04f 0b00 	mov.w	fp, #0
 800a0a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a0a2:	464a      	mov	r2, r9
 800a0a4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a0a8:	4651      	mov	r1, sl
 800a0aa:	47a8      	blx	r5
 800a0ac:	f000 fca4 	bl	800a9f8 <uxr_millis>
 800a0b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	e009      	b.n	800a0cc <wait_session_status+0x48>
 800a0b8:	f000 fc9e 	bl	800a9f8 <uxr_millis>
 800a0bc:	1b40      	subs	r0, r0, r5
 800a0be:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd40      	ble.n	800a148 <wait_session_status+0xc4>
 800a0c6:	7960      	ldrb	r0, [r4, #5]
 800a0c8:	28ff      	cmp	r0, #255	; 0xff
 800a0ca:	d145      	bne.n	800a158 <wait_session_status+0xd4>
 800a0cc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a0ce:	a908      	add	r1, sp, #32
 800a0d0:	6896      	ldr	r6, [r2, #8]
 800a0d2:	6810      	ldr	r0, [r2, #0]
 800a0d4:	aa09      	add	r2, sp, #36	; 0x24
 800a0d6:	47b0      	blx	r6
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d0ed      	beq.n	800a0b8 <wait_session_status+0x34>
 800a0dc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a0e0:	a80c      	add	r0, sp, #48	; 0x30
 800a0e2:	f7ff f8b9 	bl	8009258 <ucdr_init_buffer>
 800a0e6:	2600      	movs	r6, #0
 800a0e8:	f10d 031e 	add.w	r3, sp, #30
 800a0ec:	aa07      	add	r2, sp, #28
 800a0ee:	a90c      	add	r1, sp, #48	; 0x30
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f88d 601c 	strb.w	r6, [sp, #28]
 800a0f6:	f000 fa87 	bl	800a608 <uxr_read_session_header>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d0dc      	beq.n	800a0b8 <wait_session_status+0x34>
 800a0fe:	4631      	mov	r1, r6
 800a100:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a104:	f000 fb24 	bl	800a750 <uxr_stream_id_from_raw>
 800a108:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800a10c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a110:	9302      	str	r3, [sp, #8]
 800a112:	2f01      	cmp	r7, #1
 800a114:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800a118:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a11c:	d05c      	beq.n	800a1d8 <wait_session_status+0x154>
 800a11e:	2f02      	cmp	r7, #2
 800a120:	d020      	beq.n	800a164 <wait_session_status+0xe0>
 800a122:	2f00      	cmp	r7, #0
 800a124:	d1c8      	bne.n	800a0b8 <wait_session_status+0x34>
 800a126:	4639      	mov	r1, r7
 800a128:	4638      	mov	r0, r7
 800a12a:	f000 fb11 	bl	800a750 <uxr_stream_id_from_raw>
 800a12e:	a90c      	add	r1, sp, #48	; 0x30
 800a130:	4602      	mov	r2, r0
 800a132:	900b      	str	r0, [sp, #44]	; 0x2c
 800a134:	4620      	mov	r0, r4
 800a136:	f7ff fc65 	bl	8009a04 <read_submessage_list>
 800a13a:	f000 fc5d 	bl	800a9f8 <uxr_millis>
 800a13e:	1b40      	subs	r0, r0, r5
 800a140:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800a144:	2b00      	cmp	r3, #0
 800a146:	dcbe      	bgt.n	800a0c6 <wait_session_status+0x42>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	7960      	ldrb	r0, [r4, #5]
 800a14c:	f10b 0b01 	add.w	fp, fp, #1
 800a150:	455b      	cmp	r3, fp
 800a152:	d001      	beq.n	800a158 <wait_session_status+0xd4>
 800a154:	28ff      	cmp	r0, #255	; 0xff
 800a156:	d0a3      	beq.n	800a0a0 <wait_session_status+0x1c>
 800a158:	38ff      	subs	r0, #255	; 0xff
 800a15a:	bf18      	it	ne
 800a15c:	2001      	movne	r0, #1
 800a15e:	b01d      	add	sp, #116	; 0x74
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	4631      	mov	r1, r6
 800a16c:	f104 0008 	add.w	r0, r4, #8
 800a170:	f000 fbdc 	bl	800a92c <uxr_get_input_reliable_stream>
 800a174:	4680      	mov	r8, r0
 800a176:	b348      	cbz	r0, 800a1cc <wait_session_status+0x148>
 800a178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a17a:	9205      	str	r2, [sp, #20]
 800a17c:	a80c      	add	r0, sp, #48	; 0x30
 800a17e:	f7ff f89b 	bl	80092b8 <ucdr_buffer_remaining>
 800a182:	4603      	mov	r3, r0
 800a184:	f10d 001d 	add.w	r0, sp, #29
 800a188:	9000      	str	r0, [sp, #0]
 800a18a:	9a05      	ldr	r2, [sp, #20]
 800a18c:	9902      	ldr	r1, [sp, #8]
 800a18e:	4640      	mov	r0, r8
 800a190:	f004 f8ea 	bl	800e368 <uxr_receive_reliable_message>
 800a194:	b1d0      	cbz	r0, 800a1cc <wait_session_status+0x148>
 800a196:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d03a      	beq.n	800a214 <wait_session_status+0x190>
 800a19e:	9f04      	ldr	r7, [sp, #16]
 800a1a0:	e00a      	b.n	800a1b8 <wait_session_status+0x134>
 800a1a2:	f04f 0302 	mov.w	r3, #2
 800a1a6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800a1aa:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800a1ae:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800a1b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1b4:	f7ff fc26 	bl	8009a04 <read_submessage_list>
 800a1b8:	a914      	add	r1, sp, #80	; 0x50
 800a1ba:	2204      	movs	r2, #4
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f004 f953 	bl	800e468 <uxr_next_input_reliable_buffer_available>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	a914      	add	r1, sp, #80	; 0x50
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1ea      	bne.n	800a1a2 <wait_session_status+0x11e>
 800a1cc:	9904      	ldr	r1, [sp, #16]
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7ff fa93 	bl	80096fc <write_submessage_acknack.isra.0>
 800a1d6:	e76f      	b.n	800a0b8 <wait_session_status+0x34>
 800a1d8:	4631      	mov	r1, r6
 800a1da:	f104 0008 	add.w	r0, r4, #8
 800a1de:	f000 fb9b 	bl	800a918 <uxr_get_input_best_effort_stream>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f43f af68 	beq.w	800a0b8 <wait_session_status+0x34>
 800a1e8:	9902      	ldr	r1, [sp, #8]
 800a1ea:	f004 f829 	bl	800e240 <uxr_receive_best_effort_message>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f43f af62 	beq.w	800a0b8 <wait_session_status+0x34>
 800a1f4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800a1f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1fa:	a90c      	add	r1, sp, #48	; 0x30
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7ff fc01 	bl	8009a04 <read_submessage_list>
 800a202:	e759      	b.n	800a0b8 <wait_session_status+0x34>
 800a204:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a206:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a20a:	47a0      	blx	r4
 800a20c:	2001      	movs	r0, #1
 800a20e:	b01d      	add	sp, #116	; 0x74
 800a210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a214:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800a218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a21a:	a90c      	add	r1, sp, #48	; 0x30
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7ff fbf1 	bl	8009a04 <read_submessage_list>
 800a222:	e7bc      	b.n	800a19e <wait_session_status+0x11a>

0800a224 <uxr_delete_session_retries>:
 800a224:	b530      	push	{r4, r5, lr}
 800a226:	b08f      	sub	sp, #60	; 0x3c
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	f000 fa2e 	bl	800a68c <uxr_session_header_offset>
 800a230:	2300      	movs	r3, #0
 800a232:	2210      	movs	r2, #16
 800a234:	9000      	str	r0, [sp, #0]
 800a236:	a902      	add	r1, sp, #8
 800a238:	a806      	add	r0, sp, #24
 800a23a:	f7fe fffb 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800a23e:	a906      	add	r1, sp, #24
 800a240:	4620      	mov	r0, r4
 800a242:	f000 f973 	bl	800a52c <uxr_buffer_delete_session>
 800a246:	2200      	movs	r2, #0
 800a248:	4611      	mov	r1, r2
 800a24a:	9b06      	ldr	r3, [sp, #24]
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 f9c7 	bl	800a5e0 <uxr_stamp_session_header>
 800a252:	a806      	add	r0, sp, #24
 800a254:	f7ff f82c 	bl	80092b0 <ucdr_buffer_length>
 800a258:	462b      	mov	r3, r5
 800a25a:	4602      	mov	r2, r0
 800a25c:	a902      	add	r1, sp, #8
 800a25e:	4620      	mov	r0, r4
 800a260:	f7ff ff10 	bl	800a084 <wait_session_status>
 800a264:	b118      	cbz	r0, 800a26e <uxr_delete_session_retries+0x4a>
 800a266:	7960      	ldrb	r0, [r4, #5]
 800a268:	fab0 f080 	clz	r0, r0
 800a26c:	0940      	lsrs	r0, r0, #5
 800a26e:	b00f      	add	sp, #60	; 0x3c
 800a270:	bd30      	pop	{r4, r5, pc}
 800a272:	bf00      	nop

0800a274 <uxr_create_session>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	f100 0b08 	add.w	fp, r0, #8
 800a27c:	b0ab      	sub	sp, #172	; 0xac
 800a27e:	4604      	mov	r4, r0
 800a280:	4658      	mov	r0, fp
 800a282:	f000 fa99 	bl	800a7b8 <uxr_reset_stream_storage>
 800a286:	4620      	mov	r0, r4
 800a288:	f000 fa00 	bl	800a68c <uxr_session_header_offset>
 800a28c:	2300      	movs	r3, #0
 800a28e:	9000      	str	r0, [sp, #0]
 800a290:	221c      	movs	r2, #28
 800a292:	a90b      	add	r1, sp, #44	; 0x2c
 800a294:	a812      	add	r0, sp, #72	; 0x48
 800a296:	f7fe ffcd 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800a29a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a29c:	8a1a      	ldrh	r2, [r3, #16]
 800a29e:	3a04      	subs	r2, #4
 800a2a0:	b292      	uxth	r2, r2
 800a2a2:	a912      	add	r1, sp, #72	; 0x48
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 f917 	bl	800a4d8 <uxr_buffer_create_session>
 800a2aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 f983 	bl	800a5b8 <uxr_stamp_create_session_header>
 800a2b2:	a812      	add	r0, sp, #72	; 0x48
 800a2b4:	f7fe fffc 	bl	80092b0 <ucdr_buffer_length>
 800a2b8:	23ff      	movs	r3, #255	; 0xff
 800a2ba:	7163      	strb	r3, [r4, #5]
 800a2bc:	230a      	movs	r3, #10
 800a2be:	46da      	mov	sl, fp
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	4683      	mov	fp, r0
 800a2c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a2c6:	465a      	mov	r2, fp
 800a2c8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a2cc:	a90b      	add	r1, sp, #44	; 0x2c
 800a2ce:	47a8      	blx	r5
 800a2d0:	f000 fb92 	bl	800a9f8 <uxr_millis>
 800a2d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2d8:	4605      	mov	r5, r0
 800a2da:	e009      	b.n	800a2f0 <uxr_create_session+0x7c>
 800a2dc:	f000 fb8c 	bl	800a9f8 <uxr_millis>
 800a2e0:	1b40      	subs	r0, r0, r5
 800a2e2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	7962      	ldrb	r2, [r4, #5]
 800a2ea:	dd38      	ble.n	800a35e <uxr_create_session+0xea>
 800a2ec:	2aff      	cmp	r2, #255	; 0xff
 800a2ee:	d13c      	bne.n	800a36a <uxr_create_session+0xf6>
 800a2f0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a2f2:	a907      	add	r1, sp, #28
 800a2f4:	6896      	ldr	r6, [r2, #8]
 800a2f6:	6810      	ldr	r0, [r2, #0]
 800a2f8:	aa08      	add	r2, sp, #32
 800a2fa:	47b0      	blx	r6
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d0ed      	beq.n	800a2dc <uxr_create_session+0x68>
 800a300:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a304:	a81a      	add	r0, sp, #104	; 0x68
 800a306:	f7fe ffa7 	bl	8009258 <ucdr_init_buffer>
 800a30a:	2600      	movs	r6, #0
 800a30c:	f10d 031a 	add.w	r3, sp, #26
 800a310:	aa06      	add	r2, sp, #24
 800a312:	a91a      	add	r1, sp, #104	; 0x68
 800a314:	4620      	mov	r0, r4
 800a316:	f88d 6018 	strb.w	r6, [sp, #24]
 800a31a:	f000 f975 	bl	800a608 <uxr_read_session_header>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d0dc      	beq.n	800a2dc <uxr_create_session+0x68>
 800a322:	4631      	mov	r1, r6
 800a324:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a328:	f000 fa12 	bl	800a750 <uxr_stream_id_from_raw>
 800a32c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a330:	2e01      	cmp	r6, #1
 800a332:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800a336:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800a33a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a33e:	d053      	beq.n	800a3e8 <uxr_create_session+0x174>
 800a340:	2e02      	cmp	r6, #2
 800a342:	d018      	beq.n	800a376 <uxr_create_session+0x102>
 800a344:	2e00      	cmp	r6, #0
 800a346:	d1c9      	bne.n	800a2dc <uxr_create_session+0x68>
 800a348:	4631      	mov	r1, r6
 800a34a:	4630      	mov	r0, r6
 800a34c:	f000 fa00 	bl	800a750 <uxr_stream_id_from_raw>
 800a350:	a91a      	add	r1, sp, #104	; 0x68
 800a352:	4602      	mov	r2, r0
 800a354:	900a      	str	r0, [sp, #40]	; 0x28
 800a356:	4620      	mov	r0, r4
 800a358:	f7ff fb54 	bl	8009a04 <read_submessage_list>
 800a35c:	e7be      	b.n	800a2dc <uxr_create_session+0x68>
 800a35e:	9b03      	ldr	r3, [sp, #12]
 800a360:	3b01      	subs	r3, #1
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	d001      	beq.n	800a36a <uxr_create_session+0xf6>
 800a366:	2aff      	cmp	r2, #255	; 0xff
 800a368:	d0ac      	beq.n	800a2c4 <uxr_create_session+0x50>
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	d051      	beq.n	800a412 <uxr_create_session+0x19e>
 800a36e:	2000      	movs	r0, #0
 800a370:	b02b      	add	sp, #172	; 0xac
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a37a:	9304      	str	r3, [sp, #16]
 800a37c:	4639      	mov	r1, r7
 800a37e:	4650      	mov	r0, sl
 800a380:	f000 fad4 	bl	800a92c <uxr_get_input_reliable_stream>
 800a384:	4680      	mov	r8, r0
 800a386:	b348      	cbz	r0, 800a3dc <uxr_create_session+0x168>
 800a388:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a38a:	9205      	str	r2, [sp, #20]
 800a38c:	a81a      	add	r0, sp, #104	; 0x68
 800a38e:	f7fe ff93 	bl	80092b8 <ucdr_buffer_remaining>
 800a392:	4603      	mov	r3, r0
 800a394:	f10d 0019 	add.w	r0, sp, #25
 800a398:	9000      	str	r0, [sp, #0]
 800a39a:	9a05      	ldr	r2, [sp, #20]
 800a39c:	4649      	mov	r1, r9
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f003 ffe2 	bl	800e368 <uxr_receive_reliable_message>
 800a3a4:	b1d0      	cbz	r0, 800a3dc <uxr_create_session+0x168>
 800a3a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d038      	beq.n	800a420 <uxr_create_session+0x1ac>
 800a3ae:	9e04      	ldr	r6, [sp, #16]
 800a3b0:	e00a      	b.n	800a3c8 <uxr_create_session+0x154>
 800a3b2:	f04f 0302 	mov.w	r3, #2
 800a3b6:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800a3ba:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800a3be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c4:	f7ff fb1e 	bl	8009a04 <read_submessage_list>
 800a3c8:	a922      	add	r1, sp, #136	; 0x88
 800a3ca:	2204      	movs	r2, #4
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	f004 f84b 	bl	800e468 <uxr_next_input_reliable_buffer_available>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	a922      	add	r1, sp, #136	; 0x88
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1ea      	bne.n	800a3b2 <uxr_create_session+0x13e>
 800a3dc:	9904      	ldr	r1, [sp, #16]
 800a3de:	463a      	mov	r2, r7
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f7ff f98b 	bl	80096fc <write_submessage_acknack.isra.0>
 800a3e6:	e779      	b.n	800a2dc <uxr_create_session+0x68>
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	4650      	mov	r0, sl
 800a3ec:	f000 fa94 	bl	800a918 <uxr_get_input_best_effort_stream>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	f43f af73 	beq.w	800a2dc <uxr_create_session+0x68>
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	f003 ff22 	bl	800e240 <uxr_receive_best_effort_message>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f43f af6d 	beq.w	800a2dc <uxr_create_session+0x68>
 800a402:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a408:	a91a      	add	r1, sp, #104	; 0x68
 800a40a:	4620      	mov	r0, r4
 800a40c:	f7ff fafa 	bl	8009a04 <read_submessage_list>
 800a410:	e764      	b.n	800a2dc <uxr_create_session+0x68>
 800a412:	4650      	mov	r0, sl
 800a414:	f000 f9d0 	bl	800a7b8 <uxr_reset_stream_storage>
 800a418:	2001      	movs	r0, #1
 800a41a:	b02b      	add	sp, #172	; 0xac
 800a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a420:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a426:	a91a      	add	r1, sp, #104	; 0x68
 800a428:	4620      	mov	r0, r4
 800a42a:	f7ff faeb 	bl	8009a04 <read_submessage_list>
 800a42e:	e7be      	b.n	800a3ae <uxr_create_session+0x13a>

0800a430 <uxr_prepare_stream_to_write_submessage>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	b082      	sub	sp, #8
 800a436:	4682      	mov	sl, r0
 800a438:	4610      	mov	r0, r2
 800a43a:	4615      	mov	r5, r2
 800a43c:	461e      	mov	r6, r3
 800a43e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800a442:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800a446:	9101      	str	r1, [sp, #4]
 800a448:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a44c:	f000 face 	bl	800a9ec <uxr_submessage_padding>
 800a450:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a454:	f105 0904 	add.w	r9, r5, #4
 800a458:	2b01      	cmp	r3, #1
 800a45a:	4481      	add	r9, r0
 800a45c:	d01d      	beq.n	800a49a <uxr_prepare_stream_to_write_submessage+0x6a>
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d116      	bne.n	800a490 <uxr_prepare_stream_to_write_submessage+0x60>
 800a462:	4621      	mov	r1, r4
 800a464:	f10a 0008 	add.w	r0, sl, #8
 800a468:	f000 fa4c 	bl	800a904 <uxr_get_output_reliable_stream>
 800a46c:	4604      	mov	r4, r0
 800a46e:	b158      	cbz	r0, 800a488 <uxr_prepare_stream_to_write_submessage+0x58>
 800a470:	4649      	mov	r1, r9
 800a472:	4632      	mov	r2, r6
 800a474:	f004 f9b4 	bl	800e7e0 <uxr_prepare_reliable_buffer_to_write>
 800a478:	4604      	mov	r4, r0
 800a47a:	b12c      	cbz	r4, 800a488 <uxr_prepare_stream_to_write_submessage+0x58>
 800a47c:	4643      	mov	r3, r8
 800a47e:	b2aa      	uxth	r2, r5
 800a480:	4639      	mov	r1, r7
 800a482:	4630      	mov	r0, r6
 800a484:	f000 fa72 	bl	800a96c <uxr_buffer_submessage_header>
 800a488:	4620      	mov	r0, r4
 800a48a:	b002      	add	sp, #8
 800a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a490:	2400      	movs	r4, #0
 800a492:	4620      	mov	r0, r4
 800a494:	b002      	add	sp, #8
 800a496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49a:	4621      	mov	r1, r4
 800a49c:	f10a 0008 	add.w	r0, sl, #8
 800a4a0:	f000 fa28 	bl	800a8f4 <uxr_get_output_best_effort_stream>
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d0ee      	beq.n	800a488 <uxr_prepare_stream_to_write_submessage+0x58>
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	f004 f8c7 	bl	800e640 <uxr_prepare_best_effort_buffer_to_write>
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	e7e1      	b.n	800a47a <uxr_prepare_stream_to_write_submessage+0x4a>
 800a4b6:	bf00      	nop

0800a4b8 <uxr_init_session_info>:
 800a4b8:	0e13      	lsrs	r3, r2, #24
 800a4ba:	7043      	strb	r3, [r0, #1]
 800a4bc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a4c0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a4c4:	7001      	strb	r1, [r0, #0]
 800a4c6:	70c3      	strb	r3, [r0, #3]
 800a4c8:	2109      	movs	r1, #9
 800a4ca:	23ff      	movs	r3, #255	; 0xff
 800a4cc:	f880 c002 	strb.w	ip, [r0, #2]
 800a4d0:	7102      	strb	r2, [r0, #4]
 800a4d2:	80c1      	strh	r1, [r0, #6]
 800a4d4:	7143      	strb	r3, [r0, #5]
 800a4d6:	4770      	bx	lr

0800a4d8 <uxr_buffer_create_session>:
 800a4d8:	b530      	push	{r4, r5, lr}
 800a4da:	b089      	sub	sp, #36	; 0x24
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4d12      	ldr	r5, [pc, #72]	; (800a528 <uxr_buffer_create_session+0x50>)
 800a4e0:	9307      	str	r3, [sp, #28]
 800a4e2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	80c2      	strh	r2, [r0, #6]
 800a4ec:	f88d 2004 	strb.w	r2, [sp, #4]
 800a4f0:	682a      	ldr	r2, [r5, #0]
 800a4f2:	9200      	str	r2, [sp, #0]
 800a4f4:	88aa      	ldrh	r2, [r5, #4]
 800a4f6:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a4fa:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800a4fe:	9202      	str	r2, [sp, #8]
 800a500:	460c      	mov	r4, r1
 800a502:	7802      	ldrb	r2, [r0, #0]
 800a504:	9303      	str	r3, [sp, #12]
 800a506:	4619      	mov	r1, r3
 800a508:	f88d 200c 	strb.w	r2, [sp, #12]
 800a50c:	4620      	mov	r0, r4
 800a50e:	2210      	movs	r2, #16
 800a510:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800a514:	9306      	str	r3, [sp, #24]
 800a516:	f000 fa29 	bl	800a96c <uxr_buffer_submessage_header>
 800a51a:	4669      	mov	r1, sp
 800a51c:	4620      	mov	r0, r4
 800a51e:	f001 f981 	bl	800b824 <uxr_serialize_CREATE_CLIENT_Payload>
 800a522:	b009      	add	sp, #36	; 0x24
 800a524:	bd30      	pop	{r4, r5, pc}
 800a526:	bf00      	nop
 800a528:	080118cc 	.word	0x080118cc

0800a52c <uxr_buffer_delete_session>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	4b0c      	ldr	r3, [pc, #48]	; (800a560 <uxr_buffer_delete_session+0x34>)
 800a530:	b082      	sub	sp, #8
 800a532:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800a536:	f8ad c006 	strh.w	ip, [sp, #6]
 800a53a:	460c      	mov	r4, r1
 800a53c:	2202      	movs	r2, #2
 800a53e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a542:	80c2      	strh	r2, [r0, #6]
 800a544:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a548:	2204      	movs	r2, #4
 800a54a:	2300      	movs	r3, #0
 800a54c:	2103      	movs	r1, #3
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 fa0c 	bl	800a96c <uxr_buffer_submessage_header>
 800a554:	a901      	add	r1, sp, #4
 800a556:	4620      	mov	r0, r4
 800a558:	f001 fa0a 	bl	800b970 <uxr_serialize_DELETE_Payload>
 800a55c:	b002      	add	sp, #8
 800a55e:	bd10      	pop	{r4, pc}
 800a560:	080118cc 	.word	0x080118cc

0800a564 <uxr_read_create_session_status>:
 800a564:	b510      	push	{r4, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	a901      	add	r1, sp, #4
 800a56e:	f001 fa0f 	bl	800b990 <uxr_deserialize_STATUS_AGENT_Payload>
 800a572:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a576:	7163      	strb	r3, [r4, #5]
 800a578:	b008      	add	sp, #32
 800a57a:	bd10      	pop	{r4, pc}

0800a57c <uxr_read_delete_session_status>:
 800a57c:	b510      	push	{r4, lr}
 800a57e:	4604      	mov	r4, r0
 800a580:	b084      	sub	sp, #16
 800a582:	4608      	mov	r0, r1
 800a584:	a902      	add	r1, sp, #8
 800a586:	f001 fa33 	bl	800b9f0 <uxr_deserialize_STATUS_Payload>
 800a58a:	88e3      	ldrh	r3, [r4, #6]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d001      	beq.n	800a594 <uxr_read_delete_session_status+0x18>
 800a590:	b004      	add	sp, #16
 800a592:	bd10      	pop	{r4, pc}
 800a594:	f10d 000a 	add.w	r0, sp, #10
 800a598:	f7ff f836 	bl	8009608 <uxr_object_id_from_raw>
 800a59c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a5a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a5a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	bf04      	itt	eq
 800a5ae:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800a5b2:	7163      	strbeq	r3, [r4, #5]
 800a5b4:	b004      	add	sp, #16
 800a5b6:	bd10      	pop	{r4, pc}

0800a5b8 <uxr_stamp_create_session_header>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	b08a      	sub	sp, #40	; 0x28
 800a5be:	4604      	mov	r4, r0
 800a5c0:	eb0d 0002 	add.w	r0, sp, r2
 800a5c4:	f7fe fe48 	bl	8009258 <ucdr_init_buffer>
 800a5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5cc:	9400      	str	r4, [sp, #0]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800a5d6:	a802      	add	r0, sp, #8
 800a5d8:	f000 fbc2 	bl	800ad60 <uxr_serialize_message_header>
 800a5dc:	b00a      	add	sp, #40	; 0x28
 800a5de:	bd10      	pop	{r4, pc}

0800a5e0 <uxr_stamp_session_header>:
 800a5e0:	b530      	push	{r4, r5, lr}
 800a5e2:	b08d      	sub	sp, #52	; 0x34
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	9203      	str	r2, [sp, #12]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	a804      	add	r0, sp, #16
 800a5ee:	2208      	movs	r2, #8
 800a5f0:	f7fe fe32 	bl	8009258 <ucdr_init_buffer>
 800a5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	9400      	str	r4, [sp, #0]
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	a804      	add	r0, sp, #16
 800a600:	f000 fbae 	bl	800ad60 <uxr_serialize_message_header>
 800a604:	b00d      	add	sp, #52	; 0x34
 800a606:	bd30      	pop	{r4, r5, pc}

0800a608 <uxr_read_session_header>:
 800a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60c:	4607      	mov	r7, r0
 800a60e:	b084      	sub	sp, #16
 800a610:	4608      	mov	r0, r1
 800a612:	460c      	mov	r4, r1
 800a614:	4615      	mov	r5, r2
 800a616:	461e      	mov	r6, r3
 800a618:	f7fe fe4e 	bl	80092b8 <ucdr_buffer_remaining>
 800a61c:	2808      	cmp	r0, #8
 800a61e:	d803      	bhi.n	800a628 <uxr_read_session_header+0x20>
 800a620:	2000      	movs	r0, #0
 800a622:	b004      	add	sp, #16
 800a624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a628:	f10d 080c 	add.w	r8, sp, #12
 800a62c:	4633      	mov	r3, r6
 800a62e:	462a      	mov	r2, r5
 800a630:	f8cd 8000 	str.w	r8, [sp]
 800a634:	4620      	mov	r0, r4
 800a636:	f10d 010b 	add.w	r1, sp, #11
 800a63a:	f000 fbaf 	bl	800ad9c <uxr_deserialize_message_header>
 800a63e:	783a      	ldrb	r2, [r7, #0]
 800a640:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800a644:	4293      	cmp	r3, r2
 800a646:	d1eb      	bne.n	800a620 <uxr_read_session_header+0x18>
 800a648:	061b      	lsls	r3, r3, #24
 800a64a:	d41c      	bmi.n	800a686 <uxr_read_session_header+0x7e>
 800a64c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800a650:	787b      	ldrb	r3, [r7, #1]
 800a652:	429a      	cmp	r2, r3
 800a654:	d003      	beq.n	800a65e <uxr_read_session_header+0x56>
 800a656:	2001      	movs	r0, #1
 800a658:	f080 0001 	eor.w	r0, r0, #1
 800a65c:	e7e1      	b.n	800a622 <uxr_read_session_header+0x1a>
 800a65e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800a662:	78bb      	ldrb	r3, [r7, #2]
 800a664:	429a      	cmp	r2, r3
 800a666:	f107 0102 	add.w	r1, r7, #2
 800a66a:	d1f4      	bne.n	800a656 <uxr_read_session_header+0x4e>
 800a66c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800a670:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a674:	429a      	cmp	r2, r3
 800a676:	d1ee      	bne.n	800a656 <uxr_read_session_header+0x4e>
 800a678:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800a67c:	784b      	ldrb	r3, [r1, #1]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d1e9      	bne.n	800a656 <uxr_read_session_header+0x4e>
 800a682:	2000      	movs	r0, #0
 800a684:	e7e8      	b.n	800a658 <uxr_read_session_header+0x50>
 800a686:	2001      	movs	r0, #1
 800a688:	e7cb      	b.n	800a622 <uxr_read_session_header+0x1a>
 800a68a:	bf00      	nop

0800a68c <uxr_session_header_offset>:
 800a68c:	f990 3000 	ldrsb.w	r3, [r0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfac      	ite	ge
 800a694:	2008      	movge	r0, #8
 800a696:	2004      	movlt	r0, #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop

0800a69c <uxr_init_base_object_request>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	88c3      	ldrh	r3, [r0, #6]
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800a6a6:	9101      	str	r1, [sp, #4]
 800a6a8:	f1a3 010a 	sub.w	r1, r3, #10
 800a6ac:	b289      	uxth	r1, r1
 800a6ae:	42a1      	cmp	r1, r4
 800a6b0:	d80e      	bhi.n	800a6d0 <uxr_init_base_object_request+0x34>
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	b29c      	uxth	r4, r3
 800a6b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	80c4      	strh	r4, [r0, #6]
 800a6be:	9801      	ldr	r0, [sp, #4]
 800a6c0:	7011      	strb	r1, [r2, #0]
 800a6c2:	7053      	strb	r3, [r2, #1]
 800a6c4:	1c91      	adds	r1, r2, #2
 800a6c6:	f7fe ffb3 	bl	8009630 <uxr_object_id_to_raw>
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	b002      	add	sp, #8
 800a6ce:	bd10      	pop	{r4, pc}
 800a6d0:	230a      	movs	r3, #10
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	461c      	mov	r4, r3
 800a6d6:	e7f1      	b.n	800a6bc <uxr_init_base_object_request+0x20>

0800a6d8 <uxr_parse_base_object_request>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	4604      	mov	r4, r0
 800a6dc:	3002      	adds	r0, #2
 800a6de:	460d      	mov	r5, r1
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	f7fe ff91 	bl	8009608 <uxr_object_id_from_raw>
 800a6e6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800a6ea:	8028      	strh	r0, [r5, #0]
 800a6ec:	806b      	strh	r3, [r5, #2]
 800a6ee:	7822      	ldrb	r2, [r4, #0]
 800a6f0:	7863      	ldrb	r3, [r4, #1]
 800a6f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a6f6:	8033      	strh	r3, [r6, #0]
 800a6f8:	bd70      	pop	{r4, r5, r6, pc}
 800a6fa:	bf00      	nop

0800a6fc <uxr_stream_id>:
 800a6fc:	2901      	cmp	r1, #1
 800a6fe:	b082      	sub	sp, #8
 800a700:	d01d      	beq.n	800a73e <uxr_stream_id+0x42>
 800a702:	2902      	cmp	r1, #2
 800a704:	f04f 0c00 	mov.w	ip, #0
 800a708:	d01e      	beq.n	800a748 <uxr_stream_id+0x4c>
 800a70a:	2300      	movs	r3, #0
 800a70c:	f36c 0307 	bfi	r3, ip, #0, #8
 800a710:	f360 230f 	bfi	r3, r0, #8, #8
 800a714:	f361 4317 	bfi	r3, r1, #16, #8
 800a718:	f362 631f 	bfi	r3, r2, #24, #8
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	2000      	movs	r0, #0
 800a720:	f362 0007 	bfi	r0, r2, #0, #8
 800a724:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a728:	f362 200f 	bfi	r0, r2, #8, #8
 800a72c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a730:	f362 4017 	bfi	r0, r2, #16, #8
 800a734:	0e1b      	lsrs	r3, r3, #24
 800a736:	f363 601f 	bfi	r0, r3, #24, #8
 800a73a:	b002      	add	sp, #8
 800a73c:	4770      	bx	lr
 800a73e:	f100 0c01 	add.w	ip, r0, #1
 800a742:	fa5f fc8c 	uxtb.w	ip, ip
 800a746:	e7e0      	b.n	800a70a <uxr_stream_id+0xe>
 800a748:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800a74c:	e7dd      	b.n	800a70a <uxr_stream_id+0xe>
 800a74e:	bf00      	nop

0800a750 <uxr_stream_id_from_raw>:
 800a750:	b082      	sub	sp, #8
 800a752:	b130      	cbz	r0, 800a762 <uxr_stream_id_from_raw+0x12>
 800a754:	0603      	lsls	r3, r0, #24
 800a756:	d420      	bmi.n	800a79a <uxr_stream_id_from_raw+0x4a>
 800a758:	1e42      	subs	r2, r0, #1
 800a75a:	b2d2      	uxtb	r2, r2
 800a75c:	f04f 0c01 	mov.w	ip, #1
 800a760:	e001      	b.n	800a766 <uxr_stream_id_from_raw+0x16>
 800a762:	4684      	mov	ip, r0
 800a764:	4602      	mov	r2, r0
 800a766:	2300      	movs	r3, #0
 800a768:	f360 0307 	bfi	r3, r0, #0, #8
 800a76c:	f362 230f 	bfi	r3, r2, #8, #8
 800a770:	f36c 4317 	bfi	r3, ip, #16, #8
 800a774:	f361 631f 	bfi	r3, r1, #24, #8
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	2000      	movs	r0, #0
 800a77c:	f362 0007 	bfi	r0, r2, #0, #8
 800a780:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a784:	f362 200f 	bfi	r0, r2, #8, #8
 800a788:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a78c:	f362 4017 	bfi	r0, r2, #16, #8
 800a790:	0e1b      	lsrs	r3, r3, #24
 800a792:	f363 601f 	bfi	r0, r3, #24, #8
 800a796:	b002      	add	sp, #8
 800a798:	4770      	bx	lr
 800a79a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800a79e:	f04f 0c02 	mov.w	ip, #2
 800a7a2:	e7e0      	b.n	800a766 <uxr_stream_id_from_raw+0x16>

0800a7a4 <uxr_init_stream_storage>:
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	7403      	strb	r3, [r0, #16]
 800a7a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a7ac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800a7b0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop

0800a7b8 <uxr_reset_stream_storage>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	7c03      	ldrb	r3, [r0, #16]
 800a7bc:	4604      	mov	r4, r0
 800a7be:	b153      	cbz	r3, 800a7d6 <uxr_reset_stream_storage+0x1e>
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	2500      	movs	r5, #0
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f003 ff35 	bl	800e634 <uxr_reset_output_best_effort_stream>
 800a7ca:	7c23      	ldrb	r3, [r4, #16]
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	42ab      	cmp	r3, r5
 800a7d0:	f106 0610 	add.w	r6, r6, #16
 800a7d4:	d8f6      	bhi.n	800a7c4 <uxr_reset_stream_storage+0xc>
 800a7d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a7da:	b163      	cbz	r3, 800a7f6 <uxr_reset_stream_storage+0x3e>
 800a7dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f003 fd28 	bl	800e238 <uxr_reset_input_best_effort_stream>
 800a7e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	42ab      	cmp	r3, r5
 800a7f0:	f106 0602 	add.w	r6, r6, #2
 800a7f4:	d8f5      	bhi.n	800a7e2 <uxr_reset_stream_storage+0x2a>
 800a7f6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a7fa:	b163      	cbz	r3, 800a816 <uxr_reset_stream_storage+0x5e>
 800a7fc:	f104 0618 	add.w	r6, r4, #24
 800a800:	2500      	movs	r5, #0
 800a802:	4630      	mov	r0, r6
 800a804:	f003 ffc2 	bl	800e78c <uxr_reset_output_reliable_stream>
 800a808:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a80c:	3501      	adds	r5, #1
 800a80e:	42ab      	cmp	r3, r5
 800a810:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a814:	d8f5      	bhi.n	800a802 <uxr_reset_stream_storage+0x4a>
 800a816:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a81a:	b163      	cbz	r3, 800a836 <uxr_reset_stream_storage+0x7e>
 800a81c:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800a820:	2500      	movs	r5, #0
 800a822:	4630      	mov	r0, r6
 800a824:	f003 fd7c 	bl	800e320 <uxr_reset_input_reliable_stream>
 800a828:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a82c:	3501      	adds	r5, #1
 800a82e:	42ab      	cmp	r3, r5
 800a830:	f106 0618 	add.w	r6, r6, #24
 800a834:	d8f5      	bhi.n	800a822 <uxr_reset_stream_storage+0x6a>
 800a836:	bd70      	pop	{r4, r5, r6, pc}

0800a838 <uxr_add_output_best_effort_buffer>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	7c04      	ldrb	r4, [r0, #16]
 800a83c:	f104 0c01 	add.w	ip, r4, #1
 800a840:	b082      	sub	sp, #8
 800a842:	f880 c010 	strb.w	ip, [r0, #16]
 800a846:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800a84a:	f003 fee9 	bl	800e620 <uxr_init_output_best_effort_stream>
 800a84e:	2201      	movs	r2, #1
 800a850:	4611      	mov	r1, r2
 800a852:	4620      	mov	r0, r4
 800a854:	b002      	add	sp, #8
 800a856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85a:	f7ff bf4f 	b.w	800a6fc <uxr_stream_id>
 800a85e:	bf00      	nop

0800a860 <uxr_add_output_reliable_buffer>:
 800a860:	b510      	push	{r4, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	4684      	mov	ip, r0
 800a866:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a86a:	9000      	str	r0, [sp, #0]
 800a86c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800a870:	2028      	movs	r0, #40	; 0x28
 800a872:	fb00 c004 	mla	r0, r0, r4, ip
 800a876:	f104 0e01 	add.w	lr, r4, #1
 800a87a:	3018      	adds	r0, #24
 800a87c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800a880:	f003 ff4c 	bl	800e71c <uxr_init_output_reliable_stream>
 800a884:	2201      	movs	r2, #1
 800a886:	2102      	movs	r1, #2
 800a888:	4620      	mov	r0, r4
 800a88a:	b004      	add	sp, #16
 800a88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a890:	f7ff bf34 	b.w	800a6fc <uxr_stream_id>

0800a894 <uxr_add_input_best_effort_buffer>:
 800a894:	b510      	push	{r4, lr}
 800a896:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800a89a:	4603      	mov	r3, r0
 800a89c:	1c62      	adds	r2, r4, #1
 800a89e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a8a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ac:	f003 fcc0 	bl	800e230 <uxr_init_input_best_effort_stream>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	b002      	add	sp, #8
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	f7ff bf1e 	b.w	800a6fc <uxr_stream_id>

0800a8c0 <uxr_add_input_reliable_buffer>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	4684      	mov	ip, r0
 800a8c6:	9806      	ldr	r0, [sp, #24]
 800a8c8:	9000      	str	r0, [sp, #0]
 800a8ca:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800a8ce:	2018      	movs	r0, #24
 800a8d0:	fb00 c004 	mla	r0, r0, r4, ip
 800a8d4:	f104 0e01 	add.w	lr, r4, #1
 800a8d8:	3048      	adds	r0, #72	; 0x48
 800a8da:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800a8de:	f003 fcf3 	bl	800e2c8 <uxr_init_input_reliable_stream>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2102      	movs	r1, #2
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	b004      	add	sp, #16
 800a8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ee:	f7ff bf05 	b.w	800a6fc <uxr_stream_id>
 800a8f2:	bf00      	nop

0800a8f4 <uxr_get_output_best_effort_stream>:
 800a8f4:	7c03      	ldrb	r3, [r0, #16]
 800a8f6:	428b      	cmp	r3, r1
 800a8f8:	bf8c      	ite	hi
 800a8fa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800a8fe:	2000      	movls	r0, #0
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop

0800a904 <uxr_get_output_reliable_stream>:
 800a904:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf83      	ittte	hi
 800a90c:	2328      	movhi	r3, #40	; 0x28
 800a90e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a912:	3018      	addhi	r0, #24
 800a914:	2000      	movls	r0, #0
 800a916:	4770      	bx	lr

0800a918 <uxr_get_input_best_effort_stream>:
 800a918:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a91c:	428b      	cmp	r3, r1
 800a91e:	bf86      	itte	hi
 800a920:	3121      	addhi	r1, #33	; 0x21
 800a922:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800a926:	2000      	movls	r0, #0
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop

0800a92c <uxr_get_input_reliable_stream>:
 800a92c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800a930:	428b      	cmp	r3, r1
 800a932:	bf83      	ittte	hi
 800a934:	2318      	movhi	r3, #24
 800a936:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a93a:	3048      	addhi	r0, #72	; 0x48
 800a93c:	2000      	movls	r0, #0
 800a93e:	4770      	bx	lr

0800a940 <uxr_output_streams_confirmed>:
 800a940:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a944:	b183      	cbz	r3, 800a968 <uxr_output_streams_confirmed+0x28>
 800a946:	b570      	push	{r4, r5, r6, lr}
 800a948:	4606      	mov	r6, r0
 800a94a:	f100 0518 	add.w	r5, r0, #24
 800a94e:	2400      	movs	r4, #0
 800a950:	e001      	b.n	800a956 <uxr_output_streams_confirmed+0x16>
 800a952:	3528      	adds	r5, #40	; 0x28
 800a954:	b138      	cbz	r0, 800a966 <uxr_output_streams_confirmed+0x26>
 800a956:	4628      	mov	r0, r5
 800a958:	f004 f988 	bl	800ec6c <uxr_is_output_up_to_date>
 800a95c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800a960:	3401      	adds	r4, #1
 800a962:	42a3      	cmp	r3, r4
 800a964:	d8f5      	bhi.n	800a952 <uxr_output_streams_confirmed+0x12>
 800a966:	bd70      	pop	{r4, r5, r6, pc}
 800a968:	2001      	movs	r0, #1
 800a96a:	4770      	bx	lr

0800a96c <uxr_buffer_submessage_header>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	4604      	mov	r4, r0
 800a970:	460e      	mov	r6, r1
 800a972:	2104      	movs	r1, #4
 800a974:	4615      	mov	r5, r2
 800a976:	461f      	mov	r7, r3
 800a978:	f7fe fc88 	bl	800928c <ucdr_align_to>
 800a97c:	2301      	movs	r3, #1
 800a97e:	ea47 0203 	orr.w	r2, r7, r3
 800a982:	4631      	mov	r1, r6
 800a984:	7523      	strb	r3, [r4, #20]
 800a986:	4620      	mov	r0, r4
 800a988:	462b      	mov	r3, r5
 800a98a:	f000 fa27 	bl	800addc <uxr_serialize_submessage_header>
 800a98e:	4620      	mov	r0, r4
 800a990:	f7fe fc92 	bl	80092b8 <ucdr_buffer_remaining>
 800a994:	42a8      	cmp	r0, r5
 800a996:	bf34      	ite	cc
 800a998:	2000      	movcc	r0, #0
 800a99a:	2001      	movcs	r0, #1
 800a99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a99e:	bf00      	nop

0800a9a0 <uxr_read_submessage_header>:
 800a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	460d      	mov	r5, r1
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	4616      	mov	r6, r2
 800a9ac:	4698      	mov	r8, r3
 800a9ae:	f7fe fc6d 	bl	800928c <ucdr_align_to>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7fe fc80 	bl	80092b8 <ucdr_buffer_remaining>
 800a9b8:	2803      	cmp	r0, #3
 800a9ba:	bf8c      	ite	hi
 800a9bc:	2701      	movhi	r7, #1
 800a9be:	2700      	movls	r7, #0
 800a9c0:	d802      	bhi.n	800a9c8 <uxr_read_submessage_header+0x28>
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	4633      	mov	r3, r6
 800a9ca:	4642      	mov	r2, r8
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	f000 fa18 	bl	800ae04 <uxr_deserialize_submessage_header>
 800a9d4:	f898 3000 	ldrb.w	r3, [r8]
 800a9d8:	f003 0201 	and.w	r2, r3, #1
 800a9dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a9e0:	f888 3000 	strb.w	r3, [r8]
 800a9e4:	7522      	strb	r2, [r4, #20]
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9ec <uxr_submessage_padding>:
 800a9ec:	f010 0003 	ands.w	r0, r0, #3
 800a9f0:	bf18      	it	ne
 800a9f2:	f1c0 0004 	rsbne	r0, r0, #4
 800a9f6:	4770      	bx	lr

0800a9f8 <uxr_millis>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	4669      	mov	r1, sp
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f7f6 fc1a 	bl	8001238 <clock_gettime>
 800aa04:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800aa08:	4906      	ldr	r1, [pc, #24]	; (800aa24 <uxr_millis+0x2c>)
 800aa0a:	fba0 0301 	umull	r0, r3, r0, r1
 800aa0e:	1900      	adds	r0, r0, r4
 800aa10:	fb01 3102 	mla	r1, r1, r2, r3
 800aa14:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800aa18:	4a03      	ldr	r2, [pc, #12]	; (800aa28 <uxr_millis+0x30>)
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f7f5 fc48 	bl	80002b0 <__aeabi_ldivmod>
 800aa20:	b004      	add	sp, #16
 800aa22:	bd10      	pop	{r4, pc}
 800aa24:	3b9aca00 	.word	0x3b9aca00
 800aa28:	000f4240 	.word	0x000f4240

0800aa2c <uxr_nanos>:
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	4669      	mov	r1, sp
 800aa32:	2001      	movs	r0, #1
 800aa34:	f7f6 fc00 	bl	8001238 <clock_gettime>
 800aa38:	4a06      	ldr	r2, [pc, #24]	; (800aa54 <uxr_nanos+0x28>)
 800aa3a:	9800      	ldr	r0, [sp, #0]
 800aa3c:	9902      	ldr	r1, [sp, #8]
 800aa3e:	9c01      	ldr	r4, [sp, #4]
 800aa40:	fba0 0302 	umull	r0, r3, r0, r2
 800aa44:	1840      	adds	r0, r0, r1
 800aa46:	fb02 3304 	mla	r3, r2, r4, r3
 800aa4a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800aa4e:	b004      	add	sp, #16
 800aa50:	bd10      	pop	{r4, pc}
 800aa52:	bf00      	nop
 800aa54:	3b9aca00 	.word	0x3b9aca00

0800aa58 <on_full_output_buffer_fragmented>:
 800aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	b08a      	sub	sp, #40	; 0x28
 800aa60:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800aa64:	4606      	mov	r6, r0
 800aa66:	f104 0008 	add.w	r0, r4, #8
 800aa6a:	f7ff ff4b 	bl	800a904 <uxr_get_output_reliable_stream>
 800aa6e:	4605      	mov	r5, r0
 800aa70:	f004 f906 	bl	800ec80 <get_available_free_slots>
 800aa74:	b968      	cbnz	r0, 800aa92 <on_full_output_buffer_fragmented+0x3a>
 800aa76:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4798      	blx	r3
 800aa7e:	b918      	cbnz	r0, 800aa88 <on_full_output_buffer_fragmented+0x30>
 800aa80:	2001      	movs	r0, #1
 800aa82:	b00a      	add	sp, #40	; 0x28
 800aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f004 f8f9 	bl	800ec80 <get_available_free_slots>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d0f6      	beq.n	800aa80 <on_full_output_buffer_fragmented+0x28>
 800aa92:	8929      	ldrh	r1, [r5, #8]
 800aa94:	89eb      	ldrh	r3, [r5, #14]
 800aa96:	7b28      	ldrb	r0, [r5, #12]
 800aa98:	686a      	ldr	r2, [r5, #4]
 800aa9a:	fbb2 f8f1 	udiv	r8, r2, r1
 800aa9e:	fbb3 f2f1 	udiv	r2, r3, r1
 800aaa2:	fb01 3112 	mls	r1, r1, r2, r3
 800aaa6:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800aaaa:	b289      	uxth	r1, r1
 800aaac:	fb08 f101 	mul.w	r1, r8, r1
 800aab0:	30fc      	adds	r0, #252	; 0xfc
 800aab2:	f1a8 0804 	sub.w	r8, r8, #4
 800aab6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800aaba:	4440      	add	r0, r8
 800aabc:	b287      	uxth	r7, r0
 800aabe:	1bdb      	subs	r3, r3, r7
 800aac0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	3104      	adds	r1, #4
 800aac8:	4419      	add	r1, r3
 800aaca:	4642      	mov	r2, r8
 800aacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	a802      	add	r0, sp, #8
 800aad4:	2300      	movs	r3, #0
 800aad6:	f7fe fbad 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800aada:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800aade:	f102 0308 	add.w	r3, r2, #8
 800aae2:	4543      	cmp	r3, r8
 800aae4:	d928      	bls.n	800ab38 <on_full_output_buffer_fragmented+0xe0>
 800aae6:	463a      	mov	r2, r7
 800aae8:	2300      	movs	r3, #0
 800aaea:	210d      	movs	r1, #13
 800aaec:	a802      	add	r0, sp, #8
 800aaee:	f7ff ff3d 	bl	800a96c <uxr_buffer_submessage_header>
 800aaf2:	8929      	ldrh	r1, [r5, #8]
 800aaf4:	89eb      	ldrh	r3, [r5, #14]
 800aaf6:	fbb3 f2f1 	udiv	r2, r3, r1
 800aafa:	fb01 3312 	mls	r3, r1, r2, r3
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	686a      	ldr	r2, [r5, #4]
 800ab02:	fbb2 f2f1 	udiv	r2, r2, r1
 800ab06:	fb02 f303 	mul.w	r3, r2, r3
 800ab0a:	682a      	ldr	r2, [r5, #0]
 800ab0c:	f842 8003 	str.w	r8, [r2, r3]
 800ab10:	89e8      	ldrh	r0, [r5, #14]
 800ab12:	2101      	movs	r1, #1
 800ab14:	f004 f9ca 	bl	800eeac <uxr_seq_num_add>
 800ab18:	9904      	ldr	r1, [sp, #16]
 800ab1a:	9a03      	ldr	r2, [sp, #12]
 800ab1c:	81e8      	strh	r0, [r5, #14]
 800ab1e:	1a52      	subs	r2, r2, r1
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7fe fb99 	bl	8009258 <ucdr_init_buffer>
 800ab26:	4630      	mov	r0, r6
 800ab28:	490f      	ldr	r1, [pc, #60]	; (800ab68 <on_full_output_buffer_fragmented+0x110>)
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	f7fe fb68 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800ab30:	2000      	movs	r0, #0
 800ab32:	b00a      	add	sp, #40	; 0x28
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	b292      	uxth	r2, r2
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	210d      	movs	r1, #13
 800ab3e:	a802      	add	r0, sp, #8
 800ab40:	f7ff ff14 	bl	800a96c <uxr_buffer_submessage_header>
 800ab44:	8928      	ldrh	r0, [r5, #8]
 800ab46:	89eb      	ldrh	r3, [r5, #14]
 800ab48:	fbb3 f1f0 	udiv	r1, r3, r0
 800ab4c:	fb00 3311 	mls	r3, r0, r1, r3
 800ab50:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800ab54:	6869      	ldr	r1, [r5, #4]
 800ab56:	fbb1 f1f0 	udiv	r1, r1, r0
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	fb01 f303 	mul.w	r3, r1, r3
 800ab60:	6829      	ldr	r1, [r5, #0]
 800ab62:	3208      	adds	r2, #8
 800ab64:	50ca      	str	r2, [r1, r3]
 800ab66:	e7d3      	b.n	800ab10 <on_full_output_buffer_fragmented+0xb8>
 800ab68:	0800aa59 	.word	0x0800aa59

0800ab6c <uxr_prepare_output_stream>:
 800ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	2707      	movs	r7, #7
 800ab72:	9202      	str	r2, [sp, #8]
 800ab74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab76:	9103      	str	r1, [sp, #12]
 800ab78:	2500      	movs	r5, #0
 800ab7a:	3204      	adds	r2, #4
 800ab7c:	e9cd 7500 	strd	r7, r5, [sp]
 800ab80:	461c      	mov	r4, r3
 800ab82:	4606      	mov	r6, r0
 800ab84:	f7ff fc54 	bl	800a430 <uxr_prepare_stream_to_write_submessage>
 800ab88:	f080 0201 	eor.w	r2, r0, #1
 800ab8c:	b2d2      	uxtb	r2, r2
 800ab8e:	75a2      	strb	r2, [r4, #22]
 800ab90:	b112      	cbz	r2, 800ab98 <uxr_prepare_output_stream+0x2c>
 800ab92:	4628      	mov	r0, r5
 800ab94:	b007      	add	sp, #28
 800ab96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab98:	aa05      	add	r2, sp, #20
 800ab9a:	9902      	ldr	r1, [sp, #8]
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7ff fd7d 	bl	800a69c <uxr_init_base_object_request>
 800aba2:	a905      	add	r1, sp, #20
 800aba4:	4605      	mov	r5, r0
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 ffa0 	bl	800baec <uxr_serialize_WRITE_DATA_Payload_Data>
 800abac:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800abb0:	69a6      	ldr	r6, [r4, #24]
 800abb2:	69e7      	ldr	r7, [r4, #28]
 800abb4:	1a52      	subs	r2, r2, r1
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7fe fb4e 	bl	8009258 <ucdr_init_buffer>
 800abbc:	4620      	mov	r0, r4
 800abbe:	463a      	mov	r2, r7
 800abc0:	4631      	mov	r1, r6
 800abc2:	f7fe fb1d 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800abc6:	4628      	mov	r0, r5
 800abc8:	b007      	add	sp, #28
 800abca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abcc <uxr_prepare_output_stream_fragmented>:
 800abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	b091      	sub	sp, #68	; 0x44
 800abd2:	4605      	mov	r5, r0
 800abd4:	9105      	str	r1, [sp, #20]
 800abd6:	3008      	adds	r0, #8
 800abd8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800abdc:	461e      	mov	r6, r3
 800abde:	9204      	str	r2, [sp, #16]
 800abe0:	f7ff fe90 	bl	800a904 <uxr_get_output_reliable_stream>
 800abe4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	f000 8091 	beq.w	800ad10 <uxr_prepare_output_stream_fragmented+0x144>
 800abee:	4604      	mov	r4, r0
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f000 808d 	beq.w	800ad10 <uxr_prepare_output_stream_fragmented+0x144>
 800abf6:	f004 f843 	bl	800ec80 <get_available_free_slots>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	f000 8083 	beq.w	800ad06 <uxr_prepare_output_stream_fragmented+0x13a>
 800ac00:	8922      	ldrh	r2, [r4, #8]
 800ac02:	89e7      	ldrh	r7, [r4, #14]
 800ac04:	fbb7 f9f2 	udiv	r9, r7, r2
 800ac08:	fb02 7919 	mls	r9, r2, r9, r7
 800ac0c:	fa1f f989 	uxth.w	r9, r9
 800ac10:	6863      	ldr	r3, [r4, #4]
 800ac12:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	9203      	str	r2, [sp, #12]
 800ac1a:	fb02 f909 	mul.w	r9, r2, r9
 800ac1e:	f109 0904 	add.w	r9, r9, #4
 800ac22:	4499      	add	r9, r3
 800ac24:	7b23      	ldrb	r3, [r4, #12]
 800ac26:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ac2a:	4543      	cmp	r3, r8
 800ac2c:	f1a2 0b04 	sub.w	fp, r2, #4
 800ac30:	d37a      	bcc.n	800ad28 <uxr_prepare_output_stream_fragmented+0x15c>
 800ac32:	f1ab 0a04 	sub.w	sl, fp, #4
 800ac36:	ebaa 0a03 	sub.w	sl, sl, r3
 800ac3a:	465a      	mov	r2, fp
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4649      	mov	r1, r9
 800ac40:	a808      	add	r0, sp, #32
 800ac42:	f8cd 8000 	str.w	r8, [sp]
 800ac46:	f7fe faf5 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800ac4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ac4c:	fa1f fa8a 	uxth.w	sl, sl
 800ac50:	4652      	mov	r2, sl
 800ac52:	f103 0a08 	add.w	sl, r3, #8
 800ac56:	45da      	cmp	sl, fp
 800ac58:	bf34      	ite	cc
 800ac5a:	2302      	movcc	r3, #2
 800ac5c:	2300      	movcs	r3, #0
 800ac5e:	210d      	movs	r1, #13
 800ac60:	a808      	add	r0, sp, #32
 800ac62:	f7ff fe83 	bl	800a96c <uxr_buffer_submessage_header>
 800ac66:	8921      	ldrh	r1, [r4, #8]
 800ac68:	fbb7 f2f1 	udiv	r2, r7, r1
 800ac6c:	fb01 7212 	mls	r2, r1, r2, r7
 800ac70:	b292      	uxth	r2, r2
 800ac72:	6863      	ldr	r3, [r4, #4]
 800ac74:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac78:	fb02 f303 	mul.w	r3, r2, r3
 800ac7c:	6822      	ldr	r2, [r4, #0]
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f842 b003 	str.w	fp, [r2, r3]
 800ac84:	2101      	movs	r1, #1
 800ac86:	f004 f911 	bl	800eeac <uxr_seq_num_add>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	f108 0104 	add.w	r1, r8, #4
 800ac90:	f1a3 0208 	sub.w	r2, r3, #8
 800ac94:	eba2 0208 	sub.w	r2, r2, r8
 800ac98:	4449      	add	r1, r9
 800ac9a:	4607      	mov	r7, r0
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7fe fadb 	bl	8009258 <ucdr_init_buffer>
 800aca2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aca4:	81e7      	strh	r7, [r4, #14]
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800acac:	bf28      	it	cs
 800acae:	2200      	movcs	r2, #0
 800acb0:	2300      	movs	r3, #0
 800acb2:	b292      	uxth	r2, r2
 800acb4:	2107      	movs	r1, #7
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff fe58 	bl	800a96c <uxr_buffer_submessage_header>
 800acbc:	9904      	ldr	r1, [sp, #16]
 800acbe:	aa07      	add	r2, sp, #28
 800acc0:	4628      	mov	r0, r5
 800acc2:	f7ff fceb 	bl	800a69c <uxr_init_base_object_request>
 800acc6:	4604      	mov	r4, r0
 800acc8:	b318      	cbz	r0, 800ad12 <uxr_prepare_output_stream_fragmented+0x146>
 800acca:	a907      	add	r1, sp, #28
 800accc:	4630      	mov	r0, r6
 800acce:	f000 ff0d 	bl	800baec <uxr_serialize_WRITE_DATA_Payload_Data>
 800acd2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800acd6:	4630      	mov	r0, r6
 800acd8:	1a52      	subs	r2, r2, r1
 800acda:	f7fe fabd 	bl	8009258 <ucdr_init_buffer>
 800acde:	9b05      	ldr	r3, [sp, #20]
 800ace0:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800ace4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ace6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800acea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800acec:	491b      	ldr	r1, [pc, #108]	; (800ad5c <uxr_prepare_output_stream_fragmented+0x190>)
 800acee:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800acf2:	4630      	mov	r0, r6
 800acf4:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800acf8:	462a      	mov	r2, r5
 800acfa:	f7fe fa81 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800acfe:	4620      	mov	r0, r4
 800ad00:	b011      	add	sp, #68	; 0x44
 800ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad06:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	4798      	blx	r3
 800ad0e:	b920      	cbnz	r0, 800ad1a <uxr_prepare_output_stream_fragmented+0x14e>
 800ad10:	2400      	movs	r4, #0
 800ad12:	4620      	mov	r0, r4
 800ad14:	b011      	add	sp, #68	; 0x44
 800ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f003 ffb0 	bl	800ec80 <get_available_free_slots>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	f47f af6d 	bne.w	800ac00 <uxr_prepare_output_stream_fragmented+0x34>
 800ad26:	e7f3      	b.n	800ad10 <uxr_prepare_output_stream_fragmented+0x144>
 800ad28:	4638      	mov	r0, r7
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	f004 f8be 	bl	800eeac <uxr_seq_num_add>
 800ad30:	8921      	ldrh	r1, [r4, #8]
 800ad32:	fbb0 f2f1 	udiv	r2, r0, r1
 800ad36:	fb01 0912 	mls	r9, r1, r2, r0
 800ad3a:	fa1f f289 	uxth.w	r2, r9
 800ad3e:	6863      	ldr	r3, [r4, #4]
 800ad40:	fbb3 f9f1 	udiv	r9, r3, r1
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	fb02 f909 	mul.w	r9, r2, r9
 800ad4a:	f109 0904 	add.w	r9, r9, #4
 800ad4e:	4499      	add	r9, r3
 800ad50:	4607      	mov	r7, r0
 800ad52:	7b23      	ldrb	r3, [r4, #12]
 800ad54:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ad58:	e76b      	b.n	800ac32 <uxr_prepare_output_stream_fragmented+0x66>
 800ad5a:	bf00      	nop
 800ad5c:	0800aa59 	.word	0x0800aa59

0800ad60 <uxr_serialize_message_header>:
 800ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad62:	b083      	sub	sp, #12
 800ad64:	4616      	mov	r6, r2
 800ad66:	4604      	mov	r4, r0
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	9f08      	ldr	r7, [sp, #32]
 800ad6e:	f7fd fac7 	bl	8008300 <ucdr_serialize_uint8_t>
 800ad72:	4631      	mov	r1, r6
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7fd fac3 	bl	8008300 <ucdr_serialize_uint8_t>
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f7fd fb6a 	bl	8008458 <ucdr_serialize_endian_uint16_t>
 800ad84:	062b      	lsls	r3, r5, #24
 800ad86:	d501      	bpl.n	800ad8c <uxr_serialize_message_header+0x2c>
 800ad88:	b003      	add	sp, #12
 800ad8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	4639      	mov	r1, r7
 800ad90:	4620      	mov	r0, r4
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ad98:	f003 b850 	b.w	800de3c <ucdr_serialize_array_uint8_t>

0800ad9c <uxr_deserialize_message_header>:
 800ad9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	4616      	mov	r6, r2
 800ada2:	4604      	mov	r4, r0
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	460d      	mov	r5, r1
 800ada8:	9f08      	ldr	r7, [sp, #32]
 800adaa:	f7fd fabf 	bl	800832c <ucdr_deserialize_uint8_t>
 800adae:	4631      	mov	r1, r6
 800adb0:	4620      	mov	r0, r4
 800adb2:	f7fd fabb 	bl	800832c <ucdr_deserialize_uint8_t>
 800adb6:	9a01      	ldr	r2, [sp, #4]
 800adb8:	2101      	movs	r1, #1
 800adba:	4620      	mov	r0, r4
 800adbc:	f7fd fc40 	bl	8008640 <ucdr_deserialize_endian_uint16_t>
 800adc0:	f995 3000 	ldrsb.w	r3, [r5]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	da01      	bge.n	800adcc <uxr_deserialize_message_header+0x30>
 800adc8:	b003      	add	sp, #12
 800adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adcc:	2204      	movs	r2, #4
 800adce:	4639      	mov	r1, r7
 800add0:	4620      	mov	r0, r4
 800add2:	b003      	add	sp, #12
 800add4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800add8:	f003 b894 	b.w	800df04 <ucdr_deserialize_array_uint8_t>

0800addc <uxr_serialize_submessage_header>:
 800addc:	b530      	push	{r4, r5, lr}
 800adde:	b083      	sub	sp, #12
 800ade0:	4615      	mov	r5, r2
 800ade2:	4604      	mov	r4, r0
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	f7fd fa8b 	bl	8008300 <ucdr_serialize_uint8_t>
 800adea:	4629      	mov	r1, r5
 800adec:	4620      	mov	r0, r4
 800adee:	f7fd fa87 	bl	8008300 <ucdr_serialize_uint8_t>
 800adf2:	9a01      	ldr	r2, [sp, #4]
 800adf4:	2101      	movs	r1, #1
 800adf6:	4620      	mov	r0, r4
 800adf8:	b003      	add	sp, #12
 800adfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adfe:	f7fd bb2b 	b.w	8008458 <ucdr_serialize_endian_uint16_t>
 800ae02:	bf00      	nop

0800ae04 <uxr_deserialize_submessage_header>:
 800ae04:	b530      	push	{r4, r5, lr}
 800ae06:	b083      	sub	sp, #12
 800ae08:	4615      	mov	r5, r2
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	f7fd fa8d 	bl	800832c <ucdr_deserialize_uint8_t>
 800ae12:	4629      	mov	r1, r5
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7fd fa89 	bl	800832c <ucdr_deserialize_uint8_t>
 800ae1a:	9a01      	ldr	r2, [sp, #4]
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4620      	mov	r0, r4
 800ae20:	b003      	add	sp, #12
 800ae22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae26:	f7fd bc0b 	b.w	8008640 <ucdr_deserialize_endian_uint16_t>
 800ae2a:	bf00      	nop

0800ae2c <uxr_serialize_CLIENT_Representation>:
 800ae2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae30:	2204      	movs	r2, #4
 800ae32:	460e      	mov	r6, r1
 800ae34:	4605      	mov	r5, r0
 800ae36:	f003 f801 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	1d31      	adds	r1, r6, #4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f002 fffb 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800ae46:	4038      	ands	r0, r7
 800ae48:	2202      	movs	r2, #2
 800ae4a:	1db1      	adds	r1, r6, #6
 800ae4c:	b2c7      	uxtb	r7, r0
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f002 fff4 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800ae54:	2204      	movs	r2, #4
 800ae56:	4007      	ands	r7, r0
 800ae58:	f106 0108 	add.w	r1, r6, #8
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f002 ffed 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800ae62:	7b31      	ldrb	r1, [r6, #12]
 800ae64:	4007      	ands	r7, r0
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7fd fa4a 	bl	8008300 <ucdr_serialize_uint8_t>
 800ae6c:	7b71      	ldrb	r1, [r6, #13]
 800ae6e:	4007      	ands	r7, r0
 800ae70:	4628      	mov	r0, r5
 800ae72:	f7fd fa17 	bl	80082a4 <ucdr_serialize_bool>
 800ae76:	7b73      	ldrb	r3, [r6, #13]
 800ae78:	ea07 0800 	and.w	r8, r7, r0
 800ae7c:	b93b      	cbnz	r3, 800ae8e <uxr_serialize_CLIENT_Representation+0x62>
 800ae7e:	8bb1      	ldrh	r1, [r6, #28]
 800ae80:	4628      	mov	r0, r5
 800ae82:	f7fd fa69 	bl	8008358 <ucdr_serialize_uint16_t>
 800ae86:	ea08 0000 	and.w	r0, r8, r0
 800ae8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8e:	6931      	ldr	r1, [r6, #16]
 800ae90:	4628      	mov	r0, r5
 800ae92:	f7fd fc4b 	bl	800872c <ucdr_serialize_uint32_t>
 800ae96:	6933      	ldr	r3, [r6, #16]
 800ae98:	b1e3      	cbz	r3, 800aed4 <uxr_serialize_CLIENT_Representation+0xa8>
 800ae9a:	b1c0      	cbz	r0, 800aece <uxr_serialize_CLIENT_Representation+0xa2>
 800ae9c:	4637      	mov	r7, r6
 800ae9e:	f04f 0900 	mov.w	r9, #0
 800aea2:	e001      	b.n	800aea8 <uxr_serialize_CLIENT_Representation+0x7c>
 800aea4:	3708      	adds	r7, #8
 800aea6:	b194      	cbz	r4, 800aece <uxr_serialize_CLIENT_Representation+0xa2>
 800aea8:	6979      	ldr	r1, [r7, #20]
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f003 f8e6 	bl	800e07c <ucdr_serialize_string>
 800aeb0:	69b9      	ldr	r1, [r7, #24]
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f003 f8e1 	bl	800e07c <ucdr_serialize_string>
 800aeba:	6933      	ldr	r3, [r6, #16]
 800aebc:	f109 0901 	add.w	r9, r9, #1
 800aec0:	4004      	ands	r4, r0
 800aec2:	4599      	cmp	r9, r3
 800aec4:	b2e4      	uxtb	r4, r4
 800aec6:	d3ed      	bcc.n	800aea4 <uxr_serialize_CLIENT_Representation+0x78>
 800aec8:	ea08 0804 	and.w	r8, r8, r4
 800aecc:	e7d7      	b.n	800ae7e <uxr_serialize_CLIENT_Representation+0x52>
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	e7d4      	b.n	800ae7e <uxr_serialize_CLIENT_Representation+0x52>
 800aed4:	ea08 0800 	and.w	r8, r8, r0
 800aed8:	e7d1      	b.n	800ae7e <uxr_serialize_CLIENT_Representation+0x52>
 800aeda:	bf00      	nop

0800aedc <uxr_deserialize_CLIENT_Representation>:
 800aedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee0:	2204      	movs	r2, #4
 800aee2:	460c      	mov	r4, r1
 800aee4:	4605      	mov	r5, r0
 800aee6:	f003 f80d 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800aeea:	2202      	movs	r2, #2
 800aeec:	4607      	mov	r7, r0
 800aeee:	1d21      	adds	r1, r4, #4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f003 f807 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800aef6:	4038      	ands	r0, r7
 800aef8:	2202      	movs	r2, #2
 800aefa:	1da1      	adds	r1, r4, #6
 800aefc:	b2c6      	uxtb	r6, r0
 800aefe:	4628      	mov	r0, r5
 800af00:	f003 f800 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800af04:	2204      	movs	r2, #4
 800af06:	4006      	ands	r6, r0
 800af08:	f104 0108 	add.w	r1, r4, #8
 800af0c:	4628      	mov	r0, r5
 800af0e:	f002 fff9 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800af12:	f104 010c 	add.w	r1, r4, #12
 800af16:	4006      	ands	r6, r0
 800af18:	4628      	mov	r0, r5
 800af1a:	f7fd fa07 	bl	800832c <ucdr_deserialize_uint8_t>
 800af1e:	f104 010d 	add.w	r1, r4, #13
 800af22:	ea06 0700 	and.w	r7, r6, r0
 800af26:	4628      	mov	r0, r5
 800af28:	f7fd f9d2 	bl	80082d0 <ucdr_deserialize_bool>
 800af2c:	7b63      	ldrb	r3, [r4, #13]
 800af2e:	4007      	ands	r7, r0
 800af30:	b93b      	cbnz	r3, 800af42 <uxr_deserialize_CLIENT_Representation+0x66>
 800af32:	f104 011c 	add.w	r1, r4, #28
 800af36:	4628      	mov	r0, r5
 800af38:	f7fd fb0e 	bl	8008558 <ucdr_deserialize_uint16_t>
 800af3c:	4038      	ands	r0, r7
 800af3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af42:	f104 0110 	add.w	r1, r4, #16
 800af46:	4628      	mov	r0, r5
 800af48:	f7fd fd20 	bl	800898c <ucdr_deserialize_uint32_t>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d903      	bls.n	800af5a <uxr_deserialize_CLIENT_Representation+0x7e>
 800af52:	2301      	movs	r3, #1
 800af54:	75ab      	strb	r3, [r5, #22]
 800af56:	2700      	movs	r7, #0
 800af58:	e7eb      	b.n	800af32 <uxr_deserialize_CLIENT_Representation+0x56>
 800af5a:	b30b      	cbz	r3, 800afa0 <uxr_deserialize_CLIENT_Representation+0xc4>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d0fa      	beq.n	800af56 <uxr_deserialize_CLIENT_Representation+0x7a>
 800af60:	46a0      	mov	r8, r4
 800af62:	f04f 0900 	mov.w	r9, #0
 800af66:	e001      	b.n	800af6c <uxr_deserialize_CLIENT_Representation+0x90>
 800af68:	2e00      	cmp	r6, #0
 800af6a:	d0f4      	beq.n	800af56 <uxr_deserialize_CLIENT_Representation+0x7a>
 800af6c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800af70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af74:	4628      	mov	r0, r5
 800af76:	f003 f891 	bl	800e09c <ucdr_deserialize_string>
 800af7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af7e:	4606      	mov	r6, r0
 800af80:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800af84:	4628      	mov	r0, r5
 800af86:	f003 f889 	bl	800e09c <ucdr_deserialize_string>
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	f109 0901 	add.w	r9, r9, #1
 800af90:	4006      	ands	r6, r0
 800af92:	4599      	cmp	r9, r3
 800af94:	f108 0808 	add.w	r8, r8, #8
 800af98:	b2f6      	uxtb	r6, r6
 800af9a:	d3e5      	bcc.n	800af68 <uxr_deserialize_CLIENT_Representation+0x8c>
 800af9c:	4037      	ands	r7, r6
 800af9e:	e7c8      	b.n	800af32 <uxr_deserialize_CLIENT_Representation+0x56>
 800afa0:	4007      	ands	r7, r0
 800afa2:	e7c6      	b.n	800af32 <uxr_deserialize_CLIENT_Representation+0x56>

0800afa4 <uxr_serialize_AGENT_Representation>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	2204      	movs	r2, #4
 800afaa:	460f      	mov	r7, r1
 800afac:	4605      	mov	r5, r0
 800afae:	f002 ff45 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800afb2:	2202      	movs	r2, #2
 800afb4:	4604      	mov	r4, r0
 800afb6:	1d39      	adds	r1, r7, #4
 800afb8:	4628      	mov	r0, r5
 800afba:	f002 ff3f 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800afbe:	4020      	ands	r0, r4
 800afc0:	2202      	movs	r2, #2
 800afc2:	1db9      	adds	r1, r7, #6
 800afc4:	b2c4      	uxtb	r4, r0
 800afc6:	4628      	mov	r0, r5
 800afc8:	f002 ff38 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800afcc:	7a39      	ldrb	r1, [r7, #8]
 800afce:	4004      	ands	r4, r0
 800afd0:	4628      	mov	r0, r5
 800afd2:	f7fd f967 	bl	80082a4 <ucdr_serialize_bool>
 800afd6:	7a3b      	ldrb	r3, [r7, #8]
 800afd8:	ea00 0804 	and.w	r8, r0, r4
 800afdc:	b913      	cbnz	r3, 800afe4 <uxr_serialize_AGENT_Representation+0x40>
 800afde:	4640      	mov	r0, r8
 800afe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe4:	68f9      	ldr	r1, [r7, #12]
 800afe6:	4628      	mov	r0, r5
 800afe8:	f7fd fba0 	bl	800872c <ucdr_serialize_uint32_t>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	b303      	cbz	r3, 800b032 <uxr_serialize_AGENT_Representation+0x8e>
 800aff0:	b1d0      	cbz	r0, 800b028 <uxr_serialize_AGENT_Representation+0x84>
 800aff2:	463e      	mov	r6, r7
 800aff4:	f04f 0900 	mov.w	r9, #0
 800aff8:	e001      	b.n	800affe <uxr_serialize_AGENT_Representation+0x5a>
 800affa:	3608      	adds	r6, #8
 800affc:	b1a4      	cbz	r4, 800b028 <uxr_serialize_AGENT_Representation+0x84>
 800affe:	6931      	ldr	r1, [r6, #16]
 800b000:	4628      	mov	r0, r5
 800b002:	f003 f83b 	bl	800e07c <ucdr_serialize_string>
 800b006:	6971      	ldr	r1, [r6, #20]
 800b008:	4604      	mov	r4, r0
 800b00a:	4628      	mov	r0, r5
 800b00c:	f003 f836 	bl	800e07c <ucdr_serialize_string>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f109 0901 	add.w	r9, r9, #1
 800b016:	4004      	ands	r4, r0
 800b018:	4599      	cmp	r9, r3
 800b01a:	b2e4      	uxtb	r4, r4
 800b01c:	d3ed      	bcc.n	800affa <uxr_serialize_AGENT_Representation+0x56>
 800b01e:	ea08 0804 	and.w	r8, r8, r4
 800b022:	4640      	mov	r0, r8
 800b024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b028:	f04f 0800 	mov.w	r8, #0
 800b02c:	4640      	mov	r0, r8
 800b02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b032:	ea08 0800 	and.w	r8, r8, r0
 800b036:	e7d2      	b.n	800afde <uxr_serialize_AGENT_Representation+0x3a>

0800b038 <uxr_serialize_DATAWRITER_Representation>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	460d      	mov	r5, r1
 800b03c:	7809      	ldrb	r1, [r1, #0]
 800b03e:	4606      	mov	r6, r0
 800b040:	f7fd f95e 	bl	8008300 <ucdr_serialize_uint8_t>
 800b044:	4604      	mov	r4, r0
 800b046:	b130      	cbz	r0, 800b056 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b048:	782b      	ldrb	r3, [r5, #0]
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d00c      	beq.n	800b068 <uxr_serialize_DATAWRITER_Representation+0x30>
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d010      	beq.n	800b074 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800b052:	2b01      	cmp	r3, #1
 800b054:	d008      	beq.n	800b068 <uxr_serialize_DATAWRITER_Representation+0x30>
 800b056:	2202      	movs	r2, #2
 800b058:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800b05c:	4630      	mov	r0, r6
 800b05e:	f002 feed 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b062:	4020      	ands	r0, r4
 800b064:	b2c0      	uxtb	r0, r0
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	6869      	ldr	r1, [r5, #4]
 800b06a:	4630      	mov	r0, r6
 800b06c:	f003 f806 	bl	800e07c <ucdr_serialize_string>
 800b070:	4604      	mov	r4, r0
 800b072:	e7f0      	b.n	800b056 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b074:	4629      	mov	r1, r5
 800b076:	4630      	mov	r0, r6
 800b078:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b07c:	3104      	adds	r1, #4
 800b07e:	f002 ffd1 	bl	800e024 <ucdr_serialize_sequence_uint8_t>
 800b082:	4604      	mov	r4, r0
 800b084:	e7e7      	b.n	800b056 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b086:	bf00      	nop

0800b088 <uxr_serialize_ObjectVariant.part.0>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	780b      	ldrb	r3, [r1, #0]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	460c      	mov	r4, r1
 800b090:	4605      	mov	r5, r0
 800b092:	2b0d      	cmp	r3, #13
 800b094:	d854      	bhi.n	800b140 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800b096:	e8df f003 	tbb	[pc, r3]
 800b09a:	0730      	.short	0x0730
 800b09c:	07071b1b 	.word	0x07071b1b
 800b0a0:	0c530707 	.word	0x0c530707
 800b0a4:	494e0c0c 	.word	0x494e0c0c
 800b0a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0ac:	3104      	adds	r1, #4
 800b0ae:	f7ff bfc3 	b.w	800b038 <uxr_serialize_DATAWRITER_Representation>
 800b0b2:	7909      	ldrb	r1, [r1, #4]
 800b0b4:	f7fd f924 	bl	8008300 <ucdr_serialize_uint8_t>
 800b0b8:	b1e8      	cbz	r0, 800b0f6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800b0ba:	7923      	ldrb	r3, [r4, #4]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d001      	beq.n	800b0c4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d13d      	bne.n	800b140 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800b0c4:	68a1      	ldr	r1, [r4, #8]
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0cc:	f002 bfd6 	b.w	800e07c <ucdr_serialize_string>
 800b0d0:	7909      	ldrb	r1, [r1, #4]
 800b0d2:	f7fd f915 	bl	8008300 <ucdr_serialize_uint8_t>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	b120      	cbz	r0, 800b0e4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b0da:	7923      	ldrb	r3, [r4, #4]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d039      	beq.n	800b154 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d02f      	beq.n	800b144 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f002 fea6 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b0f0:	4030      	ands	r0, r6
 800b0f2:	b2c0      	uxtb	r0, r0
 800b0f4:	bd70      	pop	{r4, r5, r6, pc}
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
 800b0fa:	7909      	ldrb	r1, [r1, #4]
 800b0fc:	f7fd f900 	bl	8008300 <ucdr_serialize_uint8_t>
 800b100:	4606      	mov	r6, r0
 800b102:	b158      	cbz	r0, 800b11c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b104:	7923      	ldrb	r3, [r4, #4]
 800b106:	2b02      	cmp	r3, #2
 800b108:	d003      	beq.n	800b112 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d028      	beq.n	800b160 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d104      	bne.n	800b11c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b112:	68a1      	ldr	r1, [r4, #8]
 800b114:	4628      	mov	r0, r5
 800b116:	f002 ffb1 	bl	800e07c <ucdr_serialize_string>
 800b11a:	4606      	mov	r6, r0
 800b11c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800b120:	4628      	mov	r0, r5
 800b122:	f7fd fe29 	bl	8008d78 <ucdr_serialize_int16_t>
 800b126:	4030      	ands	r0, r6
 800b128:	b2c0      	uxtb	r0, r0
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b130:	3104      	adds	r1, #4
 800b132:	f7ff be7b 	b.w	800ae2c <uxr_serialize_CLIENT_Representation>
 800b136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b13a:	3104      	adds	r1, #4
 800b13c:	f7ff bf32 	b.w	800afa4 <uxr_serialize_AGENT_Representation>
 800b140:	2001      	movs	r0, #1
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	68a2      	ldr	r2, [r4, #8]
 800b146:	f104 010c 	add.w	r1, r4, #12
 800b14a:	4628      	mov	r0, r5
 800b14c:	f002 ff6a 	bl	800e024 <ucdr_serialize_sequence_uint8_t>
 800b150:	4606      	mov	r6, r0
 800b152:	e7c7      	b.n	800b0e4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b154:	68a1      	ldr	r1, [r4, #8]
 800b156:	4628      	mov	r0, r5
 800b158:	f002 ff90 	bl	800e07c <ucdr_serialize_string>
 800b15c:	4606      	mov	r6, r0
 800b15e:	e7c1      	b.n	800b0e4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b160:	68a2      	ldr	r2, [r4, #8]
 800b162:	f104 010c 	add.w	r1, r4, #12
 800b166:	4628      	mov	r0, r5
 800b168:	f002 ff5c 	bl	800e024 <ucdr_serialize_sequence_uint8_t>
 800b16c:	4606      	mov	r6, r0
 800b16e:	e7d5      	b.n	800b11c <uxr_serialize_ObjectVariant.part.0+0x94>

0800b170 <uxr_deserialize_DATAWRITER_Representation>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	4606      	mov	r6, r0
 800b174:	460d      	mov	r5, r1
 800b176:	f7fd f8d9 	bl	800832c <ucdr_deserialize_uint8_t>
 800b17a:	4604      	mov	r4, r0
 800b17c:	b130      	cbz	r0, 800b18c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b17e:	782b      	ldrb	r3, [r5, #0]
 800b180:	2b02      	cmp	r3, #2
 800b182:	d00c      	beq.n	800b19e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b184:	2b03      	cmp	r3, #3
 800b186:	d012      	beq.n	800b1ae <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d008      	beq.n	800b19e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b18c:	2202      	movs	r2, #2
 800b18e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800b192:	4630      	mov	r0, r6
 800b194:	f002 feb6 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b198:	4020      	ands	r0, r4
 800b19a:	b2c0      	uxtb	r0, r0
 800b19c:	bd70      	pop	{r4, r5, r6, pc}
 800b19e:	6869      	ldr	r1, [r5, #4]
 800b1a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f002 ff79 	bl	800e09c <ucdr_deserialize_string>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	e7ee      	b.n	800b18c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b1ae:	1d2b      	adds	r3, r5, #4
 800b1b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1b4:	f105 0108 	add.w	r1, r5, #8
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f002 ff45 	bl	800e048 <ucdr_deserialize_sequence_uint8_t>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	e7e4      	b.n	800b18c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b1c2:	bf00      	nop

0800b1c4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	7809      	ldrb	r1, [r1, #0]
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	f7fd f86a 	bl	80082a4 <ucdr_serialize_bool>
 800b1d0:	782b      	ldrb	r3, [r5, #0]
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	b94b      	cbnz	r3, 800b1ea <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800b1d6:	7a29      	ldrb	r1, [r5, #8]
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7fd f863 	bl	80082a4 <ucdr_serialize_bool>
 800b1de:	7a2b      	ldrb	r3, [r5, #8]
 800b1e0:	4004      	ands	r4, r0
 800b1e2:	b2e4      	uxtb	r4, r4
 800b1e4:	b943      	cbnz	r3, 800b1f8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ea:	6869      	ldr	r1, [r5, #4]
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f002 ff45 	bl	800e07c <ucdr_serialize_string>
 800b1f2:	4004      	ands	r4, r0
 800b1f4:	b2e4      	uxtb	r4, r4
 800b1f6:	e7ee      	b.n	800b1d6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800b1f8:	68e9      	ldr	r1, [r5, #12]
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f002 ff3e 	bl	800e07c <ucdr_serialize_string>
 800b200:	4004      	ands	r4, r0
 800b202:	4620      	mov	r0, r4
 800b204:	bd70      	pop	{r4, r5, r6, pc}
 800b206:	bf00      	nop

0800b208 <uxr_serialize_OBJK_Topic_Binary>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	460d      	mov	r5, r1
 800b20c:	6809      	ldr	r1, [r1, #0]
 800b20e:	4606      	mov	r6, r0
 800b210:	f002 ff34 	bl	800e07c <ucdr_serialize_string>
 800b214:	7929      	ldrb	r1, [r5, #4]
 800b216:	4604      	mov	r4, r0
 800b218:	4630      	mov	r0, r6
 800b21a:	f7fd f843 	bl	80082a4 <ucdr_serialize_bool>
 800b21e:	792b      	ldrb	r3, [r5, #4]
 800b220:	4004      	ands	r4, r0
 800b222:	b2e4      	uxtb	r4, r4
 800b224:	b943      	cbnz	r3, 800b238 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800b226:	7b29      	ldrb	r1, [r5, #12]
 800b228:	4630      	mov	r0, r6
 800b22a:	f7fd f83b 	bl	80082a4 <ucdr_serialize_bool>
 800b22e:	7b2b      	ldrb	r3, [r5, #12]
 800b230:	4004      	ands	r4, r0
 800b232:	b93b      	cbnz	r3, 800b244 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800b234:	4620      	mov	r0, r4
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	68a9      	ldr	r1, [r5, #8]
 800b23a:	4630      	mov	r0, r6
 800b23c:	f002 ff1e 	bl	800e07c <ucdr_serialize_string>
 800b240:	4004      	ands	r4, r0
 800b242:	e7f0      	b.n	800b226 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800b244:	6929      	ldr	r1, [r5, #16]
 800b246:	4630      	mov	r0, r6
 800b248:	f002 ff18 	bl	800e07c <ucdr_serialize_string>
 800b24c:	4004      	ands	r4, r0
 800b24e:	b2e4      	uxtb	r4, r4
 800b250:	4620      	mov	r0, r4
 800b252:	bd70      	pop	{r4, r5, r6, pc}

0800b254 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	460c      	mov	r4, r1
 800b25a:	7809      	ldrb	r1, [r1, #0]
 800b25c:	4606      	mov	r6, r0
 800b25e:	f7fd f821 	bl	80082a4 <ucdr_serialize_bool>
 800b262:	7823      	ldrb	r3, [r4, #0]
 800b264:	4605      	mov	r5, r0
 800b266:	b96b      	cbnz	r3, 800b284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800b268:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7fd f819 	bl	80082a4 <ucdr_serialize_bool>
 800b272:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b276:	4005      	ands	r5, r0
 800b278:	b2ed      	uxtb	r5, r5
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d169      	bne.n	800b352 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800b27e:	4628      	mov	r0, r5
 800b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b284:	6861      	ldr	r1, [r4, #4]
 800b286:	4630      	mov	r0, r6
 800b288:	f7fd fa50 	bl	800872c <ucdr_serialize_uint32_t>
 800b28c:	6863      	ldr	r3, [r4, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d06b      	beq.n	800b36a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800b292:	2800      	cmp	r0, #0
 800b294:	d067      	beq.n	800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b296:	68a1      	ldr	r1, [r4, #8]
 800b298:	4630      	mov	r0, r6
 800b29a:	f002 feef 	bl	800e07c <ucdr_serialize_string>
 800b29e:	6863      	ldr	r3, [r4, #4]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d953      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d05e      	beq.n	800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b2a8:	68e1      	ldr	r1, [r4, #12]
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f002 fee6 	bl	800e07c <ucdr_serialize_string>
 800b2b0:	6863      	ldr	r3, [r4, #4]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d94a      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d055      	beq.n	800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b2ba:	6921      	ldr	r1, [r4, #16]
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f002 fedd 	bl	800e07c <ucdr_serialize_string>
 800b2c2:	6863      	ldr	r3, [r4, #4]
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	d941      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d04c      	beq.n	800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b2cc:	6961      	ldr	r1, [r4, #20]
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f002 fed4 	bl	800e07c <ucdr_serialize_string>
 800b2d4:	6863      	ldr	r3, [r4, #4]
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d938      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d043      	beq.n	800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b2de:	69a1      	ldr	r1, [r4, #24]
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f002 fecb 	bl	800e07c <ucdr_serialize_string>
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	2b05      	cmp	r3, #5
 800b2ea:	d92f      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d03a      	beq.n	800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b2f0:	69e1      	ldr	r1, [r4, #28]
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f002 fec2 	bl	800e07c <ucdr_serialize_string>
 800b2f8:	6863      	ldr	r3, [r4, #4]
 800b2fa:	2b06      	cmp	r3, #6
 800b2fc:	d926      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b2fe:	b390      	cbz	r0, 800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b300:	6a21      	ldr	r1, [r4, #32]
 800b302:	4630      	mov	r0, r6
 800b304:	f002 feba 	bl	800e07c <ucdr_serialize_string>
 800b308:	6863      	ldr	r3, [r4, #4]
 800b30a:	2b07      	cmp	r3, #7
 800b30c:	d91e      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b30e:	b350      	cbz	r0, 800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b310:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b312:	4630      	mov	r0, r6
 800b314:	f002 feb2 	bl	800e07c <ucdr_serialize_string>
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d916      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b31e:	b310      	cbz	r0, 800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b320:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b322:	4630      	mov	r0, r6
 800b324:	f002 feaa 	bl	800e07c <ucdr_serialize_string>
 800b328:	6863      	ldr	r3, [r4, #4]
 800b32a:	2b09      	cmp	r3, #9
 800b32c:	d90e      	bls.n	800b34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b32e:	b1d0      	cbz	r0, 800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b330:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800b334:	2709      	movs	r7, #9
 800b336:	e000      	b.n	800b33a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800b338:	b1a8      	cbz	r0, 800b366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b33a:	f858 1b04 	ldr.w	r1, [r8], #4
 800b33e:	4630      	mov	r0, r6
 800b340:	f002 fe9c 	bl	800e07c <ucdr_serialize_string>
 800b344:	6862      	ldr	r2, [r4, #4]
 800b346:	3701      	adds	r7, #1
 800b348:	4297      	cmp	r7, r2
 800b34a:	d3f5      	bcc.n	800b338 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800b34c:	4005      	ands	r5, r0
 800b34e:	b2ed      	uxtb	r5, r5
 800b350:	e78a      	b.n	800b268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b352:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b354:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800b358:	4630      	mov	r0, r6
 800b35a:	f002 fe63 	bl	800e024 <ucdr_serialize_sequence_uint8_t>
 800b35e:	4005      	ands	r5, r0
 800b360:	4628      	mov	r0, r5
 800b362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b366:	2500      	movs	r5, #0
 800b368:	e77e      	b.n	800b268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b36a:	4028      	ands	r0, r5
 800b36c:	b2c5      	uxtb	r5, r0
 800b36e:	e77b      	b.n	800b268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800b370 <uxr_serialize_OBJK_Publisher_Binary>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	460d      	mov	r5, r1
 800b374:	7809      	ldrb	r1, [r1, #0]
 800b376:	4606      	mov	r6, r0
 800b378:	f7fc ff94 	bl	80082a4 <ucdr_serialize_bool>
 800b37c:	782b      	ldrb	r3, [r5, #0]
 800b37e:	4604      	mov	r4, r0
 800b380:	b94b      	cbnz	r3, 800b396 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800b382:	7a29      	ldrb	r1, [r5, #8]
 800b384:	4630      	mov	r0, r6
 800b386:	f7fc ff8d 	bl	80082a4 <ucdr_serialize_bool>
 800b38a:	7a2b      	ldrb	r3, [r5, #8]
 800b38c:	4004      	ands	r4, r0
 800b38e:	b2e4      	uxtb	r4, r4
 800b390:	b943      	cbnz	r3, 800b3a4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800b392:	4620      	mov	r0, r4
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	6869      	ldr	r1, [r5, #4]
 800b398:	4630      	mov	r0, r6
 800b39a:	f002 fe6f 	bl	800e07c <ucdr_serialize_string>
 800b39e:	4004      	ands	r4, r0
 800b3a0:	b2e4      	uxtb	r4, r4
 800b3a2:	e7ee      	b.n	800b382 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800b3a4:	f105 010c 	add.w	r1, r5, #12
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7ff ff53 	bl	800b254 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800b3ae:	4004      	ands	r4, r0
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}

0800b3b4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800b3b4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800b3b8:	4688      	mov	r8, r1
 800b3ba:	8809      	ldrh	r1, [r1, #0]
 800b3bc:	4681      	mov	r9, r0
 800b3be:	f7fc ffcb 	bl	8008358 <ucdr_serialize_uint16_t>
 800b3c2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	f7fc ff6b 	bl	80082a4 <ucdr_serialize_bool>
 800b3ce:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b3d2:	4006      	ands	r6, r0
 800b3d4:	b2f5      	uxtb	r5, r6
 800b3d6:	b9eb      	cbnz	r3, 800b414 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800b3d8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800b3dc:	4648      	mov	r0, r9
 800b3de:	f7fc ff61 	bl	80082a4 <ucdr_serialize_bool>
 800b3e2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b3e6:	4005      	ands	r5, r0
 800b3e8:	bb7b      	cbnz	r3, 800b44a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800b3ea:	f898 100c 	ldrb.w	r1, [r8, #12]
 800b3ee:	4648      	mov	r0, r9
 800b3f0:	f7fc ff58 	bl	80082a4 <ucdr_serialize_bool>
 800b3f4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800b3f8:	4005      	ands	r5, r0
 800b3fa:	b9f3      	cbnz	r3, 800b43a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800b3fc:	f898 1014 	ldrb.w	r1, [r8, #20]
 800b400:	4648      	mov	r0, r9
 800b402:	f7fc ff4f 	bl	80082a4 <ucdr_serialize_bool>
 800b406:	f898 3014 	ldrb.w	r3, [r8, #20]
 800b40a:	4005      	ands	r5, r0
 800b40c:	b94b      	cbnz	r3, 800b422 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800b40e:	4628      	mov	r0, r5
 800b410:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b414:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800b418:	4648      	mov	r0, r9
 800b41a:	f7fc ff9d 	bl	8008358 <ucdr_serialize_uint16_t>
 800b41e:	4005      	ands	r5, r0
 800b420:	e7da      	b.n	800b3d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800b422:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b426:	f108 011c 	add.w	r1, r8, #28
 800b42a:	4648      	mov	r0, r9
 800b42c:	f002 fdfa 	bl	800e024 <ucdr_serialize_sequence_uint8_t>
 800b430:	4028      	ands	r0, r5
 800b432:	b2c5      	uxtb	r5, r0
 800b434:	4628      	mov	r0, r5
 800b436:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b43a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b43e:	4648      	mov	r0, r9
 800b440:	f7fd f974 	bl	800872c <ucdr_serialize_uint32_t>
 800b444:	4028      	ands	r0, r5
 800b446:	b2c5      	uxtb	r5, r0
 800b448:	e7d8      	b.n	800b3fc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800b44a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b44e:	4648      	mov	r0, r9
 800b450:	f7fd f96c 	bl	800872c <ucdr_serialize_uint32_t>
 800b454:	4028      	ands	r0, r5
 800b456:	b2c5      	uxtb	r5, r0
 800b458:	e7c7      	b.n	800b3ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800b45a:	bf00      	nop

0800b45c <uxr_serialize_OBJK_DataWriter_Binary>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	2202      	movs	r2, #2
 800b460:	460d      	mov	r5, r1
 800b462:	4606      	mov	r6, r0
 800b464:	f002 fcea 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b468:	78a9      	ldrb	r1, [r5, #2]
 800b46a:	4604      	mov	r4, r0
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7fc ff19 	bl	80082a4 <ucdr_serialize_bool>
 800b472:	78ab      	ldrb	r3, [r5, #2]
 800b474:	4004      	ands	r4, r0
 800b476:	b2e4      	uxtb	r4, r4
 800b478:	b90b      	cbnz	r3, 800b47e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800b47a:	4620      	mov	r0, r4
 800b47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b47e:	f105 0108 	add.w	r1, r5, #8
 800b482:	4630      	mov	r0, r6
 800b484:	f7ff ff96 	bl	800b3b4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800b488:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800b48c:	4607      	mov	r7, r0
 800b48e:	4630      	mov	r0, r6
 800b490:	f7fc ff08 	bl	80082a4 <ucdr_serialize_bool>
 800b494:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800b498:	4038      	ands	r0, r7
 800b49a:	b2c7      	uxtb	r7, r0
 800b49c:	b913      	cbnz	r3, 800b4a4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800b49e:	403c      	ands	r4, r7
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4a4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f7fd fb95 	bl	8008bd8 <ucdr_serialize_uint64_t>
 800b4ae:	4007      	ands	r7, r0
 800b4b0:	e7f5      	b.n	800b49e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800b4b2:	bf00      	nop

0800b4b4 <uxr_deserialize_ObjectVariant>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	460e      	mov	r6, r1
 800b4ba:	f7fc ff37 	bl	800832c <ucdr_deserialize_uint8_t>
 800b4be:	b168      	cbz	r0, 800b4dc <uxr_deserialize_ObjectVariant+0x28>
 800b4c0:	7833      	ldrb	r3, [r6, #0]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	2b0d      	cmp	r3, #13
 800b4c8:	d809      	bhi.n	800b4de <uxr_deserialize_ObjectVariant+0x2a>
 800b4ca:	e8df f003 	tbb	[pc, r3]
 800b4ce:	0a41      	.short	0x0a41
 800b4d0:	0a0a2323 	.word	0x0a0a2323
 800b4d4:	10080a0a 	.word	0x10080a0a
 800b4d8:	565c1010 	.word	0x565c1010
 800b4dc:	2400      	movs	r4, #0
 800b4de:	4620      	mov	r0, r4
 800b4e0:	bd70      	pop	{r4, r5, r6, pc}
 800b4e2:	1d31      	adds	r1, r6, #4
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4ea:	f7ff be41 	b.w	800b170 <uxr_deserialize_DATAWRITER_Representation>
 800b4ee:	1d31      	adds	r1, r6, #4
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f7fc ff1b 	bl	800832c <ucdr_deserialize_uint8_t>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d0f0      	beq.n	800b4dc <uxr_deserialize_ObjectVariant+0x28>
 800b4fa:	7933      	ldrb	r3, [r6, #4]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d001      	beq.n	800b504 <uxr_deserialize_ObjectVariant+0x50>
 800b500:	2b02      	cmp	r3, #2
 800b502:	d1ec      	bne.n	800b4de <uxr_deserialize_ObjectVariant+0x2a>
 800b504:	68b1      	ldr	r1, [r6, #8]
 800b506:	4628      	mov	r0, r5
 800b508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b50c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b510:	f002 bdc4 	b.w	800e09c <ucdr_deserialize_string>
 800b514:	1d31      	adds	r1, r6, #4
 800b516:	4628      	mov	r0, r5
 800b518:	f7fc ff08 	bl	800832c <ucdr_deserialize_uint8_t>
 800b51c:	4604      	mov	r4, r0
 800b51e:	b170      	cbz	r0, 800b53e <uxr_deserialize_ObjectVariant+0x8a>
 800b520:	7933      	ldrb	r3, [r6, #4]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d04c      	beq.n	800b5c0 <uxr_deserialize_ObjectVariant+0x10c>
 800b526:	2b03      	cmp	r3, #3
 800b528:	d109      	bne.n	800b53e <uxr_deserialize_ObjectVariant+0x8a>
 800b52a:	f106 0308 	add.w	r3, r6, #8
 800b52e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b532:	f106 010c 	add.w	r1, r6, #12
 800b536:	4628      	mov	r0, r5
 800b538:	f002 fd86 	bl	800e048 <ucdr_deserialize_sequence_uint8_t>
 800b53c:	4604      	mov	r4, r0
 800b53e:	2202      	movs	r2, #2
 800b540:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800b544:	4628      	mov	r0, r5
 800b546:	f002 fcdd 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b54a:	4020      	ands	r0, r4
 800b54c:	b2c4      	uxtb	r4, r0
 800b54e:	e7c6      	b.n	800b4de <uxr_deserialize_ObjectVariant+0x2a>
 800b550:	1d31      	adds	r1, r6, #4
 800b552:	4628      	mov	r0, r5
 800b554:	f7fc feea 	bl	800832c <ucdr_deserialize_uint8_t>
 800b558:	4604      	mov	r4, r0
 800b55a:	b130      	cbz	r0, 800b56a <uxr_deserialize_ObjectVariant+0xb6>
 800b55c:	7933      	ldrb	r3, [r6, #4]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d036      	beq.n	800b5d0 <uxr_deserialize_ObjectVariant+0x11c>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d03c      	beq.n	800b5e0 <uxr_deserialize_ObjectVariant+0x12c>
 800b566:	2b01      	cmp	r3, #1
 800b568:	d032      	beq.n	800b5d0 <uxr_deserialize_ObjectVariant+0x11c>
 800b56a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800b56e:	4628      	mov	r0, r5
 800b570:	f7fd fc82 	bl	8008e78 <ucdr_deserialize_int16_t>
 800b574:	4020      	ands	r0, r4
 800b576:	b2c4      	uxtb	r4, r0
 800b578:	e7b1      	b.n	800b4de <uxr_deserialize_ObjectVariant+0x2a>
 800b57a:	1d31      	adds	r1, r6, #4
 800b57c:	4628      	mov	r0, r5
 800b57e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b582:	f7ff bcab 	b.w	800aedc <uxr_deserialize_CLIENT_Representation>
 800b586:	2204      	movs	r2, #4
 800b588:	18b1      	adds	r1, r6, r2
 800b58a:	4628      	mov	r0, r5
 800b58c:	f002 fcba 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b590:	2202      	movs	r2, #2
 800b592:	f106 0108 	add.w	r1, r6, #8
 800b596:	4604      	mov	r4, r0
 800b598:	4628      	mov	r0, r5
 800b59a:	f002 fcb3 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b59e:	2202      	movs	r2, #2
 800b5a0:	4004      	ands	r4, r0
 800b5a2:	f106 010a 	add.w	r1, r6, #10
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f002 fcac 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b5ac:	b2e4      	uxtb	r4, r4
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f106 010c 	add.w	r1, r6, #12
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	401c      	ands	r4, r3
 800b5b8:	f7fc fe8a 	bl	80082d0 <ucdr_deserialize_bool>
 800b5bc:	4004      	ands	r4, r0
 800b5be:	e78e      	b.n	800b4de <uxr_deserialize_ObjectVariant+0x2a>
 800b5c0:	68b1      	ldr	r1, [r6, #8]
 800b5c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f002 fd68 	bl	800e09c <ucdr_deserialize_string>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	e7b6      	b.n	800b53e <uxr_deserialize_ObjectVariant+0x8a>
 800b5d0:	68b1      	ldr	r1, [r6, #8]
 800b5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f002 fd60 	bl	800e09c <ucdr_deserialize_string>
 800b5dc:	4604      	mov	r4, r0
 800b5de:	e7c4      	b.n	800b56a <uxr_deserialize_ObjectVariant+0xb6>
 800b5e0:	f106 0308 	add.w	r3, r6, #8
 800b5e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5e8:	f106 010c 	add.w	r1, r6, #12
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f002 fd2b 	bl	800e048 <ucdr_deserialize_sequence_uint8_t>
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	e7b9      	b.n	800b56a <uxr_deserialize_ObjectVariant+0xb6>
 800b5f6:	bf00      	nop

0800b5f8 <uxr_deserialize_BaseObjectRequest>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	460e      	mov	r6, r1
 800b600:	f002 fc80 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b604:	2202      	movs	r2, #2
 800b606:	4604      	mov	r4, r0
 800b608:	18b1      	adds	r1, r6, r2
 800b60a:	4628      	mov	r0, r5
 800b60c:	f002 fc7a 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b610:	4020      	ands	r0, r4
 800b612:	b2c0      	uxtb	r0, r0
 800b614:	bd70      	pop	{r4, r5, r6, pc}
 800b616:	bf00      	nop

0800b618 <uxr_serialize_ActivityInfoVariant>:
 800b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	460d      	mov	r5, r1
 800b61e:	7809      	ldrb	r1, [r1, #0]
 800b620:	4607      	mov	r7, r0
 800b622:	f7fc fe6d 	bl	8008300 <ucdr_serialize_uint8_t>
 800b626:	4681      	mov	r9, r0
 800b628:	b138      	cbz	r0, 800b63a <uxr_serialize_ActivityInfoVariant+0x22>
 800b62a:	782b      	ldrb	r3, [r5, #0]
 800b62c:	2b06      	cmp	r3, #6
 800b62e:	f000 8082 	beq.w	800b736 <uxr_serialize_ActivityInfoVariant+0x11e>
 800b632:	2b0d      	cmp	r3, #13
 800b634:	d016      	beq.n	800b664 <uxr_serialize_ActivityInfoVariant+0x4c>
 800b636:	2b05      	cmp	r3, #5
 800b638:	d002      	beq.n	800b640 <uxr_serialize_ActivityInfoVariant+0x28>
 800b63a:	4648      	mov	r0, r9
 800b63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b640:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b644:	4638      	mov	r0, r7
 800b646:	f7fd fb97 	bl	8008d78 <ucdr_serialize_int16_t>
 800b64a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800b64e:	4681      	mov	r9, r0
 800b650:	4638      	mov	r0, r7
 800b652:	f7fd fac1 	bl	8008bd8 <ucdr_serialize_uint64_t>
 800b656:	ea09 0000 	and.w	r0, r9, r0
 800b65a:	fa5f f980 	uxtb.w	r9, r0
 800b65e:	4648      	mov	r0, r9
 800b660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b664:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b668:	4638      	mov	r0, r7
 800b66a:	f7fd fb85 	bl	8008d78 <ucdr_serialize_int16_t>
 800b66e:	68e9      	ldr	r1, [r5, #12]
 800b670:	4681      	mov	r9, r0
 800b672:	4638      	mov	r0, r7
 800b674:	f7fd f85a 	bl	800872c <ucdr_serialize_uint32_t>
 800b678:	68eb      	ldr	r3, [r5, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d0eb      	beq.n	800b656 <uxr_serialize_ActivityInfoVariant+0x3e>
 800b67e:	b320      	cbz	r0, 800b6ca <uxr_serialize_ActivityInfoVariant+0xb2>
 800b680:	f105 080c 	add.w	r8, r5, #12
 800b684:	2600      	movs	r6, #0
 800b686:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800b68a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800b68e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800b692:	4638      	mov	r0, r7
 800b694:	f7fc fe34 	bl	8008300 <ucdr_serialize_uint8_t>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d053      	beq.n	800b744 <uxr_serialize_ActivityInfoVariant+0x12c>
 800b69c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800b6a0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800b6a4:	0074      	lsls	r4, r6, #1
 800b6a6:	00c9      	lsls	r1, r1, #3
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d854      	bhi.n	800b756 <uxr_serialize_ActivityInfoVariant+0x13e>
 800b6ac:	e8df f003 	tbb	[pc, r3]
 800b6b0:	02102132 	.word	0x02102132
 800b6b4:	4441      	add	r1, r8
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	6889      	ldr	r1, [r1, #8]
 800b6ba:	f002 fcdf 	bl	800e07c <ucdr_serialize_string>
 800b6be:	68ea      	ldr	r2, [r5, #12]
 800b6c0:	3601      	adds	r6, #1
 800b6c2:	4296      	cmp	r6, r2
 800b6c4:	d242      	bcs.n	800b74c <uxr_serialize_ActivityInfoVariant+0x134>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d1dd      	bne.n	800b686 <uxr_serialize_ActivityInfoVariant+0x6e>
 800b6ca:	f04f 0900 	mov.w	r9, #0
 800b6ce:	e7b4      	b.n	800b63a <uxr_serialize_ActivityInfoVariant+0x22>
 800b6d0:	3108      	adds	r1, #8
 800b6d2:	4441      	add	r1, r8
 800b6d4:	2210      	movs	r2, #16
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	f002 fbb0 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b6dc:	4434      	add	r4, r6
 800b6de:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	f7fd f820 	bl	800872c <ucdr_serialize_uint32_t>
 800b6ec:	4020      	ands	r0, r4
 800b6ee:	b2c0      	uxtb	r0, r0
 800b6f0:	e7e5      	b.n	800b6be <uxr_serialize_ActivityInfoVariant+0xa6>
 800b6f2:	3108      	adds	r1, #8
 800b6f4:	4441      	add	r1, r8
 800b6f6:	2204      	movs	r2, #4
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	f002 fb9f 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b6fe:	4434      	add	r4, r6
 800b700:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b704:	4604      	mov	r4, r0
 800b706:	8b19      	ldrh	r1, [r3, #24]
 800b708:	4638      	mov	r0, r7
 800b70a:	f7fc fe25 	bl	8008358 <ucdr_serialize_uint16_t>
 800b70e:	4020      	ands	r0, r4
 800b710:	b2c0      	uxtb	r0, r0
 800b712:	e7d4      	b.n	800b6be <uxr_serialize_ActivityInfoVariant+0xa6>
 800b714:	3108      	adds	r1, #8
 800b716:	4441      	add	r1, r8
 800b718:	2202      	movs	r2, #2
 800b71a:	4638      	mov	r0, r7
 800b71c:	f002 fb8e 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b720:	4434      	add	r4, r6
 800b722:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b726:	4604      	mov	r4, r0
 800b728:	7d99      	ldrb	r1, [r3, #22]
 800b72a:	4638      	mov	r0, r7
 800b72c:	f7fc fde8 	bl	8008300 <ucdr_serialize_uint8_t>
 800b730:	4020      	ands	r0, r4
 800b732:	b2c0      	uxtb	r0, r0
 800b734:	e7c3      	b.n	800b6be <uxr_serialize_ActivityInfoVariant+0xa6>
 800b736:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b73a:	4638      	mov	r0, r7
 800b73c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b740:	f7fd bb1a 	b.w	8008d78 <ucdr_serialize_int16_t>
 800b744:	68ea      	ldr	r2, [r5, #12]
 800b746:	3601      	adds	r6, #1
 800b748:	42b2      	cmp	r2, r6
 800b74a:	d8be      	bhi.n	800b6ca <uxr_serialize_ActivityInfoVariant+0xb2>
 800b74c:	ea09 0900 	and.w	r9, r9, r0
 800b750:	fa5f f989 	uxtb.w	r9, r9
 800b754:	e771      	b.n	800b63a <uxr_serialize_ActivityInfoVariant+0x22>
 800b756:	68eb      	ldr	r3, [r5, #12]
 800b758:	3601      	adds	r6, #1
 800b75a:	429e      	cmp	r6, r3
 800b75c:	f10a 0a18 	add.w	sl, sl, #24
 800b760:	d395      	bcc.n	800b68e <uxr_serialize_ActivityInfoVariant+0x76>
 800b762:	e76a      	b.n	800b63a <uxr_serialize_ActivityInfoVariant+0x22>

0800b764 <uxr_deserialize_BaseObjectReply>:
 800b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b768:	2202      	movs	r2, #2
 800b76a:	4606      	mov	r6, r0
 800b76c:	460f      	mov	r7, r1
 800b76e:	f002 fbc9 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b772:	2202      	movs	r2, #2
 800b774:	18b9      	adds	r1, r7, r2
 800b776:	4605      	mov	r5, r0
 800b778:	4630      	mov	r0, r6
 800b77a:	f002 fbc3 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b77e:	1d39      	adds	r1, r7, #4
 800b780:	4680      	mov	r8, r0
 800b782:	4630      	mov	r0, r6
 800b784:	f7fc fdd2 	bl	800832c <ucdr_deserialize_uint8_t>
 800b788:	1d79      	adds	r1, r7, #5
 800b78a:	4604      	mov	r4, r0
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7fc fdcd 	bl	800832c <ucdr_deserialize_uint8_t>
 800b792:	ea05 0508 	and.w	r5, r5, r8
 800b796:	402c      	ands	r4, r5
 800b798:	4020      	ands	r0, r4
 800b79a:	b2c0      	uxtb	r0, r0
 800b79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b7a0 <uxr_serialize_ReadSpecification>:
 800b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a4:	460e      	mov	r6, r1
 800b7a6:	7809      	ldrb	r1, [r1, #0]
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	f7fc fda9 	bl	8008300 <ucdr_serialize_uint8_t>
 800b7ae:	7871      	ldrb	r1, [r6, #1]
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	f7fc fda4 	bl	8008300 <ucdr_serialize_uint8_t>
 800b7b8:	78b1      	ldrb	r1, [r6, #2]
 800b7ba:	4004      	ands	r4, r0
 800b7bc:	4638      	mov	r0, r7
 800b7be:	f7fc fd71 	bl	80082a4 <ucdr_serialize_bool>
 800b7c2:	78b3      	ldrb	r3, [r6, #2]
 800b7c4:	b2e4      	uxtb	r4, r4
 800b7c6:	4004      	ands	r4, r0
 800b7c8:	b94b      	cbnz	r3, 800b7de <uxr_serialize_ReadSpecification+0x3e>
 800b7ca:	7a31      	ldrb	r1, [r6, #8]
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f7fc fd69 	bl	80082a4 <ucdr_serialize_bool>
 800b7d2:	7a33      	ldrb	r3, [r6, #8]
 800b7d4:	4004      	ands	r4, r0
 800b7d6:	b943      	cbnz	r3, 800b7ea <uxr_serialize_ReadSpecification+0x4a>
 800b7d8:	4620      	mov	r0, r4
 800b7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7de:	6871      	ldr	r1, [r6, #4]
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	f002 fc4b 	bl	800e07c <ucdr_serialize_string>
 800b7e6:	4004      	ands	r4, r0
 800b7e8:	e7ef      	b.n	800b7ca <uxr_serialize_ReadSpecification+0x2a>
 800b7ea:	8971      	ldrh	r1, [r6, #10]
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f7fc fdb3 	bl	8008358 <ucdr_serialize_uint16_t>
 800b7f2:	89b1      	ldrh	r1, [r6, #12]
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	f7fc fdae 	bl	8008358 <ucdr_serialize_uint16_t>
 800b7fc:	89f1      	ldrh	r1, [r6, #14]
 800b7fe:	4005      	ands	r5, r0
 800b800:	4638      	mov	r0, r7
 800b802:	f7fc fda9 	bl	8008358 <ucdr_serialize_uint16_t>
 800b806:	8a31      	ldrh	r1, [r6, #16]
 800b808:	4680      	mov	r8, r0
 800b80a:	4638      	mov	r0, r7
 800b80c:	f7fc fda4 	bl	8008358 <ucdr_serialize_uint16_t>
 800b810:	b2ed      	uxtb	r5, r5
 800b812:	4025      	ands	r5, r4
 800b814:	ea08 0505 	and.w	r5, r8, r5
 800b818:	ea00 0405 	and.w	r4, r0, r5
 800b81c:	4620      	mov	r0, r4
 800b81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b822:	bf00      	nop

0800b824 <uxr_serialize_CREATE_CLIENT_Payload>:
 800b824:	f7ff bb02 	b.w	800ae2c <uxr_serialize_CLIENT_Representation>

0800b828 <uxr_serialize_CREATE_Payload>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	2202      	movs	r2, #2
 800b82c:	4607      	mov	r7, r0
 800b82e:	460e      	mov	r6, r1
 800b830:	f002 fb04 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b834:	2202      	movs	r2, #2
 800b836:	18b1      	adds	r1, r6, r2
 800b838:	4605      	mov	r5, r0
 800b83a:	4638      	mov	r0, r7
 800b83c:	f002 fafe 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b840:	7931      	ldrb	r1, [r6, #4]
 800b842:	4604      	mov	r4, r0
 800b844:	4638      	mov	r0, r7
 800b846:	f7fc fd5b 	bl	8008300 <ucdr_serialize_uint8_t>
 800b84a:	b170      	cbz	r0, 800b86a <uxr_serialize_CREATE_Payload+0x42>
 800b84c:	7933      	ldrb	r3, [r6, #4]
 800b84e:	402c      	ands	r4, r5
 800b850:	3b01      	subs	r3, #1
 800b852:	b2e4      	uxtb	r4, r4
 800b854:	2b0d      	cmp	r3, #13
 800b856:	d809      	bhi.n	800b86c <uxr_serialize_CREATE_Payload+0x44>
 800b858:	e8df f003 	tbb	[pc, r3]
 800b85c:	23230a4c 	.word	0x23230a4c
 800b860:	0a0a0a0a 	.word	0x0a0a0a0a
 800b864:	12121208 	.word	0x12121208
 800b868:	3e45      	.short	0x3e45
 800b86a:	2400      	movs	r4, #0
 800b86c:	4620      	mov	r0, r4
 800b86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b870:	f106 0108 	add.w	r1, r6, #8
 800b874:	4638      	mov	r0, r7
 800b876:	f7ff fbdf 	bl	800b038 <uxr_serialize_DATAWRITER_Representation>
 800b87a:	4004      	ands	r4, r0
 800b87c:	4620      	mov	r0, r4
 800b87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b880:	7a31      	ldrb	r1, [r6, #8]
 800b882:	4638      	mov	r0, r7
 800b884:	f7fc fd3c 	bl	8008300 <ucdr_serialize_uint8_t>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d0ee      	beq.n	800b86a <uxr_serialize_CREATE_Payload+0x42>
 800b88c:	7a33      	ldrb	r3, [r6, #8]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d001      	beq.n	800b896 <uxr_serialize_CREATE_Payload+0x6e>
 800b892:	2b02      	cmp	r3, #2
 800b894:	d1ea      	bne.n	800b86c <uxr_serialize_CREATE_Payload+0x44>
 800b896:	68f1      	ldr	r1, [r6, #12]
 800b898:	4638      	mov	r0, r7
 800b89a:	f002 fbef 	bl	800e07c <ucdr_serialize_string>
 800b89e:	4004      	ands	r4, r0
 800b8a0:	e7e4      	b.n	800b86c <uxr_serialize_CREATE_Payload+0x44>
 800b8a2:	7a31      	ldrb	r1, [r6, #8]
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7fc fd2b 	bl	8008300 <ucdr_serialize_uint8_t>
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b158      	cbz	r0, 800b8c6 <uxr_serialize_CREATE_Payload+0x9e>
 800b8ae:	7a33      	ldrb	r3, [r6, #8]
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d034      	beq.n	800b91e <uxr_serialize_CREATE_Payload+0xf6>
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d106      	bne.n	800b8c6 <uxr_serialize_CREATE_Payload+0x9e>
 800b8b8:	68f2      	ldr	r2, [r6, #12]
 800b8ba:	f106 0110 	add.w	r1, r6, #16
 800b8be:	4638      	mov	r0, r7
 800b8c0:	f002 fbb0 	bl	800e024 <ucdr_serialize_sequence_uint8_t>
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f002 fab5 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b8d2:	4028      	ands	r0, r5
 800b8d4:	4004      	ands	r4, r0
 800b8d6:	e7c9      	b.n	800b86c <uxr_serialize_CREATE_Payload+0x44>
 800b8d8:	f106 0108 	add.w	r1, r6, #8
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f7ff faa5 	bl	800ae2c <uxr_serialize_CLIENT_Representation>
 800b8e2:	4004      	ands	r4, r0
 800b8e4:	e7c2      	b.n	800b86c <uxr_serialize_CREATE_Payload+0x44>
 800b8e6:	f106 0108 	add.w	r1, r6, #8
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	f7ff fb5a 	bl	800afa4 <uxr_serialize_AGENT_Representation>
 800b8f0:	4004      	ands	r4, r0
 800b8f2:	e7bb      	b.n	800b86c <uxr_serialize_CREATE_Payload+0x44>
 800b8f4:	7a31      	ldrb	r1, [r6, #8]
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	f7fc fd02 	bl	8008300 <ucdr_serialize_uint8_t>
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	b130      	cbz	r0, 800b90e <uxr_serialize_CREATE_Payload+0xe6>
 800b900:	7a33      	ldrb	r3, [r6, #8]
 800b902:	2b02      	cmp	r3, #2
 800b904:	d011      	beq.n	800b92a <uxr_serialize_CREATE_Payload+0x102>
 800b906:	2b03      	cmp	r3, #3
 800b908:	d015      	beq.n	800b936 <uxr_serialize_CREATE_Payload+0x10e>
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d00d      	beq.n	800b92a <uxr_serialize_CREATE_Payload+0x102>
 800b90e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800b912:	4638      	mov	r0, r7
 800b914:	f7fd fa30 	bl	8008d78 <ucdr_serialize_int16_t>
 800b918:	4028      	ands	r0, r5
 800b91a:	4004      	ands	r4, r0
 800b91c:	e7a6      	b.n	800b86c <uxr_serialize_CREATE_Payload+0x44>
 800b91e:	68f1      	ldr	r1, [r6, #12]
 800b920:	4638      	mov	r0, r7
 800b922:	f002 fbab 	bl	800e07c <ucdr_serialize_string>
 800b926:	4605      	mov	r5, r0
 800b928:	e7cd      	b.n	800b8c6 <uxr_serialize_CREATE_Payload+0x9e>
 800b92a:	68f1      	ldr	r1, [r6, #12]
 800b92c:	4638      	mov	r0, r7
 800b92e:	f002 fba5 	bl	800e07c <ucdr_serialize_string>
 800b932:	4605      	mov	r5, r0
 800b934:	e7eb      	b.n	800b90e <uxr_serialize_CREATE_Payload+0xe6>
 800b936:	68f2      	ldr	r2, [r6, #12]
 800b938:	f106 0110 	add.w	r1, r6, #16
 800b93c:	4638      	mov	r0, r7
 800b93e:	f002 fb71 	bl	800e024 <ucdr_serialize_sequence_uint8_t>
 800b942:	4605      	mov	r5, r0
 800b944:	e7e3      	b.n	800b90e <uxr_serialize_CREATE_Payload+0xe6>
 800b946:	bf00      	nop

0800b948 <uxr_deserialize_GET_INFO_Payload>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	2202      	movs	r2, #2
 800b94c:	4605      	mov	r5, r0
 800b94e:	460e      	mov	r6, r1
 800b950:	f002 fad8 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b954:	2202      	movs	r2, #2
 800b956:	18b1      	adds	r1, r6, r2
 800b958:	4604      	mov	r4, r0
 800b95a:	4628      	mov	r0, r5
 800b95c:	f002 fad2 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b960:	1d31      	adds	r1, r6, #4
 800b962:	4004      	ands	r4, r0
 800b964:	4628      	mov	r0, r5
 800b966:	f7fd f811 	bl	800898c <ucdr_deserialize_uint32_t>
 800b96a:	b2e4      	uxtb	r4, r4
 800b96c:	4020      	ands	r0, r4
 800b96e:	bd70      	pop	{r4, r5, r6, pc}

0800b970 <uxr_serialize_DELETE_Payload>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	2202      	movs	r2, #2
 800b974:	4605      	mov	r5, r0
 800b976:	460e      	mov	r6, r1
 800b978:	f002 fa60 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b97c:	2202      	movs	r2, #2
 800b97e:	4604      	mov	r4, r0
 800b980:	18b1      	adds	r1, r6, r2
 800b982:	4628      	mov	r0, r5
 800b984:	f002 fa5a 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800b988:	4020      	ands	r0, r4
 800b98a:	b2c0      	uxtb	r0, r0
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
 800b98e:	bf00      	nop

0800b990 <uxr_deserialize_STATUS_AGENT_Payload>:
 800b990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b994:	4605      	mov	r5, r0
 800b996:	460e      	mov	r6, r1
 800b998:	f7fc fcc8 	bl	800832c <ucdr_deserialize_uint8_t>
 800b99c:	1c71      	adds	r1, r6, #1
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f7fc fcc3 	bl	800832c <ucdr_deserialize_uint8_t>
 800b9a6:	2204      	movs	r2, #4
 800b9a8:	18b1      	adds	r1, r6, r2
 800b9aa:	4680      	mov	r8, r0
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f002 faa9 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b9b2:	f106 0108 	add.w	r1, r6, #8
 800b9b6:	4607      	mov	r7, r0
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	f002 faa2 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b9c0:	ea04 0308 	and.w	r3, r4, r8
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	ea03 0407 	and.w	r4, r3, r7
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	f106 010a 	add.w	r1, r6, #10
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f002 fa96 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b9d8:	f106 010c 	add.w	r1, r6, #12
 800b9dc:	4603      	mov	r3, r0
 800b9de:	4628      	mov	r0, r5
 800b9e0:	461d      	mov	r5, r3
 800b9e2:	f7fc fc75 	bl	80082d0 <ucdr_deserialize_bool>
 800b9e6:	403c      	ands	r4, r7
 800b9e8:	4025      	ands	r5, r4
 800b9ea:	4028      	ands	r0, r5
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b9f0 <uxr_deserialize_STATUS_Payload>:
 800b9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	f002 fa83 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800b9fe:	2202      	movs	r2, #2
 800ba00:	18b9      	adds	r1, r7, r2
 800ba02:	4605      	mov	r5, r0
 800ba04:	4630      	mov	r0, r6
 800ba06:	f002 fa7d 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800ba0a:	1d39      	adds	r1, r7, #4
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7fc fc8c 	bl	800832c <ucdr_deserialize_uint8_t>
 800ba14:	1d79      	adds	r1, r7, #5
 800ba16:	4604      	mov	r4, r0
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f7fc fc87 	bl	800832c <ucdr_deserialize_uint8_t>
 800ba1e:	ea05 0508 	and.w	r5, r5, r8
 800ba22:	402c      	ands	r4, r5
 800ba24:	4020      	ands	r0, r4
 800ba26:	b2c0      	uxtb	r0, r0
 800ba28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba2c <uxr_serialize_INFO_Payload>:
 800ba2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba30:	2202      	movs	r2, #2
 800ba32:	460c      	mov	r4, r1
 800ba34:	4605      	mov	r5, r0
 800ba36:	f002 fa01 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	18a1      	adds	r1, r4, r2
 800ba3e:	4680      	mov	r8, r0
 800ba40:	4628      	mov	r0, r5
 800ba42:	f002 f9fb 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800ba46:	7921      	ldrb	r1, [r4, #4]
 800ba48:	4607      	mov	r7, r0
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	f7fc fc58 	bl	8008300 <ucdr_serialize_uint8_t>
 800ba50:	7961      	ldrb	r1, [r4, #5]
 800ba52:	4606      	mov	r6, r0
 800ba54:	4628      	mov	r0, r5
 800ba56:	f7fc fc53 	bl	8008300 <ucdr_serialize_uint8_t>
 800ba5a:	ea08 0807 	and.w	r8, r8, r7
 800ba5e:	ea06 0608 	and.w	r6, r6, r8
 800ba62:	4006      	ands	r6, r0
 800ba64:	7a21      	ldrb	r1, [r4, #8]
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7fc fc1c 	bl	80082a4 <ucdr_serialize_bool>
 800ba6c:	7a23      	ldrb	r3, [r4, #8]
 800ba6e:	b2f7      	uxtb	r7, r6
 800ba70:	4606      	mov	r6, r0
 800ba72:	b96b      	cbnz	r3, 800ba90 <uxr_serialize_INFO_Payload+0x64>
 800ba74:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7fc fc13 	bl	80082a4 <ucdr_serialize_bool>
 800ba7e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800ba82:	4030      	ands	r0, r6
 800ba84:	b2c6      	uxtb	r6, r0
 800ba86:	b983      	cbnz	r3, 800baaa <uxr_serialize_INFO_Payload+0x7e>
 800ba88:	ea06 0007 	and.w	r0, r6, r7
 800ba8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba90:	7b21      	ldrb	r1, [r4, #12]
 800ba92:	4628      	mov	r0, r5
 800ba94:	f7fc fc34 	bl	8008300 <ucdr_serialize_uint8_t>
 800ba98:	b188      	cbz	r0, 800babe <uxr_serialize_INFO_Payload+0x92>
 800ba9a:	f104 010c 	add.w	r1, r4, #12
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f7ff faf2 	bl	800b088 <uxr_serialize_ObjectVariant.part.0>
 800baa4:	4030      	ands	r0, r6
 800baa6:	b2c6      	uxtb	r6, r0
 800baa8:	e7e4      	b.n	800ba74 <uxr_serialize_INFO_Payload+0x48>
 800baaa:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800baae:	4628      	mov	r0, r5
 800bab0:	f7ff fdb2 	bl	800b618 <uxr_serialize_ActivityInfoVariant>
 800bab4:	4006      	ands	r6, r0
 800bab6:	ea06 0007 	and.w	r0, r6, r7
 800baba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800babe:	4606      	mov	r6, r0
 800bac0:	e7d8      	b.n	800ba74 <uxr_serialize_INFO_Payload+0x48>
 800bac2:	bf00      	nop

0800bac4 <uxr_serialize_READ_DATA_Payload>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	2202      	movs	r2, #2
 800bac8:	4605      	mov	r5, r0
 800baca:	460e      	mov	r6, r1
 800bacc:	f002 f9b6 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800bad0:	2202      	movs	r2, #2
 800bad2:	18b1      	adds	r1, r6, r2
 800bad4:	4604      	mov	r4, r0
 800bad6:	4628      	mov	r0, r5
 800bad8:	f002 f9b0 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800badc:	1d31      	adds	r1, r6, #4
 800bade:	4004      	ands	r4, r0
 800bae0:	4628      	mov	r0, r5
 800bae2:	f7ff fe5d 	bl	800b7a0 <uxr_serialize_ReadSpecification>
 800bae6:	b2e4      	uxtb	r4, r4
 800bae8:	4020      	ands	r0, r4
 800baea:	bd70      	pop	{r4, r5, r6, pc}

0800baec <uxr_serialize_WRITE_DATA_Payload_Data>:
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	2202      	movs	r2, #2
 800baf0:	4605      	mov	r5, r0
 800baf2:	460e      	mov	r6, r1
 800baf4:	f002 f9a2 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800baf8:	2202      	movs	r2, #2
 800bafa:	4604      	mov	r4, r0
 800bafc:	18b1      	adds	r1, r6, r2
 800bafe:	4628      	mov	r0, r5
 800bb00:	f002 f99c 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800bb04:	4020      	ands	r0, r4
 800bb06:	b2c0      	uxtb	r0, r0
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	bf00      	nop

0800bb0c <uxr_serialize_ACKNACK_Payload>:
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	460c      	mov	r4, r1
 800bb10:	460e      	mov	r6, r1
 800bb12:	f834 1b02 	ldrh.w	r1, [r4], #2
 800bb16:	4605      	mov	r5, r0
 800bb18:	f7fc fc1e 	bl	8008358 <ucdr_serialize_uint16_t>
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4604      	mov	r4, r0
 800bb22:	4628      	mov	r0, r5
 800bb24:	f002 f98a 	bl	800de3c <ucdr_serialize_array_uint8_t>
 800bb28:	7931      	ldrb	r1, [r6, #4]
 800bb2a:	4004      	ands	r4, r0
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	f7fc fbe7 	bl	8008300 <ucdr_serialize_uint8_t>
 800bb32:	b2e4      	uxtb	r4, r4
 800bb34:	4020      	ands	r0, r4
 800bb36:	bd70      	pop	{r4, r5, r6, pc}

0800bb38 <uxr_deserialize_ACKNACK_Payload>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	460e      	mov	r6, r1
 800bb3e:	f7fc fd0b 	bl	8008558 <ucdr_deserialize_uint16_t>
 800bb42:	2202      	movs	r2, #2
 800bb44:	18b1      	adds	r1, r6, r2
 800bb46:	4604      	mov	r4, r0
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f002 f9db 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800bb4e:	1d31      	adds	r1, r6, #4
 800bb50:	4004      	ands	r4, r0
 800bb52:	4628      	mov	r0, r5
 800bb54:	f7fc fbea 	bl	800832c <ucdr_deserialize_uint8_t>
 800bb58:	b2e4      	uxtb	r4, r4
 800bb5a:	4020      	ands	r0, r4
 800bb5c:	bd70      	pop	{r4, r5, r6, pc}
 800bb5e:	bf00      	nop

0800bb60 <uxr_serialize_HEARTBEAT_Payload>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	460d      	mov	r5, r1
 800bb64:	8809      	ldrh	r1, [r1, #0]
 800bb66:	4606      	mov	r6, r0
 800bb68:	f7fc fbf6 	bl	8008358 <ucdr_serialize_uint16_t>
 800bb6c:	8869      	ldrh	r1, [r5, #2]
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4630      	mov	r0, r6
 800bb72:	f7fc fbf1 	bl	8008358 <ucdr_serialize_uint16_t>
 800bb76:	7929      	ldrb	r1, [r5, #4]
 800bb78:	4004      	ands	r4, r0
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f7fc fbc0 	bl	8008300 <ucdr_serialize_uint8_t>
 800bb80:	b2e4      	uxtb	r4, r4
 800bb82:	4020      	ands	r0, r4
 800bb84:	bd70      	pop	{r4, r5, r6, pc}
 800bb86:	bf00      	nop

0800bb88 <uxr_deserialize_HEARTBEAT_Payload>:
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	460e      	mov	r6, r1
 800bb8e:	f7fc fce3 	bl	8008558 <ucdr_deserialize_uint16_t>
 800bb92:	1cb1      	adds	r1, r6, #2
 800bb94:	4604      	mov	r4, r0
 800bb96:	4628      	mov	r0, r5
 800bb98:	f7fc fcde 	bl	8008558 <ucdr_deserialize_uint16_t>
 800bb9c:	1d31      	adds	r1, r6, #4
 800bb9e:	4004      	ands	r4, r0
 800bba0:	4628      	mov	r0, r5
 800bba2:	f7fc fbc3 	bl	800832c <ucdr_deserialize_uint8_t>
 800bba6:	b2e4      	uxtb	r4, r4
 800bba8:	4020      	ands	r0, r4
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}

0800bbac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	460e      	mov	r6, r1
 800bbb4:	f7fd fa6c 	bl	8009090 <ucdr_deserialize_int32_t>
 800bbb8:	1d31      	adds	r1, r6, #4
 800bbba:	4607      	mov	r7, r0
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f7fc fee5 	bl	800898c <ucdr_deserialize_uint32_t>
 800bbc2:	f106 0108 	add.w	r1, r6, #8
 800bbc6:	4680      	mov	r8, r0
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f7fd fa61 	bl	8009090 <ucdr_deserialize_int32_t>
 800bbce:	f106 010c 	add.w	r1, r6, #12
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f7fc fed9 	bl	800898c <ucdr_deserialize_uint32_t>
 800bbda:	ea07 0708 	and.w	r7, r7, r8
 800bbde:	403c      	ands	r4, r7
 800bbe0:	f106 0110 	add.w	r1, r6, #16
 800bbe4:	4004      	ands	r4, r0
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f7fd fa52 	bl	8009090 <ucdr_deserialize_int32_t>
 800bbec:	f106 0114 	add.w	r1, r6, #20
 800bbf0:	4607      	mov	r7, r0
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f7fc feca 	bl	800898c <ucdr_deserialize_uint32_t>
 800bbf8:	b2e4      	uxtb	r4, r4
 800bbfa:	403c      	ands	r4, r7
 800bbfc:	4020      	ands	r0, r4
 800bbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc02:	bf00      	nop

0800bc04 <uxr_deserialize_SampleIdentity>:
 800bc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc08:	220c      	movs	r2, #12
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	f002 f979 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800bc12:	2203      	movs	r2, #3
 800bc14:	f105 010c 	add.w	r1, r5, #12
 800bc18:	4607      	mov	r7, r0
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f002 f972 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800bc20:	f105 010f 	add.w	r1, r5, #15
 800bc24:	4680      	mov	r8, r0
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7fc fb80 	bl	800832c <ucdr_deserialize_uint8_t>
 800bc2c:	f105 0110 	add.w	r1, r5, #16
 800bc30:	4606      	mov	r6, r0
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7fd fa2c 	bl	8009090 <ucdr_deserialize_int32_t>
 800bc38:	f105 0114 	add.w	r1, r5, #20
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	4620      	mov	r0, r4
 800bc40:	ea07 0708 	and.w	r7, r7, r8
 800bc44:	461c      	mov	r4, r3
 800bc46:	f7fc fea1 	bl	800898c <ucdr_deserialize_uint32_t>
 800bc4a:	403e      	ands	r6, r7
 800bc4c:	4034      	ands	r4, r6
 800bc4e:	4020      	ands	r0, r4
 800bc50:	b2c0      	uxtb	r0, r0
 800bc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc56:	bf00      	nop

0800bc58 <rcl_convert_rmw_ret_to_rcl_ret>:
 800bc58:	280b      	cmp	r0, #11
 800bc5a:	dc0d      	bgt.n	800bc78 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	db09      	blt.n	800bc74 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800bc60:	280b      	cmp	r0, #11
 800bc62:	d807      	bhi.n	800bc74 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800bc64:	e8df f000 	tbb	[pc, r0]
 800bc68:	07060607 	.word	0x07060607
 800bc6c:	06060606 	.word	0x06060606
 800bc70:	07070606 	.word	0x07070606
 800bc74:	2001      	movs	r0, #1
 800bc76:	4770      	bx	lr
 800bc78:	28cb      	cmp	r0, #203	; 0xcb
 800bc7a:	bf18      	it	ne
 800bc7c:	2001      	movne	r0, #1
 800bc7e:	4770      	bx	lr

0800bc80 <rcl_get_zero_initialized_context>:
 800bc80:	4a03      	ldr	r2, [pc, #12]	; (800bc90 <rcl_get_zero_initialized_context+0x10>)
 800bc82:	4603      	mov	r3, r0
 800bc84:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc88:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	4770      	bx	lr
 800bc90:	08011b74 	.word	0x08011b74

0800bc94 <rcl_context_is_valid>:
 800bc94:	b118      	cbz	r0, 800bc9e <rcl_context_is_valid+0xa>
 800bc96:	6840      	ldr	r0, [r0, #4]
 800bc98:	3800      	subs	r0, #0
 800bc9a:	bf18      	it	ne
 800bc9c:	2001      	movne	r0, #1
 800bc9e:	4770      	bx	lr

0800bca0 <__cleanup_context>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	4606      	mov	r6, r0
 800bca6:	6800      	ldr	r0, [r0, #0]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	6073      	str	r3, [r6, #4]
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d049      	beq.n	800bd44 <__cleanup_context+0xa4>
 800bcb0:	6947      	ldr	r7, [r0, #20]
 800bcb2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bcb6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800bcba:	b137      	cbz	r7, 800bcca <__cleanup_context+0x2a>
 800bcbc:	3014      	adds	r0, #20
 800bcbe:	f000 f9bb 	bl	800c038 <rcl_init_options_fini>
 800bcc2:	4607      	mov	r7, r0
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d144      	bne.n	800bd52 <__cleanup_context+0xb2>
 800bcc8:	6830      	ldr	r0, [r6, #0]
 800bcca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bccc:	b143      	cbz	r3, 800bce0 <__cleanup_context+0x40>
 800bcce:	3028      	adds	r0, #40	; 0x28
 800bcd0:	f001 fd9a 	bl	800d808 <rmw_context_fini>
 800bcd4:	b118      	cbz	r0, 800bcde <__cleanup_context+0x3e>
 800bcd6:	2f00      	cmp	r7, #0
 800bcd8:	d03e      	beq.n	800bd58 <__cleanup_context+0xb8>
 800bcda:	f7fb fde5 	bl	80078a8 <rcutils_reset_error>
 800bcde:	6830      	ldr	r0, [r6, #0]
 800bce0:	6a03      	ldr	r3, [r0, #32]
 800bce2:	b1db      	cbz	r3, 800bd1c <__cleanup_context+0x7c>
 800bce4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800bce8:	2a01      	cmp	r2, #1
 800bcea:	f17c 0100 	sbcs.w	r1, ip, #0
 800bcee:	db11      	blt.n	800bd14 <__cleanup_context+0x74>
 800bcf0:	2400      	movs	r4, #0
 800bcf2:	4625      	mov	r5, r4
 800bcf4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	b1b8      	cbz	r0, 800bd2c <__cleanup_context+0x8c>
 800bcfc:	47c0      	blx	r8
 800bcfe:	6833      	ldr	r3, [r6, #0]
 800bd00:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800bd04:	3401      	adds	r4, #1
 800bd06:	f145 0500 	adc.w	r5, r5, #0
 800bd0a:	4294      	cmp	r4, r2
 800bd0c:	eb75 010c 	sbcs.w	r1, r5, ip
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	dbef      	blt.n	800bcf4 <__cleanup_context+0x54>
 800bd14:	4618      	mov	r0, r3
 800bd16:	4649      	mov	r1, r9
 800bd18:	47c0      	blx	r8
 800bd1a:	6830      	ldr	r0, [r6, #0]
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	47c0      	blx	r8
 800bd20:	2300      	movs	r3, #0
 800bd22:	e9c6 3300 	strd	r3, r3, [r6]
 800bd26:	4638      	mov	r0, r7
 800bd28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd2c:	3401      	adds	r4, #1
 800bd2e:	f145 0500 	adc.w	r5, r5, #0
 800bd32:	4294      	cmp	r4, r2
 800bd34:	eb75 010c 	sbcs.w	r1, r5, ip
 800bd38:	dbdc      	blt.n	800bcf4 <__cleanup_context+0x54>
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	47c0      	blx	r8
 800bd40:	6830      	ldr	r0, [r6, #0]
 800bd42:	e7eb      	b.n	800bd1c <__cleanup_context+0x7c>
 800bd44:	4607      	mov	r7, r0
 800bd46:	2300      	movs	r3, #0
 800bd48:	e9c6 3300 	strd	r3, r3, [r6]
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd52:	f7fb fda9 	bl	80078a8 <rcutils_reset_error>
 800bd56:	e7b7      	b.n	800bcc8 <__cleanup_context+0x28>
 800bd58:	f7ff ff7e 	bl	800bc58 <rcl_convert_rmw_ret_to_rcl_ret>
 800bd5c:	4607      	mov	r7, r0
 800bd5e:	e7bc      	b.n	800bcda <__cleanup_context+0x3a>

0800bd60 <rcl_init>:
 800bd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd64:	1e05      	subs	r5, r0, #0
 800bd66:	b09e      	sub	sp, #120	; 0x78
 800bd68:	460e      	mov	r6, r1
 800bd6a:	4690      	mov	r8, r2
 800bd6c:	461f      	mov	r7, r3
 800bd6e:	f340 809c 	ble.w	800beaa <rcl_init+0x14a>
 800bd72:	2900      	cmp	r1, #0
 800bd74:	f000 809c 	beq.w	800beb0 <rcl_init+0x150>
 800bd78:	f1a1 0e04 	sub.w	lr, r1, #4
 800bd7c:	f04f 0c00 	mov.w	ip, #0
 800bd80:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800bd84:	f10c 0c01 	add.w	ip, ip, #1
 800bd88:	2c00      	cmp	r4, #0
 800bd8a:	f000 8091 	beq.w	800beb0 <rcl_init+0x150>
 800bd8e:	4565      	cmp	r5, ip
 800bd90:	d1f6      	bne.n	800bd80 <rcl_init+0x20>
 800bd92:	f1b8 0f00 	cmp.w	r8, #0
 800bd96:	f000 808b 	beq.w	800beb0 <rcl_init+0x150>
 800bd9a:	f8d8 4000 	ldr.w	r4, [r8]
 800bd9e:	2c00      	cmp	r4, #0
 800bda0:	f000 8086 	beq.w	800beb0 <rcl_init+0x150>
 800bda4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bda6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800bdaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	f8cc 3000 	str.w	r3, [ip]
 800bdb4:	a819      	add	r0, sp, #100	; 0x64
 800bdb6:	f7fb fd53 	bl	8007860 <rcutils_allocator_is_valid>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d078      	beq.n	800beb0 <rcl_init+0x150>
 800bdbe:	2f00      	cmp	r7, #0
 800bdc0:	d076      	beq.n	800beb0 <rcl_init+0x150>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d178      	bne.n	800beba <rcl_init+0x15a>
 800bdc8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800bdcc:	2178      	movs	r1, #120	; 0x78
 800bdce:	2001      	movs	r0, #1
 800bdd0:	4798      	blx	r3
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	6038      	str	r0, [r7, #0]
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f000 80b6 	beq.w	800bf48 <rcl_init+0x1e8>
 800bddc:	a802      	add	r0, sp, #8
 800bdde:	f001 f957 	bl	800d090 <rmw_get_zero_initialized_context>
 800bde2:	a902      	add	r1, sp, #8
 800bde4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bde8:	2250      	movs	r2, #80	; 0x50
 800bdea:	ac19      	add	r4, sp, #100	; 0x64
 800bdec:	f004 fe09 	bl	8010a02 <memcpy>
 800bdf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdf2:	f8d7 e000 	ldr.w	lr, [r7]
 800bdf6:	46f4      	mov	ip, lr
 800bdf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	f8cc 3000 	str.w	r3, [ip]
 800be02:	f10e 0114 	add.w	r1, lr, #20
 800be06:	4640      	mov	r0, r8
 800be08:	f000 f940 	bl	800c08c <rcl_init_options_copy>
 800be0c:	4604      	mov	r4, r0
 800be0e:	2800      	cmp	r0, #0
 800be10:	d144      	bne.n	800be9c <rcl_init+0x13c>
 800be12:	f8d7 9000 	ldr.w	r9, [r7]
 800be16:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800be1a:	f8c9 0020 	str.w	r0, [r9, #32]
 800be1e:	f8c9 5018 	str.w	r5, [r9, #24]
 800be22:	f8c9 801c 	str.w	r8, [r9, #28]
 800be26:	2d00      	cmp	r5, #0
 800be28:	d04e      	beq.n	800bec8 <rcl_init+0x168>
 800be2a:	2e00      	cmp	r6, #0
 800be2c:	d04c      	beq.n	800bec8 <rcl_init+0x168>
 800be2e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800be32:	2104      	movs	r1, #4
 800be34:	4628      	mov	r0, r5
 800be36:	4798      	blx	r3
 800be38:	f8c9 0020 	str.w	r0, [r9, #32]
 800be3c:	f8d7 9000 	ldr.w	r9, [r7]
 800be40:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800be44:	46ca      	mov	sl, r9
 800be46:	b343      	cbz	r3, 800be9a <rcl_init+0x13a>
 800be48:	2d01      	cmp	r5, #1
 800be4a:	f178 0300 	sbcs.w	r3, r8, #0
 800be4e:	db3b      	blt.n	800bec8 <rcl_init+0x168>
 800be50:	2400      	movs	r4, #0
 800be52:	3e04      	subs	r6, #4
 800be54:	46a1      	mov	r9, r4
 800be56:	e00b      	b.n	800be70 <rcl_init+0x110>
 800be58:	6831      	ldr	r1, [r6, #0]
 800be5a:	f004 fdd2 	bl	8010a02 <memcpy>
 800be5e:	3401      	adds	r4, #1
 800be60:	f149 0900 	adc.w	r9, r9, #0
 800be64:	45c8      	cmp	r8, r9
 800be66:	bf08      	it	eq
 800be68:	42a5      	cmpeq	r5, r4
 800be6a:	d02b      	beq.n	800bec4 <rcl_init+0x164>
 800be6c:	f8d7 a000 	ldr.w	sl, [r7]
 800be70:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800be74:	f7f4 f9be 	bl	80001f4 <strlen>
 800be78:	1c42      	adds	r2, r0, #1
 800be7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be7c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800be7e:	f8da a020 	ldr.w	sl, [sl, #32]
 800be82:	9201      	str	r2, [sp, #4]
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800be8e:	6a1b      	ldr	r3, [r3, #32]
 800be90:	9a01      	ldr	r2, [sp, #4]
 800be92:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800be96:	2800      	cmp	r0, #0
 800be98:	d1de      	bne.n	800be58 <rcl_init+0xf8>
 800be9a:	240a      	movs	r4, #10
 800be9c:	4638      	mov	r0, r7
 800be9e:	f7ff feff 	bl	800bca0 <__cleanup_context>
 800bea2:	4620      	mov	r0, r4
 800bea4:	b01e      	add	sp, #120	; 0x78
 800bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beaa:	2900      	cmp	r1, #0
 800beac:	f43f af71 	beq.w	800bd92 <rcl_init+0x32>
 800beb0:	240b      	movs	r4, #11
 800beb2:	4620      	mov	r0, r4
 800beb4:	b01e      	add	sp, #120	; 0x78
 800beb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beba:	2464      	movs	r4, #100	; 0x64
 800bebc:	4620      	mov	r0, r4
 800bebe:	b01e      	add	sp, #120	; 0x78
 800bec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec4:	f8d7 9000 	ldr.w	r9, [r7]
 800bec8:	4926      	ldr	r1, [pc, #152]	; (800bf64 <rcl_init+0x204>)
 800beca:	680b      	ldr	r3, [r1, #0]
 800becc:	3301      	adds	r3, #1
 800bece:	d036      	beq.n	800bf3e <rcl_init+0x1de>
 800bed0:	600b      	str	r3, [r1, #0]
 800bed2:	461a      	mov	r2, r3
 800bed4:	2400      	movs	r4, #0
 800bed6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800beda:	607b      	str	r3, [r7, #4]
 800bedc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bede:	3301      	adds	r3, #1
 800bee0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800bee4:	d034      	beq.n	800bf50 <rcl_init+0x1f0>
 800bee6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800beea:	b93b      	cbnz	r3, 800befc <rcl_init+0x19c>
 800beec:	3030      	adds	r0, #48	; 0x30
 800beee:	f000 f939 	bl	800c164 <rcl_get_localhost_only>
 800bef2:	4604      	mov	r4, r0
 800bef4:	2800      	cmp	r0, #0
 800bef6:	d1d1      	bne.n	800be9c <rcl_init+0x13c>
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	6958      	ldr	r0, [r3, #20]
 800befc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800befe:	aa18      	add	r2, sp, #96	; 0x60
 800bf00:	a917      	add	r1, sp, #92	; 0x5c
 800bf02:	f000 fd81 	bl	800ca08 <rcl_validate_enclave_name>
 800bf06:	4604      	mov	r4, r0
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d1c7      	bne.n	800be9c <rcl_init+0x13c>
 800bf0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf0e:	b9eb      	cbnz	r3, 800bf4c <rcl_init+0x1ec>
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	694b      	ldr	r3, [r1, #20]
 800bf14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bf16:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800bf1a:	f000 fc3d 	bl	800c798 <rcl_get_security_options_from_environment>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d1bb      	bne.n	800be9c <rcl_init+0x13c>
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6948      	ldr	r0, [r1, #20]
 800bf28:	3128      	adds	r1, #40	; 0x28
 800bf2a:	3018      	adds	r0, #24
 800bf2c:	f001 fb36 	bl	800d59c <rmw_init>
 800bf30:	4604      	mov	r4, r0
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d0bd      	beq.n	800beb2 <rcl_init+0x152>
 800bf36:	f7ff fe8f 	bl	800bc58 <rcl_convert_rmw_ret_to_rcl_ret>
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	e7ae      	b.n	800be9c <rcl_init+0x13c>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	461c      	mov	r4, r3
 800bf42:	600a      	str	r2, [r1, #0]
 800bf44:	4613      	mov	r3, r2
 800bf46:	e7c6      	b.n	800bed6 <rcl_init+0x176>
 800bf48:	240a      	movs	r4, #10
 800bf4a:	e7b2      	b.n	800beb2 <rcl_init+0x152>
 800bf4c:	2401      	movs	r4, #1
 800bf4e:	e7a5      	b.n	800be9c <rcl_init+0x13c>
 800bf50:	3024      	adds	r0, #36	; 0x24
 800bf52:	f003 fc5d 	bl	800f810 <rcl_get_default_domain_id>
 800bf56:	4604      	mov	r4, r0
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d19f      	bne.n	800be9c <rcl_init+0x13c>
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	6958      	ldr	r0, [r3, #20]
 800bf60:	e7c1      	b.n	800bee6 <rcl_init+0x186>
 800bf62:	bf00      	nop
 800bf64:	2000d9fc 	.word	0x2000d9fc

0800bf68 <rcl_get_zero_initialized_init_options>:
 800bf68:	2000      	movs	r0, #0
 800bf6a:	4770      	bx	lr

0800bf6c <rcl_init_options_init>:
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf70:	b097      	sub	sp, #92	; 0x5c
 800bf72:	ae1d      	add	r6, sp, #116	; 0x74
 800bf74:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d058      	beq.n	800c02e <rcl_init_options_init+0xc2>
 800bf7c:	6803      	ldr	r3, [r0, #0]
 800bf7e:	4605      	mov	r5, r0
 800bf80:	b133      	cbz	r3, 800bf90 <rcl_init_options_init+0x24>
 800bf82:	2464      	movs	r4, #100	; 0x64
 800bf84:	4620      	mov	r0, r4
 800bf86:	b017      	add	sp, #92	; 0x5c
 800bf88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bf8c:	b004      	add	sp, #16
 800bf8e:	4770      	bx	lr
 800bf90:	4630      	mov	r0, r6
 800bf92:	f7fb fc65 	bl	8007860 <rcutils_allocator_is_valid>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d049      	beq.n	800c02e <rcl_init_options_init+0xc2>
 800bf9a:	46b4      	mov	ip, r6
 800bf9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfa0:	ac11      	add	r4, sp, #68	; 0x44
 800bfa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfa4:	f8dc 3000 	ldr.w	r3, [ip]
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	9921      	ldr	r1, [sp, #132]	; 0x84
 800bfac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfae:	2050      	movs	r0, #80	; 0x50
 800bfb0:	4798      	blx	r3
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	6028      	str	r0, [r5, #0]
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d03b      	beq.n	800c032 <rcl_init_options_init+0xc6>
 800bfba:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800bfbe:	4686      	mov	lr, r0
 800bfc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bfc8:	f8dc 3000 	ldr.w	r3, [ip]
 800bfcc:	f8ce 3000 	str.w	r3, [lr]
 800bfd0:	a802      	add	r0, sp, #8
 800bfd2:	f001 f86d 	bl	800d0b0 <rmw_get_zero_initialized_init_options>
 800bfd6:	f10d 0e08 	add.w	lr, sp, #8
 800bfda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bfde:	f104 0c18 	add.w	ip, r4, #24
 800bfe2:	682f      	ldr	r7, [r5, #0]
 800bfe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bfe8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bfec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bff0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bff4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bff8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bffc:	ac20      	add	r4, sp, #128	; 0x80
 800bffe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c002:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c006:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c00a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c00e:	f107 0018 	add.w	r0, r7, #24
 800c012:	f001 f9cb 	bl	800d3ac <rmw_init_options_init>
 800c016:	4604      	mov	r4, r0
 800c018:	2800      	cmp	r0, #0
 800c01a:	d0b3      	beq.n	800bf84 <rcl_init_options_init+0x18>
 800c01c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c01e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c020:	6828      	ldr	r0, [r5, #0]
 800c022:	4798      	blx	r3
 800c024:	4620      	mov	r0, r4
 800c026:	f7ff fe17 	bl	800bc58 <rcl_convert_rmw_ret_to_rcl_ret>
 800c02a:	4604      	mov	r4, r0
 800c02c:	e7aa      	b.n	800bf84 <rcl_init_options_init+0x18>
 800c02e:	240b      	movs	r4, #11
 800c030:	e7a8      	b.n	800bf84 <rcl_init_options_init+0x18>
 800c032:	240a      	movs	r4, #10
 800c034:	e7a6      	b.n	800bf84 <rcl_init_options_init+0x18>
 800c036:	bf00      	nop

0800c038 <rcl_init_options_fini>:
 800c038:	b530      	push	{r4, r5, lr}
 800c03a:	b087      	sub	sp, #28
 800c03c:	b1f0      	cbz	r0, 800c07c <rcl_init_options_fini+0x44>
 800c03e:	6803      	ldr	r3, [r0, #0]
 800c040:	4604      	mov	r4, r0
 800c042:	b1db      	cbz	r3, 800c07c <rcl_init_options_fini+0x44>
 800c044:	469c      	mov	ip, r3
 800c046:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c04a:	f10d 0e04 	add.w	lr, sp, #4
 800c04e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c052:	f8dc 3000 	ldr.w	r3, [ip]
 800c056:	f8ce 3000 	str.w	r3, [lr]
 800c05a:	a801      	add	r0, sp, #4
 800c05c:	f7fb fc00 	bl	8007860 <rcutils_allocator_is_valid>
 800c060:	b160      	cbz	r0, 800c07c <rcl_init_options_fini+0x44>
 800c062:	6820      	ldr	r0, [r4, #0]
 800c064:	3018      	adds	r0, #24
 800c066:	f001 fa51 	bl	800d50c <rmw_init_options_fini>
 800c06a:	4605      	mov	r5, r0
 800c06c:	b950      	cbnz	r0, 800c084 <rcl_init_options_fini+0x4c>
 800c06e:	6820      	ldr	r0, [r4, #0]
 800c070:	9b02      	ldr	r3, [sp, #8]
 800c072:	9905      	ldr	r1, [sp, #20]
 800c074:	4798      	blx	r3
 800c076:	4628      	mov	r0, r5
 800c078:	b007      	add	sp, #28
 800c07a:	bd30      	pop	{r4, r5, pc}
 800c07c:	250b      	movs	r5, #11
 800c07e:	4628      	mov	r0, r5
 800c080:	b007      	add	sp, #28
 800c082:	bd30      	pop	{r4, r5, pc}
 800c084:	f7ff fde8 	bl	800bc58 <rcl_convert_rmw_ret_to_rcl_ret>
 800c088:	4605      	mov	r5, r0
 800c08a:	e7f8      	b.n	800c07e <rcl_init_options_fini+0x46>

0800c08c <rcl_init_options_copy>:
 800c08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c090:	b094      	sub	sp, #80	; 0x50
 800c092:	2800      	cmp	r0, #0
 800c094:	d058      	beq.n	800c148 <rcl_init_options_copy+0xbc>
 800c096:	4604      	mov	r4, r0
 800c098:	6800      	ldr	r0, [r0, #0]
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d054      	beq.n	800c148 <rcl_init_options_copy+0xbc>
 800c09e:	460e      	mov	r6, r1
 800c0a0:	f7fb fbde 	bl	8007860 <rcutils_allocator_is_valid>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d04f      	beq.n	800c148 <rcl_init_options_copy+0xbc>
 800c0a8:	2e00      	cmp	r6, #0
 800c0aa:	d04d      	beq.n	800c148 <rcl_init_options_copy+0xbc>
 800c0ac:	6833      	ldr	r3, [r6, #0]
 800c0ae:	b123      	cbz	r3, 800c0ba <rcl_init_options_copy+0x2e>
 800c0b0:	2464      	movs	r4, #100	; 0x64
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	b014      	add	sp, #80	; 0x50
 800c0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ba:	6827      	ldr	r7, [r4, #0]
 800c0bc:	46bc      	mov	ip, r7
 800c0be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0c2:	ad0f      	add	r5, sp, #60	; 0x3c
 800c0c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0c6:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ca:	f8d7 8000 	ldr.w	r8, [r7]
 800c0ce:	602b      	str	r3, [r5, #0]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	2050      	movs	r0, #80	; 0x50
 800c0d4:	47c0      	blx	r8
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	6030      	str	r0, [r6, #0]
 800c0da:	b3d0      	cbz	r0, 800c152 <rcl_init_options_copy+0xc6>
 800c0dc:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800c0e0:	4686      	mov	lr, r0
 800c0e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ee:	f8ce 3000 	str.w	r3, [lr]
 800c0f2:	4668      	mov	r0, sp
 800c0f4:	f000 ffdc 	bl	800d0b0 <rmw_get_zero_initialized_init_options>
 800c0f8:	46ee      	mov	lr, sp
 800c0fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c0fe:	f105 0c18 	add.w	ip, r5, #24
 800c102:	6824      	ldr	r4, [r4, #0]
 800c104:	6835      	ldr	r5, [r6, #0]
 800c106:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c10a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c10e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c112:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c116:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c11a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c11e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c122:	f104 0018 	add.w	r0, r4, #24
 800c126:	f105 0118 	add.w	r1, r5, #24
 800c12a:	f001 f9a7 	bl	800d47c <rmw_init_options_copy>
 800c12e:	4604      	mov	r4, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d0be      	beq.n	800c0b2 <rcl_init_options_copy+0x26>
 800c134:	f7fb fba2 	bl	800787c <rcutils_get_error_string>
 800c138:	f7fb fbb6 	bl	80078a8 <rcutils_reset_error>
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7ff ff7b 	bl	800c038 <rcl_init_options_fini>
 800c142:	b140      	cbz	r0, 800c156 <rcl_init_options_copy+0xca>
 800c144:	4604      	mov	r4, r0
 800c146:	e7b4      	b.n	800c0b2 <rcl_init_options_copy+0x26>
 800c148:	240b      	movs	r4, #11
 800c14a:	4620      	mov	r0, r4
 800c14c:	b014      	add	sp, #80	; 0x50
 800c14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c152:	240a      	movs	r4, #10
 800c154:	e7ad      	b.n	800c0b2 <rcl_init_options_copy+0x26>
 800c156:	4620      	mov	r0, r4
 800c158:	b014      	add	sp, #80	; 0x50
 800c15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c15e:	f7ff bd7b 	b.w	800bc58 <rcl_convert_rmw_ret_to_rcl_ret>
 800c162:	bf00      	nop

0800c164 <rcl_get_localhost_only>:
 800c164:	b510      	push	{r4, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	2300      	movs	r3, #0
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	b1b8      	cbz	r0, 800c19e <rcl_get_localhost_only+0x3a>
 800c16e:	4604      	mov	r4, r0
 800c170:	a901      	add	r1, sp, #4
 800c172:	480c      	ldr	r0, [pc, #48]	; (800c1a4 <rcl_get_localhost_only+0x40>)
 800c174:	f000 fc90 	bl	800ca98 <rcutils_get_env>
 800c178:	b110      	cbz	r0, 800c180 <rcl_get_localhost_only+0x1c>
 800c17a:	2001      	movs	r0, #1
 800c17c:	b002      	add	sp, #8
 800c17e:	bd10      	pop	{r4, pc}
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	b113      	cbz	r3, 800c18a <rcl_get_localhost_only+0x26>
 800c184:	781a      	ldrb	r2, [r3, #0]
 800c186:	2a31      	cmp	r2, #49	; 0x31
 800c188:	d004      	beq.n	800c194 <rcl_get_localhost_only+0x30>
 800c18a:	2302      	movs	r3, #2
 800c18c:	2000      	movs	r0, #0
 800c18e:	7023      	strb	r3, [r4, #0]
 800c190:	b002      	add	sp, #8
 800c192:	bd10      	pop	{r4, pc}
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1f7      	bne.n	800c18a <rcl_get_localhost_only+0x26>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e7f6      	b.n	800c18c <rcl_get_localhost_only+0x28>
 800c19e:	200b      	movs	r0, #11
 800c1a0:	b002      	add	sp, #8
 800c1a2:	bd10      	pop	{r4, pc}
 800c1a4:	08011b7c 	.word	0x08011b7c

0800c1a8 <rcl_get_zero_initialized_node>:
 800c1a8:	4a03      	ldr	r2, [pc, #12]	; (800c1b8 <rcl_get_zero_initialized_node+0x10>)
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1b0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	4770      	bx	lr
 800c1b8:	08011ba4 	.word	0x08011ba4

0800c1bc <rcl_node_init>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	b0a9      	sub	sp, #164	; 0xa4
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800c1c8:	a823      	add	r0, sp, #140	; 0x8c
 800c1ca:	460e      	mov	r6, r1
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	461f      	mov	r7, r3
 800c1d0:	f003 fd46 	bl	800fc60 <rcl_guard_condition_get_default_options>
 800c1d4:	f1b8 0f00 	cmp.w	r8, #0
 800c1d8:	f000 80e6 	beq.w	800c3a8 <rcl_node_init+0x1ec>
 800c1dc:	4640      	mov	r0, r8
 800c1de:	f7fb fb3f 	bl	8007860 <rcutils_allocator_is_valid>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f000 80e0 	beq.w	800c3a8 <rcl_node_init+0x1ec>
 800c1e8:	2e00      	cmp	r6, #0
 800c1ea:	f000 80dd 	beq.w	800c3a8 <rcl_node_init+0x1ec>
 800c1ee:	2d00      	cmp	r5, #0
 800c1f0:	f000 80da 	beq.w	800c3a8 <rcl_node_init+0x1ec>
 800c1f4:	2c00      	cmp	r4, #0
 800c1f6:	f000 80d7 	beq.w	800c3a8 <rcl_node_init+0x1ec>
 800c1fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c1fe:	f1b9 0f00 	cmp.w	r9, #0
 800c202:	f040 80fd 	bne.w	800c400 <rcl_node_init+0x244>
 800c206:	2f00      	cmp	r7, #0
 800c208:	f000 80ce 	beq.w	800c3a8 <rcl_node_init+0x1ec>
 800c20c:	4638      	mov	r0, r7
 800c20e:	f7ff fd41 	bl	800bc94 <rcl_context_is_valid>
 800c212:	4682      	mov	sl, r0
 800c214:	2800      	cmp	r0, #0
 800c216:	f000 80cd 	beq.w	800c3b4 <rcl_node_init+0x1f8>
 800c21a:	464a      	mov	r2, r9
 800c21c:	a922      	add	r1, sp, #136	; 0x88
 800c21e:	4630      	mov	r0, r6
 800c220:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800c224:	f001 f83a 	bl	800d29c <rmw_validate_node_name>
 800c228:	4681      	mov	r9, r0
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f040 80be 	bne.w	800c3ac <rcl_node_init+0x1f0>
 800c230:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c232:	2800      	cmp	r0, #0
 800c234:	f040 80f0 	bne.w	800c418 <rcl_node_init+0x25c>
 800c238:	4628      	mov	r0, r5
 800c23a:	f7f3 ffdb 	bl	80001f4 <strlen>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f040 80bb 	bne.w	800c3ba <rcl_node_init+0x1fe>
 800c244:	4d7c      	ldr	r5, [pc, #496]	; (800c438 <rcl_node_init+0x27c>)
 800c246:	a922      	add	r1, sp, #136	; 0x88
 800c248:	2200      	movs	r2, #0
 800c24a:	4628      	mov	r0, r5
 800c24c:	f001 f808 	bl	800d260 <rmw_validate_namespace>
 800c250:	4681      	mov	r9, r0
 800c252:	2800      	cmp	r0, #0
 800c254:	f040 80aa 	bne.w	800c3ac <rcl_node_init+0x1f0>
 800c258:	4682      	mov	sl, r0
 800c25a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c25c:	2800      	cmp	r0, #0
 800c25e:	f040 80e0 	bne.w	800c422 <rcl_node_init+0x266>
 800c262:	f8d8 3000 	ldr.w	r3, [r8]
 800c266:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c26a:	2078      	movs	r0, #120	; 0x78
 800c26c:	4798      	blx	r3
 800c26e:	4681      	mov	r9, r0
 800c270:	6060      	str	r0, [r4, #4]
 800c272:	2800      	cmp	r0, #0
 800c274:	f000 80ca 	beq.w	800c40c <rcl_node_init+0x250>
 800c278:	2200      	movs	r2, #0
 800c27a:	2300      	movs	r3, #0
 800c27c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800c280:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800c284:	a808      	add	r0, sp, #32
 800c286:	f000 f907 	bl	800c498 <rcl_node_get_default_options>
 800c28a:	a908      	add	r1, sp, #32
 800c28c:	4648      	mov	r0, r9
 800c28e:	2268      	movs	r2, #104	; 0x68
 800c290:	f004 fbb7 	bl	8010a02 <memcpy>
 800c294:	6861      	ldr	r1, [r4, #4]
 800c296:	6027      	str	r7, [r4, #0]
 800c298:	4640      	mov	r0, r8
 800c29a:	f000 f90b 	bl	800c4b4 <rcl_node_options_copy>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d158      	bne.n	800c354 <rcl_node_init+0x198>
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f7f3 ffa6 	bl	80001f4 <strlen>
 800c2a8:	4428      	add	r0, r5
 800c2aa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c2ae:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c2b2:	2b2f      	cmp	r3, #47	; 0x2f
 800c2b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	bf0c      	ite	eq
 800c2bc:	4b5f      	ldreq	r3, [pc, #380]	; (800c43c <rcl_node_init+0x280>)
 800c2be:	4b60      	ldrne	r3, [pc, #384]	; (800c440 <rcl_node_init+0x284>)
 800c2c0:	9302      	str	r3, [sp, #8]
 800c2c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c2cc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c2d0:	f000 fc0a 	bl	800cae8 <rcutils_format_string_limit>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800c2da:	6818      	ldr	r0, [r3, #0]
 800c2dc:	4631      	mov	r1, r6
 800c2de:	3028      	adds	r0, #40	; 0x28
 800c2e0:	462a      	mov	r2, r5
 800c2e2:	6866      	ldr	r6, [r4, #4]
 800c2e4:	f001 fbae 	bl	800da44 <rmw_create_node>
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	66b0      	str	r0, [r6, #104]	; 0x68
 800c2ec:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d032      	beq.n	800c358 <rcl_node_init+0x19c>
 800c2f2:	f001 fc3b 	bl	800db6c <rmw_node_get_graph_guard_condition>
 800c2f6:	4681      	mov	r9, r0
 800c2f8:	b360      	cbz	r0, 800c354 <rcl_node_init+0x198>
 800c2fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c2fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c302:	6866      	ldr	r6, [r4, #4]
 800c304:	2008      	movs	r0, #8
 800c306:	4798      	blx	r3
 800c308:	6863      	ldr	r3, [r4, #4]
 800c30a:	66f0      	str	r0, [r6, #108]	; 0x6c
 800c30c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800c310:	f1bb 0f00 	cmp.w	fp, #0
 800c314:	d020      	beq.n	800c358 <rcl_node_init+0x19c>
 800c316:	a806      	add	r0, sp, #24
 800c318:	f003 fc12 	bl	800fb40 <rcl_get_zero_initialized_guard_condition>
 800c31c:	a806      	add	r0, sp, #24
 800c31e:	c803      	ldmia	r0, {r0, r1}
 800c320:	6863      	ldr	r3, [r4, #4]
 800c322:	46c4      	mov	ip, r8
 800c324:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800c328:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c32c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c330:	ae23      	add	r6, sp, #140	; 0x8c
 800c332:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c334:	f8dc 3000 	ldr.w	r3, [ip]
 800c338:	6033      	str	r3, [r6, #0]
 800c33a:	ab28      	add	r3, sp, #160	; 0xa0
 800c33c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c340:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c344:	4649      	mov	r1, r9
 800c346:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c348:	463a      	mov	r2, r7
 800c34a:	4670      	mov	r0, lr
 800c34c:	f003 fc02 	bl	800fb54 <rcl_guard_condition_init_from_rmw>
 800c350:	4681      	mov	r9, r0
 800c352:	b328      	cbz	r0, 800c3a0 <rcl_node_init+0x1e4>
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	b1f3      	cbz	r3, 800c396 <rcl_node_init+0x1da>
 800c358:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c35a:	b128      	cbz	r0, 800c368 <rcl_node_init+0x1ac>
 800c35c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c360:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c364:	4798      	blx	r3
 800c366:	6863      	ldr	r3, [r4, #4]
 800c368:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c36a:	b110      	cbz	r0, 800c372 <rcl_node_init+0x1b6>
 800c36c:	f001 fb82 	bl	800da74 <rmw_destroy_node>
 800c370:	6863      	ldr	r3, [r4, #4]
 800c372:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c374:	b148      	cbz	r0, 800c38a <rcl_node_init+0x1ce>
 800c376:	f003 fc4d 	bl	800fc14 <rcl_guard_condition_fini>
 800c37a:	6863      	ldr	r3, [r4, #4]
 800c37c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c380:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c382:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c386:	4798      	blx	r3
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c38e:	4618      	mov	r0, r3
 800c390:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c394:	4798      	blx	r3
 800c396:	2300      	movs	r3, #0
 800c398:	e9c4 3300 	strd	r3, r3, [r4]
 800c39c:	f04f 0901 	mov.w	r9, #1
 800c3a0:	f1ba 0f00 	cmp.w	sl, #0
 800c3a4:	d125      	bne.n	800c3f2 <rcl_node_init+0x236>
 800c3a6:	e001      	b.n	800c3ac <rcl_node_init+0x1f0>
 800c3a8:	f04f 090b 	mov.w	r9, #11
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	b029      	add	sp, #164	; 0xa4
 800c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b4:	f04f 0965 	mov.w	r9, #101	; 0x65
 800c3b8:	e7f8      	b.n	800c3ac <rcl_node_init+0x1f0>
 800c3ba:	782b      	ldrb	r3, [r5, #0]
 800c3bc:	2b2f      	cmp	r3, #47	; 0x2f
 800c3be:	f43f af42 	beq.w	800c246 <rcl_node_init+0x8a>
 800c3c2:	9503      	str	r5, [sp, #12]
 800c3c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	4b1e      	ldr	r3, [pc, #120]	; (800c444 <rcl_node_init+0x288>)
 800c3cc:	9302      	str	r3, [sp, #8]
 800c3ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c3d8:	f000 fb86 	bl	800cae8 <rcutils_format_string_limit>
 800c3dc:	4605      	mov	r5, r0
 800c3de:	b340      	cbz	r0, 800c432 <rcl_node_init+0x276>
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	a922      	add	r1, sp, #136	; 0x88
 800c3e4:	9222      	str	r2, [sp, #136]	; 0x88
 800c3e6:	f000 ff3b 	bl	800d260 <rmw_validate_namespace>
 800c3ea:	4681      	mov	r9, r0
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f43f af34 	beq.w	800c25a <rcl_node_init+0x9e>
 800c3f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	4798      	blx	r3
 800c3fe:	e7d5      	b.n	800c3ac <rcl_node_init+0x1f0>
 800c400:	f04f 0964 	mov.w	r9, #100	; 0x64
 800c404:	4648      	mov	r0, r9
 800c406:	b029      	add	sp, #164	; 0xa4
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	f04f 090a 	mov.w	r9, #10
 800c410:	f1ba 0f00 	cmp.w	sl, #0
 800c414:	d1ed      	bne.n	800c3f2 <rcl_node_init+0x236>
 800c416:	e7c9      	b.n	800c3ac <rcl_node_init+0x1f0>
 800c418:	f000 ff92 	bl	800d340 <rmw_node_name_validation_result_string>
 800c41c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800c420:	e7c4      	b.n	800c3ac <rcl_node_init+0x1f0>
 800c422:	f000 ff2f 	bl	800d284 <rmw_namespace_validation_result_string>
 800c426:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800c42a:	f1ba 0f00 	cmp.w	sl, #0
 800c42e:	d1e0      	bne.n	800c3f2 <rcl_node_init+0x236>
 800c430:	e7bc      	b.n	800c3ac <rcl_node_init+0x1f0>
 800c432:	f04f 090a 	mov.w	r9, #10
 800c436:	e7b9      	b.n	800c3ac <rcl_node_init+0x1f0>
 800c438:	08011b94 	.word	0x08011b94
 800c43c:	08011a18 	.word	0x08011a18
 800c440:	08011b9c 	.word	0x08011b9c
 800c444:	08011b98 	.word	0x08011b98

0800c448 <rcl_node_is_valid>:
 800c448:	b130      	cbz	r0, 800c458 <rcl_node_is_valid+0x10>
 800c44a:	6843      	ldr	r3, [r0, #4]
 800c44c:	b123      	cbz	r3, 800c458 <rcl_node_is_valid+0x10>
 800c44e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c450:	b113      	cbz	r3, 800c458 <rcl_node_is_valid+0x10>
 800c452:	6800      	ldr	r0, [r0, #0]
 800c454:	f7ff bc1e 	b.w	800bc94 <rcl_context_is_valid>
 800c458:	2000      	movs	r0, #0
 800c45a:	4770      	bx	lr

0800c45c <rcl_node_get_name>:
 800c45c:	b120      	cbz	r0, 800c468 <rcl_node_get_name+0xc>
 800c45e:	6840      	ldr	r0, [r0, #4]
 800c460:	b110      	cbz	r0, 800c468 <rcl_node_get_name+0xc>
 800c462:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800c464:	b100      	cbz	r0, 800c468 <rcl_node_get_name+0xc>
 800c466:	6880      	ldr	r0, [r0, #8]
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop

0800c46c <rcl_node_get_namespace>:
 800c46c:	b120      	cbz	r0, 800c478 <rcl_node_get_namespace+0xc>
 800c46e:	6840      	ldr	r0, [r0, #4]
 800c470:	b110      	cbz	r0, 800c478 <rcl_node_get_namespace+0xc>
 800c472:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800c474:	b100      	cbz	r0, 800c478 <rcl_node_get_namespace+0xc>
 800c476:	68c0      	ldr	r0, [r0, #12]
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop

0800c47c <rcl_node_get_options>:
 800c47c:	b128      	cbz	r0, 800c48a <rcl_node_get_options+0xe>
 800c47e:	6840      	ldr	r0, [r0, #4]
 800c480:	b118      	cbz	r0, 800c48a <rcl_node_get_options+0xe>
 800c482:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800c484:	2b00      	cmp	r3, #0
 800c486:	bf08      	it	eq
 800c488:	2000      	moveq	r0, #0
 800c48a:	4770      	bx	lr

0800c48c <rcl_node_get_rmw_handle>:
 800c48c:	b110      	cbz	r0, 800c494 <rcl_node_get_rmw_handle+0x8>
 800c48e:	6840      	ldr	r0, [r0, #4]
 800c490:	b100      	cbz	r0, 800c494 <rcl_node_get_rmw_handle+0x8>
 800c492:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop

0800c498 <rcl_node_get_default_options>:
 800c498:	b510      	push	{r4, lr}
 800c49a:	2268      	movs	r2, #104	; 0x68
 800c49c:	4604      	mov	r4, r0
 800c49e:	2100      	movs	r1, #0
 800c4a0:	f004 f9e6 	bl	8010870 <memset>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f7fb f9cd 	bl	8007844 <rcutils_get_default_allocator>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	7523      	strb	r3, [r4, #20]
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	bd10      	pop	{r4, pc}
 800c4b2:	bf00      	nop

0800c4b4 <rcl_node_options_copy>:
 800c4b4:	b1d0      	cbz	r0, 800c4ec <rcl_node_options_copy+0x38>
 800c4b6:	b570      	push	{r4, r5, r6, lr}
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	b1a9      	cbz	r1, 800c4e8 <rcl_node_options_copy+0x34>
 800c4bc:	4288      	cmp	r0, r1
 800c4be:	4684      	mov	ip, r0
 800c4c0:	d012      	beq.n	800c4e8 <rcl_node_options_copy+0x34>
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	8a86      	ldrh	r6, [r0, #20]
 800c4c6:	468e      	mov	lr, r1
 800c4c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4ce:	682b      	ldr	r3, [r5, #0]
 800c4d0:	f8ce 3000 	str.w	r3, [lr]
 800c4d4:	f10c 0118 	add.w	r1, ip, #24
 800c4d8:	2250      	movs	r2, #80	; 0x50
 800c4da:	82a6      	strh	r6, [r4, #20]
 800c4dc:	f104 0018 	add.w	r0, r4, #24
 800c4e0:	f004 fa8f 	bl	8010a02 <memcpy>
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	200b      	movs	r0, #11
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	200b      	movs	r0, #11
 800c4ee:	4770      	bx	lr

0800c4f0 <rcl_node_resolve_name>:
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f6:	b091      	sub	sp, #68	; 0x44
 800c4f8:	ac1a      	add	r4, sp, #104	; 0x68
 800c4fa:	e884 000c 	stmia.w	r4, {r2, r3}
 800c4fe:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800c502:	2800      	cmp	r0, #0
 800c504:	d03b      	beq.n	800c57e <rcl_node_resolve_name+0x8e>
 800c506:	460c      	mov	r4, r1
 800c508:	4605      	mov	r5, r0
 800c50a:	f7ff ffb7 	bl	800c47c <rcl_node_get_options>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d037      	beq.n	800c582 <rcl_node_resolve_name+0x92>
 800c512:	4628      	mov	r0, r5
 800c514:	f7ff ffa2 	bl	800c45c <rcl_node_get_name>
 800c518:	4606      	mov	r6, r0
 800c51a:	4628      	mov	r0, r5
 800c51c:	f7ff ffa6 	bl	800c46c <rcl_node_get_namespace>
 800c520:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800c524:	4681      	mov	r9, r0
 800c526:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c52a:	ad0b      	add	r5, sp, #44	; 0x2c
 800c52c:	46ac      	mov	ip, r5
 800c52e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c532:	f8de 3000 	ldr.w	r3, [lr]
 800c536:	f8cc 3000 	str.w	r3, [ip]
 800c53a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c53c:	b1fb      	cbz	r3, 800c57e <rcl_node_resolve_name+0x8e>
 800c53e:	468a      	mov	sl, r1
 800c540:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800c544:	f000 fc28 	bl	800cd98 <rcutils_get_zero_initialized_string_map>
 800c548:	ab10      	add	r3, sp, #64	; 0x40
 800c54a:	9008      	str	r0, [sp, #32]
 800c54c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c550:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c554:	2100      	movs	r1, #0
 800c556:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c55a:	a808      	add	r0, sp, #32
 800c55c:	f000 fc94 	bl	800ce88 <rcutils_string_map_init>
 800c560:	4607      	mov	r7, r0
 800c562:	b180      	cbz	r0, 800c586 <rcl_node_resolve_name+0x96>
 800c564:	f7fb f98a 	bl	800787c <rcutils_get_error_string>
 800c568:	f7fb f99e 	bl	80078a8 <rcutils_reset_error>
 800c56c:	2f0a      	cmp	r7, #10
 800c56e:	bf18      	it	ne
 800c570:	2701      	movne	r7, #1
 800c572:	4638      	mov	r0, r7
 800c574:	b011      	add	sp, #68	; 0x44
 800c576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57a:	b002      	add	sp, #8
 800c57c:	4770      	bx	lr
 800c57e:	270b      	movs	r7, #11
 800c580:	e7f7      	b.n	800c572 <rcl_node_resolve_name+0x82>
 800c582:	2701      	movs	r7, #1
 800c584:	e7f5      	b.n	800c572 <rcl_node_resolve_name+0x82>
 800c586:	9009      	str	r0, [sp, #36]	; 0x24
 800c588:	9007      	str	r0, [sp, #28]
 800c58a:	a808      	add	r0, sp, #32
 800c58c:	f003 fad2 	bl	800fb34 <rcl_get_default_topic_name_substitutions>
 800c590:	4607      	mov	r7, r0
 800c592:	b1a8      	cbz	r0, 800c5c0 <rcl_node_resolve_name+0xd0>
 800c594:	280a      	cmp	r0, #10
 800c596:	9c07      	ldr	r4, [sp, #28]
 800c598:	d000      	beq.n	800c59c <rcl_node_resolve_name+0xac>
 800c59a:	2701      	movs	r7, #1
 800c59c:	a808      	add	r0, sp, #32
 800c59e:	f000 fcb3 	bl	800cf08 <rcutils_string_map_fini>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d13d      	bne.n	800c622 <rcl_node_resolve_name+0x132>
 800c5a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5a8:	4659      	mov	r1, fp
 800c5aa:	47d0      	blx	sl
 800c5ac:	4659      	mov	r1, fp
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	47d0      	blx	sl
 800c5b2:	f1b8 0f00 	cmp.w	r8, #0
 800c5b6:	d0dc      	beq.n	800c572 <rcl_node_resolve_name+0x82>
 800c5b8:	2f67      	cmp	r7, #103	; 0x67
 800c5ba:	bf08      	it	eq
 800c5bc:	2768      	moveq	r7, #104	; 0x68
 800c5be:	e7d8      	b.n	800c572 <rcl_node_resolve_name+0x82>
 800c5c0:	ab09      	add	r3, sp, #36	; 0x24
 800c5c2:	9305      	str	r3, [sp, #20]
 800c5c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5c6:	46ec      	mov	ip, sp
 800c5c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	f8cc 3000 	str.w	r3, [ip]
 800c5d2:	464a      	mov	r2, r9
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	ab08      	add	r3, sp, #32
 800c5da:	f003 f94d 	bl	800f878 <rcl_expand_topic_name>
 800c5de:	4607      	mov	r7, r0
 800c5e0:	b9b8      	cbnz	r0, 800c612 <rcl_node_resolve_name+0x122>
 800c5e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c5e4:	9009      	str	r0, [sp, #36]	; 0x24
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	a90a      	add	r1, sp, #40	; 0x28
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 fd74 	bl	800d0d8 <rmw_validate_full_topic_name>
 800c5f0:	b988      	cbnz	r0, 800c616 <rcl_node_resolve_name+0x126>
 800c5f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c5f4:	b9d5      	cbnz	r5, 800c62c <rcl_node_resolve_name+0x13c>
 800c5f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5f8:	a808      	add	r0, sp, #32
 800c5fa:	601c      	str	r4, [r3, #0]
 800c5fc:	f000 fc84 	bl	800cf08 <rcutils_string_map_fini>
 800c600:	4607      	mov	r7, r0
 800c602:	b1a8      	cbz	r0, 800c630 <rcl_node_resolve_name+0x140>
 800c604:	f7fb f93a 	bl	800787c <rcutils_get_error_string>
 800c608:	462c      	mov	r4, r5
 800c60a:	f7fb f94d 	bl	80078a8 <rcutils_reset_error>
 800c60e:	2701      	movs	r7, #1
 800c610:	e7c9      	b.n	800c5a6 <rcl_node_resolve_name+0xb6>
 800c612:	9c07      	ldr	r4, [sp, #28]
 800c614:	e7c2      	b.n	800c59c <rcl_node_resolve_name+0xac>
 800c616:	f7fb f931 	bl	800787c <rcutils_get_error_string>
 800c61a:	2701      	movs	r7, #1
 800c61c:	f7fb f944 	bl	80078a8 <rcutils_reset_error>
 800c620:	e7bc      	b.n	800c59c <rcl_node_resolve_name+0xac>
 800c622:	f7fb f92b 	bl	800787c <rcutils_get_error_string>
 800c626:	f7fb f93f 	bl	80078a8 <rcutils_reset_error>
 800c62a:	e7bc      	b.n	800c5a6 <rcl_node_resolve_name+0xb6>
 800c62c:	2767      	movs	r7, #103	; 0x67
 800c62e:	e7b5      	b.n	800c59c <rcl_node_resolve_name+0xac>
 800c630:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c632:	4659      	mov	r1, fp
 800c634:	47d0      	blx	sl
 800c636:	4659      	mov	r1, fp
 800c638:	4638      	mov	r0, r7
 800c63a:	47d0      	blx	sl
 800c63c:	e799      	b.n	800c572 <rcl_node_resolve_name+0x82>
 800c63e:	bf00      	nop

0800c640 <exact_match_lookup>:
 800c640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c642:	f102 0708 	add.w	r7, r2, #8
 800c646:	460b      	mov	r3, r1
 800c648:	4614      	mov	r4, r2
 800c64a:	4606      	mov	r6, r0
 800c64c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c650:	b085      	sub	sp, #20
 800c652:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c656:	4618      	mov	r0, r3
 800c658:	4919      	ldr	r1, [pc, #100]	; (800c6c0 <exact_match_lookup+0x80>)
 800c65a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c65e:	f000 fa35 	bl	800cacc <rcutils_join_path>
 800c662:	7833      	ldrb	r3, [r6, #0]
 800c664:	2b2f      	cmp	r3, #47	; 0x2f
 800c666:	4605      	mov	r5, r0
 800c668:	d023      	beq.n	800c6b2 <exact_match_lookup+0x72>
 800c66a:	f104 030c 	add.w	r3, r4, #12
 800c66e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c672:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c676:	1c70      	adds	r0, r6, #1
 800c678:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c67c:	f000 fa2c 	bl	800cad8 <rcutils_to_native_path>
 800c680:	4606      	mov	r6, r0
 800c682:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c686:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c68a:	4631      	mov	r1, r6
 800c68c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c690:	4628      	mov	r0, r5
 800c692:	f000 fa1b 	bl	800cacc <rcutils_join_path>
 800c696:	6862      	ldr	r2, [r4, #4]
 800c698:	6921      	ldr	r1, [r4, #16]
 800c69a:	4603      	mov	r3, r0
 800c69c:	4630      	mov	r0, r6
 800c69e:	461e      	mov	r6, r3
 800c6a0:	4790      	blx	r2
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	6863      	ldr	r3, [r4, #4]
 800c6a6:	6921      	ldr	r1, [r4, #16]
 800c6a8:	4798      	blx	r3
 800c6aa:	4635      	mov	r5, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	b005      	add	sp, #20
 800c6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b2:	7873      	ldrb	r3, [r6, #1]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1d8      	bne.n	800c66a <exact_match_lookup+0x2a>
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	b005      	add	sp, #20
 800c6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	08011be8 	.word	0x08011be8

0800c6c4 <rcl_get_secure_root>:
 800c6c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	b168      	cbz	r0, 800c6e8 <rcl_get_secure_root+0x24>
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	4608      	mov	r0, r1
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	f7fb f8c5 	bl	8007860 <rcutils_allocator_is_valid>
 800c6d6:	b138      	cbz	r0, 800c6e8 <rcl_get_secure_root+0x24>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	482d      	ldr	r0, [pc, #180]	; (800c790 <rcl_get_secure_root+0xcc>)
 800c6dc:	9303      	str	r3, [sp, #12]
 800c6de:	a903      	add	r1, sp, #12
 800c6e0:	f000 f9da 	bl	800ca98 <rcutils_get_env>
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	b120      	cbz	r0, 800c6f2 <rcl_get_secure_root+0x2e>
 800c6e8:	2500      	movs	r5, #0
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	b005      	add	sp, #20
 800c6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	9b03      	ldr	r3, [sp, #12]
 800c6f4:	781a      	ldrb	r2, [r3, #0]
 800c6f6:	2a00      	cmp	r2, #0
 800c6f8:	d0f6      	beq.n	800c6e8 <rcl_get_secure_root+0x24>
 800c6fa:	f104 090c 	add.w	r9, r4, #12
 800c6fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c702:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c706:	4618      	mov	r0, r3
 800c708:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c70c:	f000 fb06 	bl	800cd1c <rcutils_strdup>
 800c710:	4680      	mov	r8, r0
 800c712:	2800      	cmp	r0, #0
 800c714:	d0e8      	beq.n	800c6e8 <rcl_get_secure_root+0x24>
 800c716:	481f      	ldr	r0, [pc, #124]	; (800c794 <rcl_get_secure_root+0xd0>)
 800c718:	9503      	str	r5, [sp, #12]
 800c71a:	a903      	add	r1, sp, #12
 800c71c:	f000 f9bc 	bl	800ca98 <rcutils_get_env>
 800c720:	b160      	cbz	r0, 800c73c <rcl_get_secure_root+0x78>
 800c722:	2600      	movs	r6, #0
 800c724:	6863      	ldr	r3, [r4, #4]
 800c726:	6921      	ldr	r1, [r4, #16]
 800c728:	4630      	mov	r0, r6
 800c72a:	4798      	blx	r3
 800c72c:	4640      	mov	r0, r8
 800c72e:	6863      	ldr	r3, [r4, #4]
 800c730:	6921      	ldr	r1, [r4, #16]
 800c732:	4798      	blx	r3
 800c734:	4628      	mov	r0, r5
 800c736:	b005      	add	sp, #20
 800c738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	781e      	ldrb	r6, [r3, #0]
 800c740:	b1f6      	cbz	r6, 800c780 <rcl_get_secure_root+0xbc>
 800c742:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c746:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c74a:	4618      	mov	r0, r3
 800c74c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c750:	f000 fae4 	bl	800cd1c <rcutils_strdup>
 800c754:	4606      	mov	r6, r0
 800c756:	2800      	cmp	r0, #0
 800c758:	d0e3      	beq.n	800c722 <rcl_get_secure_root+0x5e>
 800c75a:	4622      	mov	r2, r4
 800c75c:	4641      	mov	r1, r8
 800c75e:	f7ff ff6f 	bl	800c640 <exact_match_lookup>
 800c762:	4605      	mov	r5, r0
 800c764:	2d00      	cmp	r5, #0
 800c766:	d0dd      	beq.n	800c724 <rcl_get_secure_root+0x60>
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 f9ad 	bl	800cac8 <rcutils_is_directory>
 800c76e:	4603      	mov	r3, r0
 800c770:	2800      	cmp	r0, #0
 800c772:	d1d7      	bne.n	800c724 <rcl_get_secure_root+0x60>
 800c774:	4628      	mov	r0, r5
 800c776:	6921      	ldr	r1, [r4, #16]
 800c778:	461d      	mov	r5, r3
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	4798      	blx	r3
 800c77e:	e7d1      	b.n	800c724 <rcl_get_secure_root+0x60>
 800c780:	4622      	mov	r2, r4
 800c782:	4638      	mov	r0, r7
 800c784:	4641      	mov	r1, r8
 800c786:	f7ff ff5b 	bl	800c640 <exact_match_lookup>
 800c78a:	4605      	mov	r5, r0
 800c78c:	e7ea      	b.n	800c764 <rcl_get_secure_root+0xa0>
 800c78e:	bf00      	nop
 800c790:	08011bf4 	.word	0x08011bf4
 800c794:	08011c0c 	.word	0x08011c0c

0800c798 <rcl_get_security_options_from_environment>:
 800c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	b082      	sub	sp, #8
 800c79e:	2300      	movs	r3, #0
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	4820      	ldr	r0, [pc, #128]	; (800c828 <rcl_get_security_options_from_environment+0x90>)
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	a901      	add	r1, sp, #4
 800c7aa:	4690      	mov	r8, r2
 800c7ac:	f000 f974 	bl	800ca98 <rcutils_get_env>
 800c7b0:	b120      	cbz	r0, 800c7bc <rcl_get_security_options_from_environment+0x24>
 800c7b2:	2501      	movs	r5, #1
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	b002      	add	sp, #8
 800c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7bc:	491b      	ldr	r1, [pc, #108]	; (800c82c <rcl_get_security_options_from_environment+0x94>)
 800c7be:	4604      	mov	r4, r0
 800c7c0:	9801      	ldr	r0, [sp, #4]
 800c7c2:	f7f3 fd0d 	bl	80001e0 <strcmp>
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	b9e8      	cbnz	r0, 800c806 <rcl_get_security_options_from_environment+0x6e>
 800c7ca:	9001      	str	r0, [sp, #4]
 800c7cc:	f1b8 0f00 	cmp.w	r8, #0
 800c7d0:	d020      	beq.n	800c814 <rcl_get_security_options_from_environment+0x7c>
 800c7d2:	4817      	ldr	r0, [pc, #92]	; (800c830 <rcl_get_security_options_from_environment+0x98>)
 800c7d4:	a901      	add	r1, sp, #4
 800c7d6:	f000 f95f 	bl	800ca98 <rcutils_get_env>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d1e9      	bne.n	800c7b2 <rcl_get_security_options_from_environment+0x1a>
 800c7de:	4915      	ldr	r1, [pc, #84]	; (800c834 <rcl_get_security_options_from_environment+0x9c>)
 800c7e0:	9801      	ldr	r0, [sp, #4]
 800c7e2:	f7f3 fcfd 	bl	80001e0 <strcmp>
 800c7e6:	fab0 f080 	clz	r0, r0
 800c7ea:	0940      	lsrs	r0, r0, #5
 800c7ec:	f888 0000 	strb.w	r0, [r8]
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7ff ff66 	bl	800c6c4 <rcl_get_secure_root>
 800c7f8:	b170      	cbz	r0, 800c818 <rcl_get_security_options_from_environment+0x80>
 800c7fa:	f8c8 0004 	str.w	r0, [r8, #4]
 800c7fe:	4628      	mov	r0, r5
 800c800:	b002      	add	sp, #8
 800c802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c806:	4625      	mov	r5, r4
 800c808:	4628      	mov	r0, r5
 800c80a:	f888 4000 	strb.w	r4, [r8]
 800c80e:	b002      	add	sp, #8
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c814:	250b      	movs	r5, #11
 800c816:	e7cd      	b.n	800c7b4 <rcl_get_security_options_from_environment+0x1c>
 800c818:	f898 5000 	ldrb.w	r5, [r8]
 800c81c:	f1a5 0501 	sub.w	r5, r5, #1
 800c820:	fab5 f585 	clz	r5, r5
 800c824:	096d      	lsrs	r5, r5, #5
 800c826:	e7c5      	b.n	800c7b4 <rcl_get_security_options_from_environment+0x1c>
 800c828:	08011bac 	.word	0x08011bac
 800c82c:	08011bc0 	.word	0x08011bc0
 800c830:	08011bc8 	.word	0x08011bc8
 800c834:	08011be0 	.word	0x08011be0

0800c838 <rcl_get_system_time>:
 800c838:	4608      	mov	r0, r1
 800c83a:	f000 bbd9 	b.w	800cff0 <rcutils_system_time_now>
 800c83e:	bf00      	nop

0800c840 <rcl_get_steady_time>:
 800c840:	4608      	mov	r0, r1
 800c842:	f000 bbfd 	b.w	800d040 <rcutils_steady_time_now>
 800c846:	bf00      	nop

0800c848 <rcl_get_ros_time>:
 800c848:	7a03      	ldrb	r3, [r0, #8]
 800c84a:	b510      	push	{r4, lr}
 800c84c:	460c      	mov	r4, r1
 800c84e:	b133      	cbz	r3, 800c85e <rcl_get_ros_time+0x16>
 800c850:	2105      	movs	r1, #5
 800c852:	f000 f8eb 	bl	800ca2c <__atomic_load_8>
 800c856:	e9c4 0100 	strd	r0, r1, [r4]
 800c85a:	2000      	movs	r0, #0
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c862:	4608      	mov	r0, r1
 800c864:	f000 bbc4 	b.w	800cff0 <rcutils_system_time_now>

0800c868 <rcl_clock_init>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	4605      	mov	r5, r0
 800c86c:	4610      	mov	r0, r2
 800c86e:	4614      	mov	r4, r2
 800c870:	460e      	mov	r6, r1
 800c872:	f7fa fff5 	bl	8007860 <rcutils_allocator_is_valid>
 800c876:	b128      	cbz	r0, 800c884 <rcl_clock_init+0x1c>
 800c878:	2d03      	cmp	r5, #3
 800c87a:	d803      	bhi.n	800c884 <rcl_clock_init+0x1c>
 800c87c:	e8df f005 	tbb	[pc, r5]
 800c880:	06532e1d 	.word	0x06532e1d
 800c884:	f04f 0c0b 	mov.w	ip, #11
 800c888:	4660      	mov	r0, ip
 800c88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c88c:	2e00      	cmp	r6, #0
 800c88e:	d0f9      	beq.n	800c884 <rcl_clock_init+0x1c>
 800c890:	2c00      	cmp	r4, #0
 800c892:	d0f7      	beq.n	800c884 <rcl_clock_init+0x1c>
 800c894:	2300      	movs	r3, #0
 800c896:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c89a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800c950 <rcl_clock_init+0xe8>
 800c89e:	6133      	str	r3, [r6, #16]
 800c8a0:	f106 0514 	add.w	r5, r6, #20
 800c8a4:	469c      	mov	ip, r3
 800c8a6:	2703      	movs	r7, #3
 800c8a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	602b      	str	r3, [r5, #0]
 800c8b0:	7037      	strb	r7, [r6, #0]
 800c8b2:	f8c6 e00c 	str.w	lr, [r6, #12]
 800c8b6:	4660      	mov	r0, ip
 800c8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	d0e2      	beq.n	800c884 <rcl_clock_init+0x1c>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	7033      	strb	r3, [r6, #0]
 800c8c2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c8c6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800c8ca:	469c      	mov	ip, r3
 800c8cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8ce:	f106 0514 	add.w	r5, r6, #20
 800c8d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	602b      	str	r3, [r5, #0]
 800c8d8:	4660      	mov	r0, ip
 800c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8dc:	2e00      	cmp	r6, #0
 800c8de:	d0d1      	beq.n	800c884 <rcl_clock_init+0x1c>
 800c8e0:	2c00      	cmp	r4, #0
 800c8e2:	d0cf      	beq.n	800c884 <rcl_clock_init+0x1c>
 800c8e4:	2700      	movs	r7, #0
 800c8e6:	7037      	strb	r7, [r6, #0]
 800c8e8:	46a4      	mov	ip, r4
 800c8ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c8ee:	f106 0514 	add.w	r5, r6, #20
 800c8f2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800c8f6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800c8fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8fc:	f8dc 3000 	ldr.w	r3, [ip]
 800c900:	602b      	str	r3, [r5, #0]
 800c902:	6921      	ldr	r1, [r4, #16]
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	2010      	movs	r0, #16
 800c908:	4798      	blx	r3
 800c90a:	6130      	str	r0, [r6, #16]
 800c90c:	b1d0      	cbz	r0, 800c944 <rcl_clock_init+0xdc>
 800c90e:	2200      	movs	r2, #0
 800c910:	2300      	movs	r3, #0
 800c912:	e9c0 2300 	strd	r2, r3, [r0]
 800c916:	2301      	movs	r3, #1
 800c918:	7207      	strb	r7, [r0, #8]
 800c91a:	4a0c      	ldr	r2, [pc, #48]	; (800c94c <rcl_clock_init+0xe4>)
 800c91c:	7033      	strb	r3, [r6, #0]
 800c91e:	46bc      	mov	ip, r7
 800c920:	60f2      	str	r2, [r6, #12]
 800c922:	4660      	mov	r0, ip
 800c924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c926:	2e00      	cmp	r6, #0
 800c928:	d0ac      	beq.n	800c884 <rcl_clock_init+0x1c>
 800c92a:	2c00      	cmp	r4, #0
 800c92c:	d0aa      	beq.n	800c884 <rcl_clock_init+0x1c>
 800c92e:	2300      	movs	r3, #0
 800c930:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c934:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800c954 <rcl_clock_init+0xec>
 800c938:	6133      	str	r3, [r6, #16]
 800c93a:	f106 0514 	add.w	r5, r6, #20
 800c93e:	469c      	mov	ip, r3
 800c940:	2702      	movs	r7, #2
 800c942:	e7b1      	b.n	800c8a8 <rcl_clock_init+0x40>
 800c944:	f04f 0c0a 	mov.w	ip, #10
 800c948:	e79e      	b.n	800c888 <rcl_clock_init+0x20>
 800c94a:	bf00      	nop
 800c94c:	0800c849 	.word	0x0800c849
 800c950:	0800c841 	.word	0x0800c841
 800c954:	0800c839 	.word	0x0800c839

0800c958 <rcl_validate_enclave_name_with_size>:
 800c958:	b378      	cbz	r0, 800c9ba <rcl_validate_enclave_name_with_size+0x62>
 800c95a:	b570      	push	{r4, r5, r6, lr}
 800c95c:	4615      	mov	r5, r2
 800c95e:	b0c2      	sub	sp, #264	; 0x108
 800c960:	b302      	cbz	r2, 800c9a4 <rcl_validate_enclave_name_with_size+0x4c>
 800c962:	461e      	mov	r6, r3
 800c964:	466a      	mov	r2, sp
 800c966:	ab01      	add	r3, sp, #4
 800c968:	460c      	mov	r4, r1
 800c96a:	f000 fc2b 	bl	800d1c4 <rmw_validate_namespace_with_size>
 800c96e:	4684      	mov	ip, r0
 800c970:	b9e8      	cbnz	r0, 800c9ae <rcl_validate_enclave_name_with_size+0x56>
 800c972:	9b00      	ldr	r3, [sp, #0]
 800c974:	b923      	cbnz	r3, 800c980 <rcl_validate_enclave_name_with_size+0x28>
 800c976:	2300      	movs	r3, #0
 800c978:	602b      	str	r3, [r5, #0]
 800c97a:	4660      	mov	r0, ip
 800c97c:	b042      	add	sp, #264	; 0x108
 800c97e:	bd70      	pop	{r4, r5, r6, pc}
 800c980:	2b07      	cmp	r3, #7
 800c982:	d007      	beq.n	800c994 <rcl_validate_enclave_name_with_size+0x3c>
 800c984:	1e5a      	subs	r2, r3, #1
 800c986:	2a05      	cmp	r2, #5
 800c988:	d833      	bhi.n	800c9f2 <rcl_validate_enclave_name_with_size+0x9a>
 800c98a:	e8df f002 	tbb	[pc, r2]
 800c98e:	2c2f      	.short	0x2c2f
 800c990:	1a232629 	.word	0x1a232629
 800c994:	2cff      	cmp	r4, #255	; 0xff
 800c996:	d9ee      	bls.n	800c976 <rcl_validate_enclave_name_with_size+0x1e>
 800c998:	602b      	str	r3, [r5, #0]
 800c99a:	2e00      	cmp	r6, #0
 800c99c:	d0ed      	beq.n	800c97a <rcl_validate_enclave_name_with_size+0x22>
 800c99e:	23fe      	movs	r3, #254	; 0xfe
 800c9a0:	6033      	str	r3, [r6, #0]
 800c9a2:	e7ea      	b.n	800c97a <rcl_validate_enclave_name_with_size+0x22>
 800c9a4:	f04f 0c0b 	mov.w	ip, #11
 800c9a8:	4660      	mov	r0, ip
 800c9aa:	b042      	add	sp, #264	; 0x108
 800c9ac:	bd70      	pop	{r4, r5, r6, pc}
 800c9ae:	f7ff f953 	bl	800bc58 <rcl_convert_rmw_ret_to_rcl_ret>
 800c9b2:	4684      	mov	ip, r0
 800c9b4:	4660      	mov	r0, ip
 800c9b6:	b042      	add	sp, #264	; 0x108
 800c9b8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ba:	f04f 0c0b 	mov.w	ip, #11
 800c9be:	4660      	mov	r0, ip
 800c9c0:	4770      	bx	lr
 800c9c2:	2306      	movs	r3, #6
 800c9c4:	602b      	str	r3, [r5, #0]
 800c9c6:	2e00      	cmp	r6, #0
 800c9c8:	d0d7      	beq.n	800c97a <rcl_validate_enclave_name_with_size+0x22>
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	6033      	str	r3, [r6, #0]
 800c9ce:	4660      	mov	r0, ip
 800c9d0:	b042      	add	sp, #264	; 0x108
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	2305      	movs	r3, #5
 800c9d6:	602b      	str	r3, [r5, #0]
 800c9d8:	e7f5      	b.n	800c9c6 <rcl_validate_enclave_name_with_size+0x6e>
 800c9da:	2304      	movs	r3, #4
 800c9dc:	602b      	str	r3, [r5, #0]
 800c9de:	e7f2      	b.n	800c9c6 <rcl_validate_enclave_name_with_size+0x6e>
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	602b      	str	r3, [r5, #0]
 800c9e4:	e7ef      	b.n	800c9c6 <rcl_validate_enclave_name_with_size+0x6e>
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	e7ec      	b.n	800c9c6 <rcl_validate_enclave_name_with_size+0x6e>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	e7e9      	b.n	800c9c6 <rcl_validate_enclave_name_with_size+0x6e>
 800c9f2:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <rcl_validate_enclave_name_with_size+0xac>)
 800c9f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9f8:	a802      	add	r0, sp, #8
 800c9fa:	f000 f963 	bl	800ccc4 <rcutils_snprintf>
 800c9fe:	f04f 0c01 	mov.w	ip, #1
 800ca02:	e7ba      	b.n	800c97a <rcl_validate_enclave_name_with_size+0x22>
 800ca04:	08011c2c 	.word	0x08011c2c

0800ca08 <rcl_validate_enclave_name>:
 800ca08:	b168      	cbz	r0, 800ca26 <rcl_validate_enclave_name+0x1e>
 800ca0a:	b570      	push	{r4, r5, r6, lr}
 800ca0c:	460d      	mov	r5, r1
 800ca0e:	4616      	mov	r6, r2
 800ca10:	4604      	mov	r4, r0
 800ca12:	f7f3 fbef 	bl	80001f4 <strlen>
 800ca16:	4633      	mov	r3, r6
 800ca18:	4601      	mov	r1, r0
 800ca1a:	462a      	mov	r2, r5
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca22:	f7ff bf99 	b.w	800c958 <rcl_validate_enclave_name_with_size>
 800ca26:	200b      	movs	r0, #11
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop

0800ca2c <__atomic_load_8>:
 800ca2c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ca30:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800ca34:	4a15      	ldr	r2, [pc, #84]	; (800ca8c <__atomic_load_8+0x60>)
 800ca36:	4b16      	ldr	r3, [pc, #88]	; (800ca90 <__atomic_load_8+0x64>)
 800ca38:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ca3c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ca40:	fb02 f101 	mul.w	r1, r2, r1
 800ca44:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ca48:	fba3 2301 	umull	r2, r3, r3, r1
 800ca4c:	091b      	lsrs	r3, r3, #4
 800ca4e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ca52:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800ca56:	b4d0      	push	{r4, r6, r7}
 800ca58:	4c0e      	ldr	r4, [pc, #56]	; (800ca94 <__atomic_load_8+0x68>)
 800ca5a:	1ac9      	subs	r1, r1, r3
 800ca5c:	1862      	adds	r2, r4, r1
 800ca5e:	f04f 0c01 	mov.w	ip, #1
 800ca62:	e8d2 3f4f 	ldrexb	r3, [r2]
 800ca66:	e8c2 cf46 	strexb	r6, ip, [r2]
 800ca6a:	2e00      	cmp	r6, #0
 800ca6c:	d1f9      	bne.n	800ca62 <__atomic_load_8+0x36>
 800ca6e:	f3bf 8f5b 	dmb	ish
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1f4      	bne.n	800ca62 <__atomic_load_8+0x36>
 800ca78:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ca7c:	f3bf 8f5b 	dmb	ish
 800ca80:	5463      	strb	r3, [r4, r1]
 800ca82:	4630      	mov	r0, r6
 800ca84:	4639      	mov	r1, r7
 800ca86:	bcd0      	pop	{r4, r6, r7}
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	27d4eb2d 	.word	0x27d4eb2d
 800ca90:	b21642c9 	.word	0xb21642c9
 800ca94:	2000da00 	.word	0x2000da00

0800ca98 <rcutils_get_env>:
 800ca98:	b168      	cbz	r0, 800cab6 <rcutils_get_env+0x1e>
 800ca9a:	b510      	push	{r4, lr}
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	b129      	cbz	r1, 800caac <rcutils_get_env+0x14>
 800caa0:	f003 fb3e 	bl	8010120 <getenv>
 800caa4:	b120      	cbz	r0, 800cab0 <rcutils_get_env+0x18>
 800caa6:	6020      	str	r0, [r4, #0]
 800caa8:	2000      	movs	r0, #0
 800caaa:	bd10      	pop	{r4, pc}
 800caac:	4803      	ldr	r0, [pc, #12]	; (800cabc <rcutils_get_env+0x24>)
 800caae:	bd10      	pop	{r4, pc}
 800cab0:	4b03      	ldr	r3, [pc, #12]	; (800cac0 <rcutils_get_env+0x28>)
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	bd10      	pop	{r4, pc}
 800cab6:	4803      	ldr	r0, [pc, #12]	; (800cac4 <rcutils_get_env+0x2c>)
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	08011ca8 	.word	0x08011ca8
 800cac0:	08011dcc 	.word	0x08011dcc
 800cac4:	08011c8c 	.word	0x08011c8c

0800cac8 <rcutils_is_directory>:
 800cac8:	2000      	movs	r0, #0
 800caca:	4770      	bx	lr

0800cacc <rcutils_join_path>:
 800cacc:	b082      	sub	sp, #8
 800cace:	e88d 000c 	stmia.w	sp, {r2, r3}
 800cad2:	2000      	movs	r0, #0
 800cad4:	b002      	add	sp, #8
 800cad6:	4770      	bx	lr

0800cad8 <rcutils_to_native_path>:
 800cad8:	b084      	sub	sp, #16
 800cada:	a801      	add	r0, sp, #4
 800cadc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800cae0:	b004      	add	sp, #16
 800cae2:	2000      	movs	r0, #0
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop

0800cae8 <rcutils_format_string_limit>:
 800cae8:	b40f      	push	{r0, r1, r2, r3}
 800caea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caec:	b083      	sub	sp, #12
 800caee:	ac08      	add	r4, sp, #32
 800caf0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800caf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800caf6:	b34e      	cbz	r6, 800cb4c <rcutils_format_string_limit+0x64>
 800caf8:	a808      	add	r0, sp, #32
 800cafa:	f7fa feb1 	bl	8007860 <rcutils_allocator_is_valid>
 800cafe:	b328      	cbz	r0, 800cb4c <rcutils_format_string_limit+0x64>
 800cb00:	2100      	movs	r1, #0
 800cb02:	ab0f      	add	r3, sp, #60	; 0x3c
 800cb04:	4632      	mov	r2, r6
 800cb06:	4608      	mov	r0, r1
 800cb08:	e9cd 3300 	strd	r3, r3, [sp]
 800cb0c:	f000 f8f4 	bl	800ccf8 <rcutils_vsnprintf>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	4605      	mov	r5, r0
 800cb14:	d01a      	beq.n	800cb4c <rcutils_format_string_limit+0x64>
 800cb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb18:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb1a:	1c47      	adds	r7, r0, #1
 800cb1c:	429f      	cmp	r7, r3
 800cb1e:	bf84      	itt	hi
 800cb20:	461f      	movhi	r7, r3
 800cb22:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800cb26:	4638      	mov	r0, r7
 800cb28:	9b08      	ldr	r3, [sp, #32]
 800cb2a:	4798      	blx	r3
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	b168      	cbz	r0, 800cb4c <rcutils_format_string_limit+0x64>
 800cb30:	9b01      	ldr	r3, [sp, #4]
 800cb32:	4632      	mov	r2, r6
 800cb34:	4639      	mov	r1, r7
 800cb36:	f000 f8df 	bl	800ccf8 <rcutils_vsnprintf>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	db02      	blt.n	800cb44 <rcutils_format_string_limit+0x5c>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	5563      	strb	r3, [r4, r5]
 800cb42:	e004      	b.n	800cb4e <rcutils_format_string_limit+0x66>
 800cb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb46:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb48:	4620      	mov	r0, r4
 800cb4a:	4798      	blx	r3
 800cb4c:	2400      	movs	r4, #0
 800cb4e:	4620      	mov	r0, r4
 800cb50:	b003      	add	sp, #12
 800cb52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb56:	b004      	add	sp, #16
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop

0800cb5c <rcutils_repl_str>:
 800cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb60:	ed2d 8b02 	vpush	{d8}
 800cb64:	b087      	sub	sp, #28
 800cb66:	4680      	mov	r8, r0
 800cb68:	4608      	mov	r0, r1
 800cb6a:	f8cd 8004 	str.w	r8, [sp, #4]
 800cb6e:	ee08 2a10 	vmov	s16, r2
 800cb72:	468a      	mov	sl, r1
 800cb74:	4699      	mov	r9, r3
 800cb76:	f7f3 fb3d 	bl	80001f4 <strlen>
 800cb7a:	2600      	movs	r6, #0
 800cb7c:	4647      	mov	r7, r8
 800cb7e:	9002      	str	r0, [sp, #8]
 800cb80:	46b3      	mov	fp, r6
 800cb82:	2510      	movs	r5, #16
 800cb84:	46b0      	mov	r8, r6
 800cb86:	e01d      	b.n	800cbc4 <rcutils_repl_str+0x68>
 800cb88:	f10b 0b01 	add.w	fp, fp, #1
 800cb8c:	455e      	cmp	r6, fp
 800cb8e:	d211      	bcs.n	800cbb4 <rcutils_repl_str+0x58>
 800cb90:	442e      	add	r6, r5
 800cb92:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cb96:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800cb9a:	00b1      	lsls	r1, r6, #2
 800cb9c:	4798      	blx	r3
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	f000 8088 	beq.w	800ccb4 <rcutils_repl_str+0x158>
 800cba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cba8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800cbac:	4680      	mov	r8, r0
 800cbae:	bf28      	it	cs
 800cbb0:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800cbb4:	9a01      	ldr	r2, [sp, #4]
 800cbb6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800cbba:	1aa2      	subs	r2, r4, r2
 800cbbc:	f843 2c04 	str.w	r2, [r3, #-4]
 800cbc0:	9b02      	ldr	r3, [sp, #8]
 800cbc2:	18e7      	adds	r7, r4, r3
 800cbc4:	4651      	mov	r1, sl
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f003 fe79 	bl	80108be <strstr>
 800cbcc:	4604      	mov	r4, r0
 800cbce:	4640      	mov	r0, r8
 800cbd0:	2c00      	cmp	r4, #0
 800cbd2:	d1d9      	bne.n	800cb88 <rcutils_repl_str+0x2c>
 800cbd4:	46b8      	mov	r8, r7
 800cbd6:	4607      	mov	r7, r0
 800cbd8:	4640      	mov	r0, r8
 800cbda:	f7f3 fb0b 	bl	80001f4 <strlen>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	eba8 0303 	sub.w	r3, r8, r3
 800cbe4:	181c      	adds	r4, r3, r0
 800cbe6:	9404      	str	r4, [sp, #16]
 800cbe8:	f1bb 0f00 	cmp.w	fp, #0
 800cbec:	d04a      	beq.n	800cc84 <rcutils_repl_str+0x128>
 800cbee:	ee18 0a10 	vmov	r0, s16
 800cbf2:	f7f3 faff 	bl	80001f4 <strlen>
 800cbf6:	9b02      	ldr	r3, [sp, #8]
 800cbf8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cbfc:	1ac3      	subs	r3, r0, r3
 800cbfe:	fb0b 4303 	mla	r3, fp, r3, r4
 800cc02:	461a      	mov	r2, r3
 800cc04:	9305      	str	r3, [sp, #20]
 800cc06:	4606      	mov	r6, r0
 800cc08:	f8d9 3000 	ldr.w	r3, [r9]
 800cc0c:	1c50      	adds	r0, r2, #1
 800cc0e:	4798      	blx	r3
 800cc10:	9003      	str	r0, [sp, #12]
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d04f      	beq.n	800ccb6 <rcutils_repl_str+0x15a>
 800cc16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	f003 fef0 	bl	8010a02 <memcpy>
 800cc22:	683d      	ldr	r5, [r7, #0]
 800cc24:	9b03      	ldr	r3, [sp, #12]
 800cc26:	9701      	str	r7, [sp, #4]
 800cc28:	46ba      	mov	sl, r7
 800cc2a:	441d      	add	r5, r3
 800cc2c:	9f02      	ldr	r7, [sp, #8]
 800cc2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc32:	2401      	movs	r4, #1
 800cc34:	46d1      	mov	r9, sl
 800cc36:	ee18 aa10 	vmov	sl, s16
 800cc3a:	e00a      	b.n	800cc52 <rcutils_repl_str+0xf6>
 800cc3c:	f8d9 5000 	ldr.w	r5, [r9]
 800cc40:	1aaa      	subs	r2, r5, r2
 800cc42:	1885      	adds	r5, r0, r2
 800cc44:	f003 fedd 	bl	8010a02 <memcpy>
 800cc48:	45a3      	cmp	fp, r4
 800cc4a:	f104 0201 	add.w	r2, r4, #1
 800cc4e:	d935      	bls.n	800ccbc <rcutils_repl_str+0x160>
 800cc50:	4614      	mov	r4, r2
 800cc52:	4632      	mov	r2, r6
 800cc54:	4651      	mov	r1, sl
 800cc56:	4628      	mov	r0, r5
 800cc58:	f003 fed3 	bl	8010a02 <memcpy>
 800cc5c:	f859 2b04 	ldr.w	r2, [r9], #4
 800cc60:	45a3      	cmp	fp, r4
 800cc62:	443a      	add	r2, r7
 800cc64:	eb05 0006 	add.w	r0, r5, r6
 800cc68:	eb08 0102 	add.w	r1, r8, r2
 800cc6c:	d1e6      	bne.n	800cc3c <rcutils_repl_str+0xe0>
 800cc6e:	9b04      	ldr	r3, [sp, #16]
 800cc70:	1a9a      	subs	r2, r3, r2
 800cc72:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cc76:	f003 fec4 	bl	8010a02 <memcpy>
 800cc7a:	9a03      	ldr	r2, [sp, #12]
 800cc7c:	9905      	ldr	r1, [sp, #20]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	5453      	strb	r3, [r2, r1]
 800cc82:	e00b      	b.n	800cc9c <rcutils_repl_str+0x140>
 800cc84:	4620      	mov	r0, r4
 800cc86:	f8d9 3000 	ldr.w	r3, [r9]
 800cc8a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cc8e:	3001      	adds	r0, #1
 800cc90:	4798      	blx	r3
 800cc92:	9003      	str	r0, [sp, #12]
 800cc94:	b110      	cbz	r0, 800cc9c <rcutils_repl_str+0x140>
 800cc96:	9901      	ldr	r1, [sp, #4]
 800cc98:	f003 feab 	bl	80109f2 <strcpy>
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cca2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cca6:	4798      	blx	r3
 800cca8:	9803      	ldr	r0, [sp, #12]
 800ccaa:	b007      	add	sp, #28
 800ccac:	ecbd 8b02 	vpop	{d8}
 800ccb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb4:	4647      	mov	r7, r8
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	9303      	str	r3, [sp, #12]
 800ccba:	e7ef      	b.n	800cc9c <rcutils_repl_str+0x140>
 800ccbc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800ccc0:	e7db      	b.n	800cc7a <rcutils_repl_str+0x11e>
 800ccc2:	bf00      	nop

0800ccc4 <rcutils_snprintf>:
 800ccc4:	b40c      	push	{r2, r3}
 800ccc6:	b530      	push	{r4, r5, lr}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	ab06      	add	r3, sp, #24
 800cccc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	b152      	cbz	r2, 800ccea <rcutils_snprintf+0x26>
 800ccd4:	b138      	cbz	r0, 800cce6 <rcutils_snprintf+0x22>
 800ccd6:	b141      	cbz	r1, 800ccea <rcutils_snprintf+0x26>
 800ccd8:	f003 fdbc 	bl	8010854 <vsniprintf>
 800ccdc:	b003      	add	sp, #12
 800ccde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cce2:	b002      	add	sp, #8
 800cce4:	4770      	bx	lr
 800cce6:	2900      	cmp	r1, #0
 800cce8:	d0f6      	beq.n	800ccd8 <rcutils_snprintf+0x14>
 800ccea:	f003 fe55 	bl	8010998 <__errno>
 800ccee:	2316      	movs	r3, #22
 800ccf0:	6003      	str	r3, [r0, #0]
 800ccf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccf6:	e7f1      	b.n	800ccdc <rcutils_snprintf+0x18>

0800ccf8 <rcutils_vsnprintf>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	b13a      	cbz	r2, 800cd0c <rcutils_vsnprintf+0x14>
 800ccfc:	b120      	cbz	r0, 800cd08 <rcutils_vsnprintf+0x10>
 800ccfe:	b129      	cbz	r1, 800cd0c <rcutils_vsnprintf+0x14>
 800cd00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd04:	f003 bda6 	b.w	8010854 <vsniprintf>
 800cd08:	2900      	cmp	r1, #0
 800cd0a:	d0f9      	beq.n	800cd00 <rcutils_vsnprintf+0x8>
 800cd0c:	f003 fe44 	bl	8010998 <__errno>
 800cd10:	2316      	movs	r3, #22
 800cd12:	6003      	str	r3, [r0, #0]
 800cd14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd18:	bd70      	pop	{r4, r5, r6, pc}
 800cd1a:	bf00      	nop

0800cd1c <rcutils_strdup>:
 800cd1c:	b084      	sub	sp, #16
 800cd1e:	b570      	push	{r4, r5, r6, lr}
 800cd20:	b082      	sub	sp, #8
 800cd22:	ac07      	add	r4, sp, #28
 800cd24:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800cd28:	4605      	mov	r5, r0
 800cd2a:	b1b0      	cbz	r0, 800cd5a <rcutils_strdup+0x3e>
 800cd2c:	f7f3 fa62 	bl	80001f4 <strlen>
 800cd30:	1c42      	adds	r2, r0, #1
 800cd32:	9b07      	ldr	r3, [sp, #28]
 800cd34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd36:	9201      	str	r2, [sp, #4]
 800cd38:	4606      	mov	r6, r0
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	4798      	blx	r3
 800cd3e:	4604      	mov	r4, r0
 800cd40:	b128      	cbz	r0, 800cd4e <rcutils_strdup+0x32>
 800cd42:	9a01      	ldr	r2, [sp, #4]
 800cd44:	4629      	mov	r1, r5
 800cd46:	f003 fe5c 	bl	8010a02 <memcpy>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	55a3      	strb	r3, [r4, r6]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	b002      	add	sp, #8
 800cd52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd56:	b004      	add	sp, #16
 800cd58:	4770      	bx	lr
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	e7f7      	b.n	800cd4e <rcutils_strdup+0x32>
 800cd5e:	bf00      	nop

0800cd60 <rcutils_strndup>:
 800cd60:	b082      	sub	sp, #8
 800cd62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd64:	ac06      	add	r4, sp, #24
 800cd66:	e884 000c 	stmia.w	r4, {r2, r3}
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	b188      	cbz	r0, 800cd92 <rcutils_strndup+0x32>
 800cd6e:	1c4f      	adds	r7, r1, #1
 800cd70:	460e      	mov	r6, r1
 800cd72:	4638      	mov	r0, r7
 800cd74:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd76:	4790      	blx	r2
 800cd78:	4604      	mov	r4, r0
 800cd7a:	b128      	cbz	r0, 800cd88 <rcutils_strndup+0x28>
 800cd7c:	463a      	mov	r2, r7
 800cd7e:	4629      	mov	r1, r5
 800cd80:	f003 fe3f 	bl	8010a02 <memcpy>
 800cd84:	2300      	movs	r3, #0
 800cd86:	55a3      	strb	r3, [r4, r6]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd8e:	b002      	add	sp, #8
 800cd90:	4770      	bx	lr
 800cd92:	4604      	mov	r4, r0
 800cd94:	e7f8      	b.n	800cd88 <rcutils_strndup+0x28>
 800cd96:	bf00      	nop

0800cd98 <rcutils_get_zero_initialized_string_map>:
 800cd98:	4b01      	ldr	r3, [pc, #4]	; (800cda0 <rcutils_get_zero_initialized_string_map+0x8>)
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	6018      	str	r0, [r3, #0]
 800cd9e:	4770      	bx	lr
 800cda0:	2000da18 	.word	0x2000da18

0800cda4 <rcutils_string_map_reserve>:
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d05f      	beq.n	800ce68 <rcutils_string_map_reserve+0xc4>
 800cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdac:	460c      	mov	r4, r1
 800cdae:	6801      	ldr	r1, [r0, #0]
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	b129      	cbz	r1, 800cdc2 <rcutils_string_map_reserve+0x1e>
 800cdb6:	68cb      	ldr	r3, [r1, #12]
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	d906      	bls.n	800cdca <rcutils_string_map_reserve+0x26>
 800cdbc:	461c      	mov	r4, r3
 800cdbe:	2900      	cmp	r1, #0
 800cdc0:	d1f9      	bne.n	800cdb6 <rcutils_string_map_reserve+0x12>
 800cdc2:	201f      	movs	r0, #31
 800cdc4:	b002      	add	sp, #8
 800cdc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdca:	688b      	ldr	r3, [r1, #8]
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d047      	beq.n	800ce60 <rcutils_string_map_reserve+0xbc>
 800cdd0:	6a0e      	ldr	r6, [r1, #32]
 800cdd2:	2c00      	cmp	r4, #0
 800cdd4:	d034      	beq.n	800ce40 <rcutils_string_map_reserve+0x9c>
 800cdd6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800cdda:	d243      	bcs.n	800ce64 <rcutils_string_map_reserve+0xc0>
 800cddc:	00a7      	lsls	r7, r4, #2
 800cdde:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800cde2:	6808      	ldr	r0, [r1, #0]
 800cde4:	4632      	mov	r2, r6
 800cde6:	4639      	mov	r1, r7
 800cde8:	47c0      	blx	r8
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d03a      	beq.n	800ce64 <rcutils_string_map_reserve+0xc0>
 800cdee:	682b      	ldr	r3, [r5, #0]
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	6018      	str	r0, [r3, #0]
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	6858      	ldr	r0, [r3, #4]
 800cdf8:	47c0      	blx	r8
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d032      	beq.n	800ce64 <rcutils_string_map_reserve+0xc0>
 800cdfe:	682d      	ldr	r5, [r5, #0]
 800ce00:	68ab      	ldr	r3, [r5, #8]
 800ce02:	6068      	str	r0, [r5, #4]
 800ce04:	42a3      	cmp	r3, r4
 800ce06:	d226      	bcs.n	800ce56 <rcutils_string_map_reserve+0xb2>
 800ce08:	682a      	ldr	r2, [r5, #0]
 800ce0a:	eb00 0c07 	add.w	ip, r0, r7
 800ce0e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800ce12:	45e6      	cmp	lr, ip
 800ce14:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800ce18:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800ce1c:	d203      	bcs.n	800ce26 <rcutils_string_map_reserve+0x82>
 800ce1e:	eb02 0c07 	add.w	ip, r2, r7
 800ce22:	4566      	cmp	r6, ip
 800ce24:	d322      	bcc.n	800ce6c <rcutils_string_map_reserve+0xc8>
 800ce26:	1ae3      	subs	r3, r4, r3
 800ce28:	009a      	lsls	r2, r3, #2
 800ce2a:	4670      	mov	r0, lr
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	9201      	str	r2, [sp, #4]
 800ce30:	f003 fd1e 	bl	8010870 <memset>
 800ce34:	9a01      	ldr	r2, [sp, #4]
 800ce36:	2100      	movs	r1, #0
 800ce38:	4630      	mov	r0, r6
 800ce3a:	f003 fd19 	bl	8010870 <memset>
 800ce3e:	e00a      	b.n	800ce56 <rcutils_string_map_reserve+0xb2>
 800ce40:	694f      	ldr	r7, [r1, #20]
 800ce42:	6808      	ldr	r0, [r1, #0]
 800ce44:	4631      	mov	r1, r6
 800ce46:	47b8      	blx	r7
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	6858      	ldr	r0, [r3, #4]
 800ce4e:	601c      	str	r4, [r3, #0]
 800ce50:	47b8      	blx	r7
 800ce52:	682d      	ldr	r5, [r5, #0]
 800ce54:	606c      	str	r4, [r5, #4]
 800ce56:	2000      	movs	r0, #0
 800ce58:	60ac      	str	r4, [r5, #8]
 800ce5a:	b002      	add	sp, #8
 800ce5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce60:	2000      	movs	r0, #0
 800ce62:	e7af      	b.n	800cdc4 <rcutils_string_map_reserve+0x20>
 800ce64:	200a      	movs	r0, #10
 800ce66:	e7ad      	b.n	800cdc4 <rcutils_string_map_reserve+0x20>
 800ce68:	200b      	movs	r0, #11
 800ce6a:	4770      	bx	lr
 800ce6c:	1f0b      	subs	r3, r1, #4
 800ce6e:	4418      	add	r0, r3
 800ce70:	4413      	add	r3, r2
 800ce72:	3a04      	subs	r2, #4
 800ce74:	4417      	add	r7, r2
 800ce76:	2200      	movs	r2, #0
 800ce78:	f843 2f04 	str.w	r2, [r3, #4]!
 800ce7c:	42bb      	cmp	r3, r7
 800ce7e:	f840 2f04 	str.w	r2, [r0, #4]!
 800ce82:	d1f9      	bne.n	800ce78 <rcutils_string_map_reserve+0xd4>
 800ce84:	e7e7      	b.n	800ce56 <rcutils_string_map_reserve+0xb2>
 800ce86:	bf00      	nop

0800ce88 <rcutils_string_map_init>:
 800ce88:	b082      	sub	sp, #8
 800ce8a:	b570      	push	{r4, r5, r6, lr}
 800ce8c:	ac04      	add	r4, sp, #16
 800ce8e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ce92:	b380      	cbz	r0, 800cef6 <rcutils_string_map_init+0x6e>
 800ce94:	6806      	ldr	r6, [r0, #0]
 800ce96:	4604      	mov	r4, r0
 800ce98:	b12e      	cbz	r6, 800cea6 <rcutils_string_map_init+0x1e>
 800ce9a:	251e      	movs	r5, #30
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cea2:	b002      	add	sp, #8
 800cea4:	4770      	bx	lr
 800cea6:	a804      	add	r0, sp, #16
 800cea8:	460d      	mov	r5, r1
 800ceaa:	f7fa fcd9 	bl	8007860 <rcutils_allocator_is_valid>
 800ceae:	b310      	cbz	r0, 800cef6 <rcutils_string_map_init+0x6e>
 800ceb0:	9b04      	ldr	r3, [sp, #16]
 800ceb2:	9908      	ldr	r1, [sp, #32]
 800ceb4:	2024      	movs	r0, #36	; 0x24
 800ceb6:	4798      	blx	r3
 800ceb8:	6020      	str	r0, [r4, #0]
 800ceba:	b310      	cbz	r0, 800cf02 <rcutils_string_map_init+0x7a>
 800cebc:	f10d 0e10 	add.w	lr, sp, #16
 800cec0:	e9c0 6600 	strd	r6, r6, [r0]
 800cec4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800cec8:	f100 0c10 	add.w	ip, r0, #16
 800cecc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ced0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ced4:	f8de 3000 	ldr.w	r3, [lr]
 800ced8:	f8cc 3000 	str.w	r3, [ip]
 800cedc:	4629      	mov	r1, r5
 800cede:	4620      	mov	r0, r4
 800cee0:	f7ff ff60 	bl	800cda4 <rcutils_string_map_reserve>
 800cee4:	4605      	mov	r5, r0
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d0d8      	beq.n	800ce9c <rcutils_string_map_init+0x14>
 800ceea:	9b05      	ldr	r3, [sp, #20]
 800ceec:	9908      	ldr	r1, [sp, #32]
 800ceee:	6820      	ldr	r0, [r4, #0]
 800cef0:	4798      	blx	r3
 800cef2:	6026      	str	r6, [r4, #0]
 800cef4:	e7d2      	b.n	800ce9c <rcutils_string_map_init+0x14>
 800cef6:	250b      	movs	r5, #11
 800cef8:	4628      	mov	r0, r5
 800cefa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cefe:	b002      	add	sp, #8
 800cf00:	4770      	bx	lr
 800cf02:	250a      	movs	r5, #10
 800cf04:	e7ca      	b.n	800ce9c <rcutils_string_map_init+0x14>
 800cf06:	bf00      	nop

0800cf08 <rcutils_string_map_fini>:
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d03a      	beq.n	800cf88 <rcutils_string_map_fini+0x80>
 800cf12:	6804      	ldr	r4, [r0, #0]
 800cf14:	4606      	mov	r6, r0
 800cf16:	2c00      	cmp	r4, #0
 800cf18:	d032      	beq.n	800cf80 <rcutils_string_map_fini+0x78>
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	b32b      	cbz	r3, 800cf6a <rcutils_string_map_fini+0x62>
 800cf1e:	2500      	movs	r5, #0
 800cf20:	6822      	ldr	r2, [r4, #0]
 800cf22:	462f      	mov	r7, r5
 800cf24:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800cf28:	b1e0      	cbz	r0, 800cf64 <rcutils_string_map_fini+0x5c>
 800cf2a:	6a21      	ldr	r1, [r4, #32]
 800cf2c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800cf30:	9101      	str	r1, [sp, #4]
 800cf32:	47c0      	blx	r8
 800cf34:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf38:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800cf3c:	9901      	ldr	r1, [sp, #4]
 800cf3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf42:	47c0      	blx	r8
 800cf44:	68e3      	ldr	r3, [r4, #12]
 800cf46:	6862      	ldr	r2, [r4, #4]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800cf4e:	60e3      	str	r3, [r4, #12]
 800cf50:	6834      	ldr	r4, [r6, #0]
 800cf52:	68a3      	ldr	r3, [r4, #8]
 800cf54:	3501      	adds	r5, #1
 800cf56:	429d      	cmp	r5, r3
 800cf58:	d207      	bcs.n	800cf6a <rcutils_string_map_fini+0x62>
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d1e2      	bne.n	800cf2a <rcutils_string_map_fini+0x22>
 800cf64:	3501      	adds	r5, #1
 800cf66:	429d      	cmp	r5, r3
 800cf68:	d3dc      	bcc.n	800cf24 <rcutils_string_map_fini+0x1c>
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	f7ff ff19 	bl	800cda4 <rcutils_string_map_reserve>
 800cf72:	4604      	mov	r4, r0
 800cf74:	b920      	cbnz	r0, 800cf80 <rcutils_string_map_fini+0x78>
 800cf76:	6830      	ldr	r0, [r6, #0]
 800cf78:	6943      	ldr	r3, [r0, #20]
 800cf7a:	6a01      	ldr	r1, [r0, #32]
 800cf7c:	4798      	blx	r3
 800cf7e:	6034      	str	r4, [r6, #0]
 800cf80:	4620      	mov	r0, r4
 800cf82:	b002      	add	sp, #8
 800cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf88:	240b      	movs	r4, #11
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	b002      	add	sp, #8
 800cf8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf92:	bf00      	nop

0800cf94 <rcutils_string_map_getn>:
 800cf94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	b300      	cbz	r0, 800cfdc <rcutils_string_map_getn+0x48>
 800cf9a:	6807      	ldr	r7, [r0, #0]
 800cf9c:	b1ff      	cbz	r7, 800cfde <rcutils_string_map_getn+0x4a>
 800cf9e:	4688      	mov	r8, r1
 800cfa0:	b1e1      	cbz	r1, 800cfdc <rcutils_string_map_getn+0x48>
 800cfa2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800cfa6:	683e      	ldr	r6, [r7, #0]
 800cfa8:	f1ba 0f00 	cmp.w	sl, #0
 800cfac:	d016      	beq.n	800cfdc <rcutils_string_map_getn+0x48>
 800cfae:	4691      	mov	r9, r2
 800cfb0:	3e04      	subs	r6, #4
 800cfb2:	2400      	movs	r4, #0
 800cfb4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800cfb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	3401      	adds	r4, #1
 800cfc0:	b155      	cbz	r5, 800cfd8 <rcutils_string_map_getn+0x44>
 800cfc2:	f7f3 f917 	bl	80001f4 <strlen>
 800cfc6:	4548      	cmp	r0, r9
 800cfc8:	4602      	mov	r2, r0
 800cfca:	4629      	mov	r1, r5
 800cfcc:	bf38      	it	cc
 800cfce:	464a      	movcc	r2, r9
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	f003 fc62 	bl	801089a <strncmp>
 800cfd6:	b128      	cbz	r0, 800cfe4 <rcutils_string_map_getn+0x50>
 800cfd8:	45a2      	cmp	sl, r4
 800cfda:	d1eb      	bne.n	800cfb4 <rcutils_string_map_getn+0x20>
 800cfdc:	2700      	movs	r7, #0
 800cfde:	4638      	mov	r0, r7
 800cfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f853 700b 	ldr.w	r7, [r3, fp]
 800cfea:	4638      	mov	r0, r7
 800cfec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cff0 <rcutils_system_time_now>:
 800cff0:	b308      	cbz	r0, 800d036 <rcutils_system_time_now+0x46>
 800cff2:	b570      	push	{r4, r5, r6, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	4604      	mov	r4, r0
 800cff8:	4669      	mov	r1, sp
 800cffa:	2001      	movs	r0, #1
 800cffc:	f7f4 f91c 	bl	8001238 <clock_gettime>
 800d000:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d004:	2d00      	cmp	r5, #0
 800d006:	db13      	blt.n	800d030 <rcutils_system_time_now+0x40>
 800d008:	9902      	ldr	r1, [sp, #8]
 800d00a:	2900      	cmp	r1, #0
 800d00c:	db0d      	blt.n	800d02a <rcutils_system_time_now+0x3a>
 800d00e:	4e0b      	ldr	r6, [pc, #44]	; (800d03c <rcutils_system_time_now+0x4c>)
 800d010:	fba3 3206 	umull	r3, r2, r3, r6
 800d014:	185b      	adds	r3, r3, r1
 800d016:	fb06 2205 	mla	r2, r6, r5, r2
 800d01a:	f04f 0000 	mov.w	r0, #0
 800d01e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d022:	e9c4 3200 	strd	r3, r2, [r4]
 800d026:	b004      	add	sp, #16
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	ea53 0205 	orrs.w	r2, r3, r5
 800d02e:	d1ee      	bne.n	800d00e <rcutils_system_time_now+0x1e>
 800d030:	2002      	movs	r0, #2
 800d032:	b004      	add	sp, #16
 800d034:	bd70      	pop	{r4, r5, r6, pc}
 800d036:	200b      	movs	r0, #11
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	3b9aca00 	.word	0x3b9aca00

0800d040 <rcutils_steady_time_now>:
 800d040:	b308      	cbz	r0, 800d086 <rcutils_steady_time_now+0x46>
 800d042:	b570      	push	{r4, r5, r6, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	4604      	mov	r4, r0
 800d048:	4669      	mov	r1, sp
 800d04a:	2000      	movs	r0, #0
 800d04c:	f7f4 f8f4 	bl	8001238 <clock_gettime>
 800d050:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d054:	2d00      	cmp	r5, #0
 800d056:	db13      	blt.n	800d080 <rcutils_steady_time_now+0x40>
 800d058:	9902      	ldr	r1, [sp, #8]
 800d05a:	2900      	cmp	r1, #0
 800d05c:	db0d      	blt.n	800d07a <rcutils_steady_time_now+0x3a>
 800d05e:	4e0b      	ldr	r6, [pc, #44]	; (800d08c <rcutils_steady_time_now+0x4c>)
 800d060:	fba3 3206 	umull	r3, r2, r3, r6
 800d064:	185b      	adds	r3, r3, r1
 800d066:	fb06 2205 	mla	r2, r6, r5, r2
 800d06a:	f04f 0000 	mov.w	r0, #0
 800d06e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d072:	e9c4 3200 	strd	r3, r2, [r4]
 800d076:	b004      	add	sp, #16
 800d078:	bd70      	pop	{r4, r5, r6, pc}
 800d07a:	ea53 0205 	orrs.w	r2, r3, r5
 800d07e:	d1ee      	bne.n	800d05e <rcutils_steady_time_now+0x1e>
 800d080:	2002      	movs	r0, #2
 800d082:	b004      	add	sp, #16
 800d084:	bd70      	pop	{r4, r5, r6, pc}
 800d086:	200b      	movs	r0, #11
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	3b9aca00 	.word	0x3b9aca00

0800d090 <rmw_get_zero_initialized_context>:
 800d090:	b510      	push	{r4, lr}
 800d092:	4604      	mov	r4, r0
 800d094:	3010      	adds	r0, #16
 800d096:	f000 f80b 	bl	800d0b0 <rmw_get_zero_initialized_init_options>
 800d09a:	2300      	movs	r3, #0
 800d09c:	2000      	movs	r0, #0
 800d09e:	2100      	movs	r1, #0
 800d0a0:	e9c4 0100 	strd	r0, r1, [r4]
 800d0a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d0a8:	60a3      	str	r3, [r4, #8]
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	bd10      	pop	{r4, pc}
 800d0ae:	bf00      	nop

0800d0b0 <rmw_get_zero_initialized_init_options>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	2238      	movs	r2, #56	; 0x38
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	f003 fbda 	bl	8010870 <memset>
 800d0bc:	f104 0010 	add.w	r0, r4, #16
 800d0c0:	f000 f806 	bl	800d0d0 <rmw_get_default_security_options>
 800d0c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0c8:	60e3      	str	r3, [r4, #12]
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	bd10      	pop	{r4, pc}
 800d0ce:	bf00      	nop

0800d0d0 <rmw_get_default_security_options>:
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	7002      	strb	r2, [r0, #0]
 800d0d4:	6042      	str	r2, [r0, #4]
 800d0d6:	4770      	bx	lr

0800d0d8 <rmw_validate_full_topic_name>:
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d057      	beq.n	800d18c <rmw_validate_full_topic_name+0xb4>
 800d0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	2900      	cmp	r1, #0
 800d0e4:	d054      	beq.n	800d190 <rmw_validate_full_topic_name+0xb8>
 800d0e6:	4616      	mov	r6, r2
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	f7f3 f883 	bl	80001f4 <strlen>
 800d0ee:	b148      	cbz	r0, 800d104 <rmw_validate_full_topic_name+0x2c>
 800d0f0:	7823      	ldrb	r3, [r4, #0]
 800d0f2:	2b2f      	cmp	r3, #47	; 0x2f
 800d0f4:	d00d      	beq.n	800d112 <rmw_validate_full_topic_name+0x3a>
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	b13e      	cbz	r6, 800d10c <rmw_validate_full_topic_name+0x34>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	6030      	str	r0, [r6, #0]
 800d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d104:	2301      	movs	r3, #1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	2e00      	cmp	r6, #0
 800d10a:	d1f7      	bne.n	800d0fc <rmw_validate_full_topic_name+0x24>
 800d10c:	2000      	movs	r0, #0
 800d10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d112:	1e43      	subs	r3, r0, #1
 800d114:	5ce2      	ldrb	r2, [r4, r3]
 800d116:	2a2f      	cmp	r2, #47	; 0x2f
 800d118:	d03c      	beq.n	800d194 <rmw_validate_full_topic_name+0xbc>
 800d11a:	1e63      	subs	r3, r4, #1
 800d11c:	eb03 0800 	add.w	r8, r3, r0
 800d120:	f1c4 0e01 	rsb	lr, r4, #1
 800d124:	eb0e 0703 	add.w	r7, lr, r3
 800d128:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d12c:	f021 0220 	bic.w	r2, r1, #32
 800d130:	3a41      	subs	r2, #65	; 0x41
 800d132:	2a19      	cmp	r2, #25
 800d134:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800d138:	d90b      	bls.n	800d152 <rmw_validate_full_topic_name+0x7a>
 800d13a:	295f      	cmp	r1, #95	; 0x5f
 800d13c:	d009      	beq.n	800d152 <rmw_validate_full_topic_name+0x7a>
 800d13e:	f1bc 0f0a 	cmp.w	ip, #10
 800d142:	d906      	bls.n	800d152 <rmw_validate_full_topic_name+0x7a>
 800d144:	2304      	movs	r3, #4
 800d146:	602b      	str	r3, [r5, #0]
 800d148:	2e00      	cmp	r6, #0
 800d14a:	d0df      	beq.n	800d10c <rmw_validate_full_topic_name+0x34>
 800d14c:	6037      	str	r7, [r6, #0]
 800d14e:	2000      	movs	r0, #0
 800d150:	e7d6      	b.n	800d100 <rmw_validate_full_topic_name+0x28>
 800d152:	4543      	cmp	r3, r8
 800d154:	d1e6      	bne.n	800d124 <rmw_validate_full_topic_name+0x4c>
 800d156:	4f1a      	ldr	r7, [pc, #104]	; (800d1c0 <rmw_validate_full_topic_name+0xe8>)
 800d158:	2301      	movs	r3, #1
 800d15a:	e004      	b.n	800d166 <rmw_validate_full_topic_name+0x8e>
 800d15c:	4298      	cmp	r0, r3
 800d15e:	f104 0401 	add.w	r4, r4, #1
 800d162:	d91c      	bls.n	800d19e <rmw_validate_full_topic_name+0xc6>
 800d164:	4613      	mov	r3, r2
 800d166:	4298      	cmp	r0, r3
 800d168:	f103 0201 	add.w	r2, r3, #1
 800d16c:	d0f6      	beq.n	800d15c <rmw_validate_full_topic_name+0x84>
 800d16e:	7821      	ldrb	r1, [r4, #0]
 800d170:	292f      	cmp	r1, #47	; 0x2f
 800d172:	d1f3      	bne.n	800d15c <rmw_validate_full_topic_name+0x84>
 800d174:	7861      	ldrb	r1, [r4, #1]
 800d176:	292f      	cmp	r1, #47	; 0x2f
 800d178:	d01c      	beq.n	800d1b4 <rmw_validate_full_topic_name+0xdc>
 800d17a:	5dc9      	ldrb	r1, [r1, r7]
 800d17c:	0749      	lsls	r1, r1, #29
 800d17e:	d5ed      	bpl.n	800d15c <rmw_validate_full_topic_name+0x84>
 800d180:	2206      	movs	r2, #6
 800d182:	602a      	str	r2, [r5, #0]
 800d184:	2e00      	cmp	r6, #0
 800d186:	d0c1      	beq.n	800d10c <rmw_validate_full_topic_name+0x34>
 800d188:	6033      	str	r3, [r6, #0]
 800d18a:	e7bf      	b.n	800d10c <rmw_validate_full_topic_name+0x34>
 800d18c:	200b      	movs	r0, #11
 800d18e:	4770      	bx	lr
 800d190:	200b      	movs	r0, #11
 800d192:	e7b5      	b.n	800d100 <rmw_validate_full_topic_name+0x28>
 800d194:	2203      	movs	r2, #3
 800d196:	602a      	str	r2, [r5, #0]
 800d198:	2e00      	cmp	r6, #0
 800d19a:	d1f5      	bne.n	800d188 <rmw_validate_full_topic_name+0xb0>
 800d19c:	e7b6      	b.n	800d10c <rmw_validate_full_topic_name+0x34>
 800d19e:	28f7      	cmp	r0, #247	; 0xf7
 800d1a0:	d802      	bhi.n	800d1a8 <rmw_validate_full_topic_name+0xd0>
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	6028      	str	r0, [r5, #0]
 800d1a6:	e7ab      	b.n	800d100 <rmw_validate_full_topic_name+0x28>
 800d1a8:	2307      	movs	r3, #7
 800d1aa:	602b      	str	r3, [r5, #0]
 800d1ac:	2e00      	cmp	r6, #0
 800d1ae:	d0ad      	beq.n	800d10c <rmw_validate_full_topic_name+0x34>
 800d1b0:	23f6      	movs	r3, #246	; 0xf6
 800d1b2:	e7e9      	b.n	800d188 <rmw_validate_full_topic_name+0xb0>
 800d1b4:	2205      	movs	r2, #5
 800d1b6:	602a      	str	r2, [r5, #0]
 800d1b8:	2e00      	cmp	r6, #0
 800d1ba:	d1e5      	bne.n	800d188 <rmw_validate_full_topic_name+0xb0>
 800d1bc:	e7a6      	b.n	800d10c <rmw_validate_full_topic_name+0x34>
 800d1be:	bf00      	nop
 800d1c0:	080122bc 	.word	0x080122bc

0800d1c4 <rmw_validate_namespace_with_size>:
 800d1c4:	b340      	cbz	r0, 800d218 <rmw_validate_namespace_with_size+0x54>
 800d1c6:	b570      	push	{r4, r5, r6, lr}
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	b0c2      	sub	sp, #264	; 0x108
 800d1cc:	b332      	cbz	r2, 800d21c <rmw_validate_namespace_with_size+0x58>
 800d1ce:	2901      	cmp	r1, #1
 800d1d0:	460d      	mov	r5, r1
 800d1d2:	461e      	mov	r6, r3
 800d1d4:	d102      	bne.n	800d1dc <rmw_validate_namespace_with_size+0x18>
 800d1d6:	7803      	ldrb	r3, [r0, #0]
 800d1d8:	2b2f      	cmp	r3, #47	; 0x2f
 800d1da:	d012      	beq.n	800d202 <rmw_validate_namespace_with_size+0x3e>
 800d1dc:	aa01      	add	r2, sp, #4
 800d1de:	4669      	mov	r1, sp
 800d1e0:	f7ff ff7a 	bl	800d0d8 <rmw_validate_full_topic_name>
 800d1e4:	b978      	cbnz	r0, 800d206 <rmw_validate_namespace_with_size+0x42>
 800d1e6:	9b00      	ldr	r3, [sp, #0]
 800d1e8:	b14b      	cbz	r3, 800d1fe <rmw_validate_namespace_with_size+0x3a>
 800d1ea:	2b07      	cmp	r3, #7
 800d1ec:	d007      	beq.n	800d1fe <rmw_validate_namespace_with_size+0x3a>
 800d1ee:	1e5a      	subs	r2, r3, #1
 800d1f0:	2a05      	cmp	r2, #5
 800d1f2:	d82b      	bhi.n	800d24c <rmw_validate_namespace_with_size+0x88>
 800d1f4:	e8df f002 	tbb	[pc, r2]
 800d1f8:	1e212427 	.word	0x1e212427
 800d1fc:	141b      	.short	0x141b
 800d1fe:	2df5      	cmp	r5, #245	; 0xf5
 800d200:	d803      	bhi.n	800d20a <rmw_validate_namespace_with_size+0x46>
 800d202:	2000      	movs	r0, #0
 800d204:	6020      	str	r0, [r4, #0]
 800d206:	b042      	add	sp, #264	; 0x108
 800d208:	bd70      	pop	{r4, r5, r6, pc}
 800d20a:	2307      	movs	r3, #7
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	2e00      	cmp	r6, #0
 800d210:	d0f9      	beq.n	800d206 <rmw_validate_namespace_with_size+0x42>
 800d212:	23f4      	movs	r3, #244	; 0xf4
 800d214:	6033      	str	r3, [r6, #0]
 800d216:	e7f6      	b.n	800d206 <rmw_validate_namespace_with_size+0x42>
 800d218:	200b      	movs	r0, #11
 800d21a:	4770      	bx	lr
 800d21c:	200b      	movs	r0, #11
 800d21e:	e7f2      	b.n	800d206 <rmw_validate_namespace_with_size+0x42>
 800d220:	2306      	movs	r3, #6
 800d222:	6023      	str	r3, [r4, #0]
 800d224:	2e00      	cmp	r6, #0
 800d226:	d0ee      	beq.n	800d206 <rmw_validate_namespace_with_size+0x42>
 800d228:	9b01      	ldr	r3, [sp, #4]
 800d22a:	6033      	str	r3, [r6, #0]
 800d22c:	e7eb      	b.n	800d206 <rmw_validate_namespace_with_size+0x42>
 800d22e:	2305      	movs	r3, #5
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	e7f7      	b.n	800d224 <rmw_validate_namespace_with_size+0x60>
 800d234:	2304      	movs	r3, #4
 800d236:	6023      	str	r3, [r4, #0]
 800d238:	e7f4      	b.n	800d224 <rmw_validate_namespace_with_size+0x60>
 800d23a:	2303      	movs	r3, #3
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	e7f1      	b.n	800d224 <rmw_validate_namespace_with_size+0x60>
 800d240:	2302      	movs	r3, #2
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	e7ee      	b.n	800d224 <rmw_validate_namespace_with_size+0x60>
 800d246:	2301      	movs	r3, #1
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	e7eb      	b.n	800d224 <rmw_validate_namespace_with_size+0x60>
 800d24c:	4a03      	ldr	r2, [pc, #12]	; (800d25c <rmw_validate_namespace_with_size+0x98>)
 800d24e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d252:	a802      	add	r0, sp, #8
 800d254:	f7ff fd36 	bl	800ccc4 <rcutils_snprintf>
 800d258:	2001      	movs	r0, #1
 800d25a:	e7d4      	b.n	800d206 <rmw_validate_namespace_with_size+0x42>
 800d25c:	08011cc4 	.word	0x08011cc4

0800d260 <rmw_validate_namespace>:
 800d260:	b168      	cbz	r0, 800d27e <rmw_validate_namespace+0x1e>
 800d262:	b570      	push	{r4, r5, r6, lr}
 800d264:	460d      	mov	r5, r1
 800d266:	4616      	mov	r6, r2
 800d268:	4604      	mov	r4, r0
 800d26a:	f7f2 ffc3 	bl	80001f4 <strlen>
 800d26e:	4633      	mov	r3, r6
 800d270:	4601      	mov	r1, r0
 800d272:	462a      	mov	r2, r5
 800d274:	4620      	mov	r0, r4
 800d276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d27a:	f7ff bfa3 	b.w	800d1c4 <rmw_validate_namespace_with_size>
 800d27e:	200b      	movs	r0, #11
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop

0800d284 <rmw_namespace_validation_result_string>:
 800d284:	2807      	cmp	r0, #7
 800d286:	bf9a      	itte	ls
 800d288:	4b02      	ldrls	r3, [pc, #8]	; (800d294 <rmw_namespace_validation_result_string+0x10>)
 800d28a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d28e:	4802      	ldrhi	r0, [pc, #8]	; (800d298 <rmw_namespace_validation_result_string+0x14>)
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	08011ebc 	.word	0x08011ebc
 800d298:	08011d14 	.word	0x08011d14

0800d29c <rmw_validate_node_name>:
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d03b      	beq.n	800d318 <rmw_validate_node_name+0x7c>
 800d2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a4:	460d      	mov	r5, r1
 800d2a6:	2900      	cmp	r1, #0
 800d2a8:	d038      	beq.n	800d31c <rmw_validate_node_name+0x80>
 800d2aa:	4616      	mov	r6, r2
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	f7f2 ffa1 	bl	80001f4 <strlen>
 800d2b2:	b1e0      	cbz	r0, 800d2ee <rmw_validate_node_name+0x52>
 800d2b4:	1e63      	subs	r3, r4, #1
 800d2b6:	eb03 0800 	add.w	r8, r3, r0
 800d2ba:	f1c4 0101 	rsb	r1, r4, #1
 800d2be:	18cf      	adds	r7, r1, r3
 800d2c0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d2c4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800d2c8:	f02e 0c20 	bic.w	ip, lr, #32
 800d2cc:	2a09      	cmp	r2, #9
 800d2ce:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800d2d2:	d914      	bls.n	800d2fe <rmw_validate_node_name+0x62>
 800d2d4:	f1bc 0f19 	cmp.w	ip, #25
 800d2d8:	d911      	bls.n	800d2fe <rmw_validate_node_name+0x62>
 800d2da:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800d2de:	d00e      	beq.n	800d2fe <rmw_validate_node_name+0x62>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	602b      	str	r3, [r5, #0]
 800d2e4:	b106      	cbz	r6, 800d2e8 <rmw_validate_node_name+0x4c>
 800d2e6:	6037      	str	r7, [r6, #0]
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	602b      	str	r3, [r5, #0]
 800d2f2:	2e00      	cmp	r6, #0
 800d2f4:	d0f8      	beq.n	800d2e8 <rmw_validate_node_name+0x4c>
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	6030      	str	r0, [r6, #0]
 800d2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2fe:	4543      	cmp	r3, r8
 800d300:	d1dd      	bne.n	800d2be <rmw_validate_node_name+0x22>
 800d302:	7822      	ldrb	r2, [r4, #0]
 800d304:	4b0d      	ldr	r3, [pc, #52]	; (800d33c <rmw_validate_node_name+0xa0>)
 800d306:	5cd3      	ldrb	r3, [r2, r3]
 800d308:	f013 0304 	ands.w	r3, r3, #4
 800d30c:	d110      	bne.n	800d330 <rmw_validate_node_name+0x94>
 800d30e:	28ff      	cmp	r0, #255	; 0xff
 800d310:	d806      	bhi.n	800d320 <rmw_validate_node_name+0x84>
 800d312:	602b      	str	r3, [r5, #0]
 800d314:	4618      	mov	r0, r3
 800d316:	e7e8      	b.n	800d2ea <rmw_validate_node_name+0x4e>
 800d318:	200b      	movs	r0, #11
 800d31a:	4770      	bx	lr
 800d31c:	200b      	movs	r0, #11
 800d31e:	e7e4      	b.n	800d2ea <rmw_validate_node_name+0x4e>
 800d320:	2204      	movs	r2, #4
 800d322:	602a      	str	r2, [r5, #0]
 800d324:	2e00      	cmp	r6, #0
 800d326:	d0df      	beq.n	800d2e8 <rmw_validate_node_name+0x4c>
 800d328:	22fe      	movs	r2, #254	; 0xfe
 800d32a:	6032      	str	r2, [r6, #0]
 800d32c:	4618      	mov	r0, r3
 800d32e:	e7dc      	b.n	800d2ea <rmw_validate_node_name+0x4e>
 800d330:	2303      	movs	r3, #3
 800d332:	602b      	str	r3, [r5, #0]
 800d334:	2e00      	cmp	r6, #0
 800d336:	d1de      	bne.n	800d2f6 <rmw_validate_node_name+0x5a>
 800d338:	e7d6      	b.n	800d2e8 <rmw_validate_node_name+0x4c>
 800d33a:	bf00      	nop
 800d33c:	080122bc 	.word	0x080122bc

0800d340 <rmw_node_name_validation_result_string>:
 800d340:	2804      	cmp	r0, #4
 800d342:	bf9a      	itte	ls
 800d344:	4b02      	ldrls	r3, [pc, #8]	; (800d350 <rmw_node_name_validation_result_string+0x10>)
 800d346:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d34a:	4802      	ldrhi	r0, [pc, #8]	; (800d354 <rmw_node_name_validation_result_string+0x14>)
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	08011fc8 	.word	0x08011fc8
 800d354:	08011edc 	.word	0x08011edc

0800d358 <get_memory>:
 800d358:	4603      	mov	r3, r0
 800d35a:	6840      	ldr	r0, [r0, #4]
 800d35c:	b158      	cbz	r0, 800d376 <get_memory+0x1e>
 800d35e:	6842      	ldr	r2, [r0, #4]
 800d360:	605a      	str	r2, [r3, #4]
 800d362:	b10a      	cbz	r2, 800d368 <get_memory+0x10>
 800d364:	2100      	movs	r1, #0
 800d366:	6011      	str	r1, [r2, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	6042      	str	r2, [r0, #4]
 800d36c:	b102      	cbz	r2, 800d370 <get_memory+0x18>
 800d36e:	6010      	str	r0, [r2, #0]
 800d370:	2200      	movs	r2, #0
 800d372:	6002      	str	r2, [r0, #0]
 800d374:	6018      	str	r0, [r3, #0]
 800d376:	4770      	bx	lr

0800d378 <put_memory>:
 800d378:	680b      	ldr	r3, [r1, #0]
 800d37a:	b10b      	cbz	r3, 800d380 <put_memory+0x8>
 800d37c:	684a      	ldr	r2, [r1, #4]
 800d37e:	605a      	str	r2, [r3, #4]
 800d380:	684a      	ldr	r2, [r1, #4]
 800d382:	b102      	cbz	r2, 800d386 <put_memory+0xe>
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	6803      	ldr	r3, [r0, #0]
 800d388:	428b      	cmp	r3, r1
 800d38a:	6843      	ldr	r3, [r0, #4]
 800d38c:	bf08      	it	eq
 800d38e:	6002      	streq	r2, [r0, #0]
 800d390:	604b      	str	r3, [r1, #4]
 800d392:	b103      	cbz	r3, 800d396 <put_memory+0x1e>
 800d394:	6019      	str	r1, [r3, #0]
 800d396:	2300      	movs	r3, #0
 800d398:	600b      	str	r3, [r1, #0]
 800d39a:	6041      	str	r1, [r0, #4]
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop

0800d3a0 <rmw_get_implementation_identifier>:
 800d3a0:	4b01      	ldr	r3, [pc, #4]	; (800d3a8 <rmw_get_implementation_identifier+0x8>)
 800d3a2:	6818      	ldr	r0, [r3, #0]
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	08011ff4 	.word	0x08011ff4

0800d3ac <rmw_init_options_init>:
 800d3ac:	b084      	sub	sp, #16
 800d3ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	ad09      	add	r5, sp, #36	; 0x24
 800d3b4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d3b8:	b130      	cbz	r0, 800d3c8 <rmw_init_options_init+0x1c>
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f7fa fa4f 	bl	8007860 <rcutils_allocator_is_valid>
 800d3c2:	b108      	cbz	r0, 800d3c8 <rmw_init_options_init+0x1c>
 800d3c4:	68a6      	ldr	r6, [r4, #8]
 800d3c6:	b12e      	cbz	r6, 800d3d4 <rmw_init_options_init+0x28>
 800d3c8:	200b      	movs	r0, #11
 800d3ca:	b003      	add	sp, #12
 800d3cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d3d0:	b004      	add	sp, #16
 800d3d2:	4770      	bx	lr
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e9c4 2300 	strd	r2, r3, [r4]
 800d3dc:	4b22      	ldr	r3, [pc, #136]	; (800d468 <rmw_init_options_init+0xbc>)
 800d3de:	f8df e098 	ldr.w	lr, [pc, #152]	; 800d478 <rmw_init_options_init+0xcc>
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	60a3      	str	r3, [r4, #8]
 800d3e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3e8:	f104 0c20 	add.w	ip, r4, #32
 800d3ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3f0:	466f      	mov	r7, sp
 800d3f2:	682b      	ldr	r3, [r5, #0]
 800d3f4:	f8cc 3000 	str.w	r3, [ip]
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d3fe:	60e6      	str	r6, [r4, #12]
 800d400:	f7ff fe66 	bl	800d0d0 <rmw_get_default_security_options>
 800d404:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d408:	f104 0310 	add.w	r3, r4, #16
 800d40c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d410:	2203      	movs	r2, #3
 800d412:	4816      	ldr	r0, [pc, #88]	; (800d46c <rmw_init_options_init+0xc0>)
 800d414:	4916      	ldr	r1, [pc, #88]	; (800d470 <rmw_init_options_init+0xc4>)
 800d416:	7626      	strb	r6, [r4, #24]
 800d418:	f7fa fd20 	bl	8007e5c <rmw_uxrce_init_init_options_impl_memory>
 800d41c:	4813      	ldr	r0, [pc, #76]	; (800d46c <rmw_init_options_init+0xc0>)
 800d41e:	f7ff ff9b 	bl	800d358 <get_memory>
 800d422:	b1f0      	cbz	r0, 800d462 <rmw_init_options_init+0xb6>
 800d424:	4a13      	ldr	r2, [pc, #76]	; (800d474 <rmw_init_options_init+0xc8>)
 800d426:	6883      	ldr	r3, [r0, #8]
 800d428:	6851      	ldr	r1, [r2, #4]
 800d42a:	7810      	ldrb	r0, [r2, #0]
 800d42c:	6363      	str	r3, [r4, #52]	; 0x34
 800d42e:	7418      	strb	r0, [r3, #16]
 800d430:	6159      	str	r1, [r3, #20]
 800d432:	68d1      	ldr	r1, [r2, #12]
 800d434:	61d9      	str	r1, [r3, #28]
 800d436:	6911      	ldr	r1, [r2, #16]
 800d438:	6219      	str	r1, [r3, #32]
 800d43a:	6951      	ldr	r1, [r2, #20]
 800d43c:	6892      	ldr	r2, [r2, #8]
 800d43e:	619a      	str	r2, [r3, #24]
 800d440:	6259      	str	r1, [r3, #36]	; 0x24
 800d442:	f7fd faf3 	bl	800aa2c <uxr_nanos>
 800d446:	f002 ff6f 	bl	8010328 <srand>
 800d44a:	f002 ff9b 	bl	8010384 <rand>
 800d44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d450:	6298      	str	r0, [r3, #40]	; 0x28
 800d452:	2800      	cmp	r0, #0
 800d454:	d0f9      	beq.n	800d44a <rmw_init_options_init+0x9e>
 800d456:	2000      	movs	r0, #0
 800d458:	b003      	add	sp, #12
 800d45a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d45e:	b004      	add	sp, #16
 800d460:	4770      	bx	lr
 800d462:	2001      	movs	r0, #1
 800d464:	e7b1      	b.n	800d3ca <rmw_init_options_init+0x1e>
 800d466:	bf00      	nop
 800d468:	08011ff4 	.word	0x08011ff4
 800d46c:	2000d96c 	.word	0x2000d96c
 800d470:	20009208 	.word	0x20009208
 800d474:	20009094 	.word	0x20009094
 800d478:	08011b94 	.word	0x08011b94

0800d47c <rmw_init_options_copy>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	b158      	cbz	r0, 800d498 <rmw_init_options_copy+0x1c>
 800d480:	460d      	mov	r5, r1
 800d482:	b149      	cbz	r1, 800d498 <rmw_init_options_copy+0x1c>
 800d484:	4604      	mov	r4, r0
 800d486:	6880      	ldr	r0, [r0, #8]
 800d488:	b120      	cbz	r0, 800d494 <rmw_init_options_copy+0x18>
 800d48a:	4b1e      	ldr	r3, [pc, #120]	; (800d504 <rmw_init_options_copy+0x88>)
 800d48c:	6819      	ldr	r1, [r3, #0]
 800d48e:	f7f2 fea7 	bl	80001e0 <strcmp>
 800d492:	bb90      	cbnz	r0, 800d4fa <rmw_init_options_copy+0x7e>
 800d494:	68ab      	ldr	r3, [r5, #8]
 800d496:	b113      	cbz	r3, 800d49e <rmw_init_options_copy+0x22>
 800d498:	250b      	movs	r5, #11
 800d49a:	4628      	mov	r0, r5
 800d49c:	bd70      	pop	{r4, r5, r6, pc}
 800d49e:	4623      	mov	r3, r4
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d4a6:	f8d3 c000 	ldr.w	ip, [r3]
 800d4aa:	6858      	ldr	r0, [r3, #4]
 800d4ac:	6899      	ldr	r1, [r3, #8]
 800d4ae:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d4b2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d4b6:	3310      	adds	r3, #16
 800d4b8:	42b3      	cmp	r3, r6
 800d4ba:	f8c2 c000 	str.w	ip, [r2]
 800d4be:	6050      	str	r0, [r2, #4]
 800d4c0:	6091      	str	r1, [r2, #8]
 800d4c2:	f102 0210 	add.w	r2, r2, #16
 800d4c6:	d1ee      	bne.n	800d4a6 <rmw_init_options_copy+0x2a>
 800d4c8:	6819      	ldr	r1, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	480e      	ldr	r0, [pc, #56]	; (800d508 <rmw_init_options_copy+0x8c>)
 800d4ce:	6053      	str	r3, [r2, #4]
 800d4d0:	6011      	str	r1, [r2, #0]
 800d4d2:	f7ff ff41 	bl	800d358 <get_memory>
 800d4d6:	b198      	cbz	r0, 800d500 <rmw_init_options_copy+0x84>
 800d4d8:	6883      	ldr	r3, [r0, #8]
 800d4da:	636b      	str	r3, [r5, #52]	; 0x34
 800d4dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d4de:	f102 0c10 	add.w	ip, r2, #16
 800d4e2:	f103 0410 	add.w	r4, r3, #16
 800d4e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4ec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d4f0:	2500      	movs	r5, #0
 800d4f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	bd70      	pop	{r4, r5, r6, pc}
 800d4fa:	250c      	movs	r5, #12
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	bd70      	pop	{r4, r5, r6, pc}
 800d500:	2501      	movs	r5, #1
 800d502:	e7ca      	b.n	800d49a <rmw_init_options_copy+0x1e>
 800d504:	08011ff4 	.word	0x08011ff4
 800d508:	2000d96c 	.word	0x2000d96c

0800d50c <rmw_init_options_fini>:
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d03d      	beq.n	800d58c <rmw_init_options_fini+0x80>
 800d510:	b510      	push	{r4, lr}
 800d512:	4604      	mov	r4, r0
 800d514:	b08e      	sub	sp, #56	; 0x38
 800d516:	3020      	adds	r0, #32
 800d518:	f7fa f9a2 	bl	8007860 <rcutils_allocator_is_valid>
 800d51c:	b360      	cbz	r0, 800d578 <rmw_init_options_fini+0x6c>
 800d51e:	68a0      	ldr	r0, [r4, #8]
 800d520:	b120      	cbz	r0, 800d52c <rmw_init_options_fini+0x20>
 800d522:	4b1c      	ldr	r3, [pc, #112]	; (800d594 <rmw_init_options_fini+0x88>)
 800d524:	6819      	ldr	r1, [r3, #0]
 800d526:	f7f2 fe5b 	bl	80001e0 <strcmp>
 800d52a:	bb68      	cbnz	r0, 800d588 <rmw_init_options_fini+0x7c>
 800d52c:	4b1a      	ldr	r3, [pc, #104]	; (800d598 <rmw_init_options_fini+0x8c>)
 800d52e:	6819      	ldr	r1, [r3, #0]
 800d530:	b331      	cbz	r1, 800d580 <rmw_init_options_fini+0x74>
 800d532:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d534:	e001      	b.n	800d53a <rmw_init_options_fini+0x2e>
 800d536:	6849      	ldr	r1, [r1, #4]
 800d538:	b311      	cbz	r1, 800d580 <rmw_init_options_fini+0x74>
 800d53a:	688b      	ldr	r3, [r1, #8]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d1fa      	bne.n	800d536 <rmw_init_options_fini+0x2a>
 800d540:	4815      	ldr	r0, [pc, #84]	; (800d598 <rmw_init_options_fini+0x8c>)
 800d542:	f7ff ff19 	bl	800d378 <put_memory>
 800d546:	4668      	mov	r0, sp
 800d548:	f7ff fdb2 	bl	800d0b0 <rmw_get_zero_initialized_init_options>
 800d54c:	46ee      	mov	lr, sp
 800d54e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d552:	46a4      	mov	ip, r4
 800d554:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d558:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d55c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d560:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d568:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d56c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d570:	2300      	movs	r3, #0
 800d572:	4618      	mov	r0, r3
 800d574:	b00e      	add	sp, #56	; 0x38
 800d576:	bd10      	pop	{r4, pc}
 800d578:	230b      	movs	r3, #11
 800d57a:	4618      	mov	r0, r3
 800d57c:	b00e      	add	sp, #56	; 0x38
 800d57e:	bd10      	pop	{r4, pc}
 800d580:	2301      	movs	r3, #1
 800d582:	4618      	mov	r0, r3
 800d584:	b00e      	add	sp, #56	; 0x38
 800d586:	bd10      	pop	{r4, pc}
 800d588:	230c      	movs	r3, #12
 800d58a:	e7f2      	b.n	800d572 <rmw_init_options_fini+0x66>
 800d58c:	230b      	movs	r3, #11
 800d58e:	4618      	mov	r0, r3
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	08011ff4 	.word	0x08011ff4
 800d598:	2000d96c 	.word	0x2000d96c

0800d59c <rmw_init>:
 800d59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5a0:	b083      	sub	sp, #12
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	f000 80d3 	beq.w	800d74e <rmw_init+0x1b2>
 800d5a8:	460e      	mov	r6, r1
 800d5aa:	2900      	cmp	r1, #0
 800d5ac:	f000 80cf 	beq.w	800d74e <rmw_init+0x1b2>
 800d5b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80ca 	beq.w	800d74e <rmw_init+0x1b2>
 800d5ba:	4b78      	ldr	r3, [pc, #480]	; (800d79c <rmw_init+0x200>)
 800d5bc:	6880      	ldr	r0, [r0, #8]
 800d5be:	681f      	ldr	r7, [r3, #0]
 800d5c0:	b128      	cbz	r0, 800d5ce <rmw_init+0x32>
 800d5c2:	4639      	mov	r1, r7
 800d5c4:	f7f2 fe0c 	bl	80001e0 <strcmp>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	f040 80ca 	bne.w	800d762 <rmw_init+0x1c6>
 800d5ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5d2:	4c73      	ldr	r4, [pc, #460]	; (800d7a0 <rmw_init+0x204>)
 800d5d4:	4973      	ldr	r1, [pc, #460]	; (800d7a4 <rmw_init+0x208>)
 800d5d6:	4874      	ldr	r0, [pc, #464]	; (800d7a8 <rmw_init+0x20c>)
 800d5d8:	60b7      	str	r7, [r6, #8]
 800d5da:	e9c6 2300 	strd	r2, r3, [r6]
 800d5de:	68eb      	ldr	r3, [r5, #12]
 800d5e0:	64b3      	str	r3, [r6, #72]	; 0x48
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f7fa fbda 	bl	8007d9c <rmw_uxrce_init_session_memory>
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	4970      	ldr	r1, [pc, #448]	; (800d7ac <rmw_init+0x210>)
 800d5ec:	2204      	movs	r2, #4
 800d5ee:	f7fa fc15 	bl	8007e1c <rmw_uxrce_init_static_input_buffer_memory>
 800d5f2:	f04f 0800 	mov.w	r8, #0
 800d5f6:	486c      	ldr	r0, [pc, #432]	; (800d7a8 <rmw_init+0x20c>)
 800d5f8:	f884 800d 	strb.w	r8, [r4, #13]
 800d5fc:	f7ff feac 	bl	800d358 <get_memory>
 800d600:	2800      	cmp	r0, #0
 800d602:	f000 80a9 	beq.w	800d758 <rmw_init+0x1bc>
 800d606:	6884      	ldr	r4, [r0, #8]
 800d608:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d60a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d60c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d610:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d614:	9101      	str	r1, [sp, #4]
 800d616:	6a00      	ldr	r0, [r0, #32]
 800d618:	9000      	str	r0, [sp, #0]
 800d61a:	f104 0910 	add.w	r9, r4, #16
 800d61e:	4661      	mov	r1, ip
 800d620:	4648      	mov	r0, r9
 800d622:	f000 fdbf 	bl	800e1a4 <uxr_set_custom_transport_callbacks>
 800d626:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800d62a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d62e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800d632:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800d636:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800d63a:	495d      	ldr	r1, [pc, #372]	; (800d7b0 <rmw_init+0x214>)
 800d63c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800d640:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800d644:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800d648:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800d64c:	4859      	ldr	r0, [pc, #356]	; (800d7b4 <rmw_init+0x218>)
 800d64e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800d652:	2201      	movs	r2, #1
 800d654:	64f4      	str	r4, [r6, #76]	; 0x4c
 800d656:	f7fa fb81 	bl	8007d5c <rmw_uxrce_init_node_memory>
 800d65a:	4957      	ldr	r1, [pc, #348]	; (800d7b8 <rmw_init+0x21c>)
 800d65c:	4857      	ldr	r0, [pc, #348]	; (800d7bc <rmw_init+0x220>)
 800d65e:	2205      	movs	r2, #5
 800d660:	f7fa fb5c 	bl	8007d1c <rmw_uxrce_init_subscription_memory>
 800d664:	4956      	ldr	r1, [pc, #344]	; (800d7c0 <rmw_init+0x224>)
 800d666:	4857      	ldr	r0, [pc, #348]	; (800d7c4 <rmw_init+0x228>)
 800d668:	220a      	movs	r2, #10
 800d66a:	f7fa fb37 	bl	8007cdc <rmw_uxrce_init_publisher_memory>
 800d66e:	4956      	ldr	r1, [pc, #344]	; (800d7c8 <rmw_init+0x22c>)
 800d670:	4856      	ldr	r0, [pc, #344]	; (800d7cc <rmw_init+0x230>)
 800d672:	2201      	movs	r2, #1
 800d674:	f7fa faf2 	bl	8007c5c <rmw_uxrce_init_service_memory>
 800d678:	4955      	ldr	r1, [pc, #340]	; (800d7d0 <rmw_init+0x234>)
 800d67a:	4856      	ldr	r0, [pc, #344]	; (800d7d4 <rmw_init+0x238>)
 800d67c:	2201      	movs	r2, #1
 800d67e:	f7fa fb0d 	bl	8007c9c <rmw_uxrce_init_client_memory>
 800d682:	4955      	ldr	r1, [pc, #340]	; (800d7d8 <rmw_init+0x23c>)
 800d684:	4855      	ldr	r0, [pc, #340]	; (800d7dc <rmw_init+0x240>)
 800d686:	220f      	movs	r2, #15
 800d688:	f7fa fba8 	bl	8007ddc <rmw_uxrce_init_topic_memory>
 800d68c:	4954      	ldr	r1, [pc, #336]	; (800d7e0 <rmw_init+0x244>)
 800d68e:	4855      	ldr	r0, [pc, #340]	; (800d7e4 <rmw_init+0x248>)
 800d690:	2203      	movs	r2, #3
 800d692:	f7fa fbe3 	bl	8007e5c <rmw_uxrce_init_init_options_impl_memory>
 800d696:	4954      	ldr	r1, [pc, #336]	; (800d7e8 <rmw_init+0x24c>)
 800d698:	4854      	ldr	r0, [pc, #336]	; (800d7ec <rmw_init+0x250>)
 800d69a:	2204      	movs	r2, #4
 800d69c:	f7fa fbfe 	bl	8007e9c <rmw_uxrce_init_wait_set_memory>
 800d6a0:	4953      	ldr	r1, [pc, #332]	; (800d7f0 <rmw_init+0x254>)
 800d6a2:	4854      	ldr	r0, [pc, #336]	; (800d7f4 <rmw_init+0x258>)
 800d6a4:	2204      	movs	r2, #4
 800d6a6:	f7fa fc19 	bl	8007edc <rmw_uxrce_init_guard_condition_memory>
 800d6aa:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800d6ac:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800d6ae:	4642      	mov	r2, r8
 800d6b0:	f000 fb06 	bl	800dcc0 <rmw_uxrce_transport_init>
 800d6b4:	4607      	mov	r7, r0
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d158      	bne.n	800d76c <rmw_init+0x1d0>
 800d6ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d6bc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800d6c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6c2:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	f7fc f84e 	bl	8009768 <uxr_init_session>
 800d6cc:	494a      	ldr	r1, [pc, #296]	; (800d7f8 <rmw_init+0x25c>)
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f7fc f86d 	bl	80097b0 <uxr_set_topic_callback>
 800d6d6:	4949      	ldr	r1, [pc, #292]	; (800d7fc <rmw_init+0x260>)
 800d6d8:	463a      	mov	r2, r7
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f7fc f864 	bl	80097a8 <uxr_set_status_callback>
 800d6e0:	4947      	ldr	r1, [pc, #284]	; (800d800 <rmw_init+0x264>)
 800d6e2:	463a      	mov	r2, r7
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f7fc f867 	bl	80097b8 <uxr_set_request_callback>
 800d6ea:	4946      	ldr	r1, [pc, #280]	; (800d804 <rmw_init+0x268>)
 800d6ec:	463a      	mov	r2, r7
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	f7fc f866 	bl	80097c0 <uxr_set_reply_callback>
 800d6f4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800d6f8:	2304      	movs	r3, #4
 800d6fa:	0092      	lsls	r2, r2, #2
 800d6fc:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800d700:	4628      	mov	r0, r5
 800d702:	f7fc f89b 	bl	800983c <uxr_create_input_reliable_stream>
 800d706:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800d70a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800d70e:	0092      	lsls	r2, r2, #2
 800d710:	2304      	movs	r3, #4
 800d712:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800d716:	4628      	mov	r0, r5
 800d718:	f7fc f868 	bl	80097ec <uxr_create_output_reliable_stream>
 800d71c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800d720:	4628      	mov	r0, r5
 800d722:	f7fc f885 	bl	8009830 <uxr_create_input_best_effort_stream>
 800d726:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800d72a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800d72e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800d732:	3114      	adds	r1, #20
 800d734:	4628      	mov	r0, r5
 800d736:	f7fc f847 	bl	80097c8 <uxr_create_output_best_effort_stream>
 800d73a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800d73e:	4628      	mov	r0, r5
 800d740:	f7fc fd98 	bl	800a274 <uxr_create_session>
 800d744:	b1f8      	cbz	r0, 800d786 <rmw_init+0x1ea>
 800d746:	4638      	mov	r0, r7
 800d748:	b003      	add	sp, #12
 800d74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d74e:	270b      	movs	r7, #11
 800d750:	4638      	mov	r0, r7
 800d752:	b003      	add	sp, #12
 800d754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d758:	2701      	movs	r7, #1
 800d75a:	4638      	mov	r0, r7
 800d75c:	b003      	add	sp, #12
 800d75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d762:	270c      	movs	r7, #12
 800d764:	4638      	mov	r0, r7
 800d766:	b003      	add	sp, #12
 800d768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d76c:	4648      	mov	r0, r9
 800d76e:	f000 fd5b 	bl	800e228 <uxr_close_custom_transport>
 800d772:	480d      	ldr	r0, [pc, #52]	; (800d7a8 <rmw_init+0x20c>)
 800d774:	4621      	mov	r1, r4
 800d776:	f7ff fdff 	bl	800d378 <put_memory>
 800d77a:	4638      	mov	r0, r7
 800d77c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800d780:	b003      	add	sp, #12
 800d782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d786:	4648      	mov	r0, r9
 800d788:	f000 fd4e 	bl	800e228 <uxr_close_custom_transport>
 800d78c:	4806      	ldr	r0, [pc, #24]	; (800d7a8 <rmw_init+0x20c>)
 800d78e:	4621      	mov	r1, r4
 800d790:	f7ff fdf2 	bl	800d378 <put_memory>
 800d794:	64f7      	str	r7, [r6, #76]	; 0x4c
 800d796:	2701      	movs	r7, #1
 800d798:	e7d5      	b.n	800d746 <rmw_init+0x1aa>
 800d79a:	bf00      	nop
 800d79c:	08011ff4 	.word	0x08011ff4
 800d7a0:	2000d9bc 	.word	0x2000d9bc
 800d7a4:	20009c68 	.word	0x20009c68
 800d7a8:	2000d9ac 	.word	0x2000d9ac
 800d7ac:	2000b210 	.word	0x2000b210
 800d7b0:	2000928c 	.word	0x2000928c
 800d7b4:	2000d97c 	.word	0x2000d97c
 800d7b8:	2000d310 	.word	0x2000d310
 800d7bc:	2000d9cc 	.word	0x2000d9cc
 800d7c0:	20009330 	.word	0x20009330
 800d7c4:	2000d98c 	.word	0x2000d98c
 800d7c8:	20009ba0 	.word	0x20009ba0
 800d7cc:	2000d99c 	.word	0x2000d99c
 800d7d0:	200090c0 	.word	0x200090c0
 800d7d4:	200090b0 	.word	0x200090b0
 800d7d8:	2000d748 	.word	0x2000d748
 800d7dc:	2000d9dc 	.word	0x2000d9dc
 800d7e0:	20009208 	.word	0x20009208
 800d7e4:	2000d96c 	.word	0x2000d96c
 800d7e8:	2000d8ec 	.word	0x2000d8ec
 800d7ec:	2000d9ec 	.word	0x2000d9ec
 800d7f0:	20009188 	.word	0x20009188
 800d7f4:	2000d95c 	.word	0x2000d95c
 800d7f8:	0800fe45 	.word	0x0800fe45
 800d7fc:	0800fe3d 	.word	0x0800fe3d
 800d800:	0800fedd 	.word	0x0800fedd
 800d804:	0800ff79 	.word	0x0800ff79

0800d808 <rmw_context_fini>:
 800d808:	4b17      	ldr	r3, [pc, #92]	; (800d868 <rmw_context_fini+0x60>)
 800d80a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	681c      	ldr	r4, [r3, #0]
 800d810:	4605      	mov	r5, r0
 800d812:	b334      	cbz	r4, 800d862 <rmw_context_fini+0x5a>
 800d814:	2600      	movs	r6, #0
 800d816:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d81a:	6902      	ldr	r2, [r0, #16]
 800d81c:	428a      	cmp	r2, r1
 800d81e:	d018      	beq.n	800d852 <rmw_context_fini+0x4a>
 800d820:	2c00      	cmp	r4, #0
 800d822:	d1f8      	bne.n	800d816 <rmw_context_fini+0xe>
 800d824:	b189      	cbz	r1, 800d84a <rmw_context_fini+0x42>
 800d826:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800d82a:	789b      	ldrb	r3, [r3, #2]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800d832:	bf14      	ite	ne
 800d834:	210a      	movne	r1, #10
 800d836:	2100      	moveq	r1, #0
 800d838:	f7fc fcf4 	bl	800a224 <uxr_delete_session_retries>
 800d83c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800d83e:	f7fa fb6d 	bl	8007f1c <rmw_uxrce_fini_session_memory>
 800d842:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800d844:	3010      	adds	r0, #16
 800d846:	f000 fcef 	bl	800e228 <uxr_close_custom_transport>
 800d84a:	2300      	movs	r3, #0
 800d84c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800d84e:	4630      	mov	r0, r6
 800d850:	bd70      	pop	{r4, r5, r6, pc}
 800d852:	3018      	adds	r0, #24
 800d854:	f000 f90e 	bl	800da74 <rmw_destroy_node>
 800d858:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800d85a:	4606      	mov	r6, r0
 800d85c:	2c00      	cmp	r4, #0
 800d85e:	d1da      	bne.n	800d816 <rmw_context_fini+0xe>
 800d860:	e7e0      	b.n	800d824 <rmw_context_fini+0x1c>
 800d862:	4626      	mov	r6, r4
 800d864:	e7de      	b.n	800d824 <rmw_context_fini+0x1c>
 800d866:	bf00      	nop
 800d868:	2000d97c 	.word	0x2000d97c

0800d86c <create_topic>:
 800d86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d870:	4605      	mov	r5, r0
 800d872:	b084      	sub	sp, #16
 800d874:	4822      	ldr	r0, [pc, #136]	; (800d900 <create_topic+0x94>)
 800d876:	460f      	mov	r7, r1
 800d878:	4616      	mov	r6, r2
 800d87a:	f7ff fd6d 	bl	800d358 <get_memory>
 800d87e:	4604      	mov	r4, r0
 800d880:	2800      	cmp	r0, #0
 800d882:	d039      	beq.n	800d8f8 <create_topic+0x8c>
 800d884:	692b      	ldr	r3, [r5, #16]
 800d886:	6884      	ldr	r4, [r0, #8]
 800d888:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d908 <create_topic+0x9c>
 800d88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d890:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800d894:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800d898:	1c42      	adds	r2, r0, #1
 800d89a:	2102      	movs	r1, #2
 800d89c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800d8a0:	f7fb fea4 	bl	80095ec <uxr_object_id>
 800d8a4:	223c      	movs	r2, #60	; 0x3c
 800d8a6:	6120      	str	r0, [r4, #16]
 800d8a8:	4641      	mov	r1, r8
 800d8aa:	4638      	mov	r0, r7
 800d8ac:	f7fa fc6e 	bl	800818c <generate_topic_name>
 800d8b0:	b1f0      	cbz	r0, 800d8f0 <create_topic+0x84>
 800d8b2:	4f14      	ldr	r7, [pc, #80]	; (800d904 <create_topic+0x98>)
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	2264      	movs	r2, #100	; 0x64
 800d8b8:	4639      	mov	r1, r7
 800d8ba:	f7fa fc37 	bl	800812c <generate_type_name>
 800d8be:	b1b8      	cbz	r0, 800d8f0 <create_topic+0x84>
 800d8c0:	6928      	ldr	r0, [r5, #16]
 800d8c2:	2306      	movs	r3, #6
 800d8c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800d8c8:	f8cd 8000 	str.w	r8, [sp]
 800d8cc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800d8d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d8d4:	6811      	ldr	r1, [r2, #0]
 800d8d6:	696b      	ldr	r3, [r5, #20]
 800d8d8:	6922      	ldr	r2, [r4, #16]
 800d8da:	f7fb fdab 	bl	8009434 <uxr_buffer_create_topic_bin>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	6928      	ldr	r0, [r5, #16]
 800d8e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800d8e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800d8ea:	f7fa fbe9 	bl	80080c0 <run_xrce_session>
 800d8ee:	b918      	cbnz	r0, 800d8f8 <create_topic+0x8c>
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f7fa fb89 	bl	8008008 <rmw_uxrce_fini_topic_memory>
 800d8f6:	2400      	movs	r4, #0
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	b004      	add	sp, #16
 800d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d900:	2000d9dc 	.word	0x2000d9dc
 800d904:	2000da58 	.word	0x2000da58
 800d908:	2000da1c 	.word	0x2000da1c

0800d90c <destroy_topic>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	6985      	ldr	r5, [r0, #24]
 800d910:	b1d5      	cbz	r5, 800d948 <destroy_topic+0x3c>
 800d912:	4604      	mov	r4, r0
 800d914:	6928      	ldr	r0, [r5, #16]
 800d916:	6922      	ldr	r2, [r4, #16]
 800d918:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d91c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d920:	6819      	ldr	r1, [r3, #0]
 800d922:	f7fb fd09 	bl	8009338 <uxr_buffer_delete_entity>
 800d926:	4602      	mov	r2, r0
 800d928:	6928      	ldr	r0, [r5, #16]
 800d92a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d92e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d932:	f7fa fbc5 	bl	80080c0 <run_xrce_session>
 800d936:	2800      	cmp	r0, #0
 800d938:	4620      	mov	r0, r4
 800d93a:	bf14      	ite	ne
 800d93c:	2400      	movne	r4, #0
 800d93e:	2402      	moveq	r4, #2
 800d940:	f7fa fb62 	bl	8008008 <rmw_uxrce_fini_topic_memory>
 800d944:	4620      	mov	r0, r4
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	2401      	movs	r4, #1
 800d94a:	4620      	mov	r0, r4
 800d94c:	bd38      	pop	{r3, r4, r5, pc}
 800d94e:	bf00      	nop

0800d950 <create_node>:
 800d950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d954:	b083      	sub	sp, #12
 800d956:	2b00      	cmp	r3, #0
 800d958:	d05f      	beq.n	800da1a <create_node+0xca>
 800d95a:	4606      	mov	r6, r0
 800d95c:	4835      	ldr	r0, [pc, #212]	; (800da34 <create_node+0xe4>)
 800d95e:	460f      	mov	r7, r1
 800d960:	4690      	mov	r8, r2
 800d962:	461d      	mov	r5, r3
 800d964:	f7ff fcf8 	bl	800d358 <get_memory>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d056      	beq.n	800da1a <create_node+0xca>
 800d96c:	6884      	ldr	r4, [r0, #8]
 800d96e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d970:	6123      	str	r3, [r4, #16]
 800d972:	f7ff fd15 	bl	800d3a0 <rmw_get_implementation_identifier>
 800d976:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800d97a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d97e:	f8c4 9020 	str.w	r9, [r4, #32]
 800d982:	4630      	mov	r0, r6
 800d984:	f7f2 fc36 	bl	80001f4 <strlen>
 800d988:	1c42      	adds	r2, r0, #1
 800d98a:	2a3c      	cmp	r2, #60	; 0x3c
 800d98c:	f104 0518 	add.w	r5, r4, #24
 800d990:	d840      	bhi.n	800da14 <create_node+0xc4>
 800d992:	4648      	mov	r0, r9
 800d994:	4631      	mov	r1, r6
 800d996:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800d99a:	f003 f832 	bl	8010a02 <memcpy>
 800d99e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800d9a2:	4638      	mov	r0, r7
 800d9a4:	f7f2 fc26 	bl	80001f4 <strlen>
 800d9a8:	1c42      	adds	r2, r0, #1
 800d9aa:	2a3c      	cmp	r2, #60	; 0x3c
 800d9ac:	d832      	bhi.n	800da14 <create_node+0xc4>
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	4648      	mov	r0, r9
 800d9b2:	f003 f826 	bl	8010a02 <memcpy>
 800d9b6:	6923      	ldr	r3, [r4, #16]
 800d9b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9bc:	2101      	movs	r1, #1
 800d9be:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800d9c2:	1842      	adds	r2, r0, r1
 800d9c4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800d9c8:	f7fb fe10 	bl	80095ec <uxr_object_id>
 800d9cc:	6160      	str	r0, [r4, #20]
 800d9ce:	783b      	ldrb	r3, [r7, #0]
 800d9d0:	2b2f      	cmp	r3, #47	; 0x2f
 800d9d2:	d127      	bne.n	800da24 <create_node+0xd4>
 800d9d4:	787b      	ldrb	r3, [r7, #1]
 800d9d6:	bb2b      	cbnz	r3, 800da24 <create_node+0xd4>
 800d9d8:	4a17      	ldr	r2, [pc, #92]	; (800da38 <create_node+0xe8>)
 800d9da:	4818      	ldr	r0, [pc, #96]	; (800da3c <create_node+0xec>)
 800d9dc:	4633      	mov	r3, r6
 800d9de:	213c      	movs	r1, #60	; 0x3c
 800d9e0:	f002 fe96 	bl	8010710 <sniprintf>
 800d9e4:	6920      	ldr	r0, [r4, #16]
 800d9e6:	4915      	ldr	r1, [pc, #84]	; (800da3c <create_node+0xec>)
 800d9e8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800d9ec:	9100      	str	r1, [sp, #0]
 800d9ee:	2106      	movs	r1, #6
 800d9f0:	9101      	str	r1, [sp, #4]
 800d9f2:	6811      	ldr	r1, [r2, #0]
 800d9f4:	6962      	ldr	r2, [r4, #20]
 800d9f6:	fa1f f388 	uxth.w	r3, r8
 800d9fa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d9fe:	f7fb fce7 	bl	80093d0 <uxr_buffer_create_participant_bin>
 800da02:	4602      	mov	r2, r0
 800da04:	6920      	ldr	r0, [r4, #16]
 800da06:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800da0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800da0e:	f7fa fb57 	bl	80080c0 <run_xrce_session>
 800da12:	b918      	cbnz	r0, 800da1c <create_node+0xcc>
 800da14:	4628      	mov	r0, r5
 800da16:	f7fa fa87 	bl	8007f28 <rmw_uxrce_fini_node_memory>
 800da1a:	2500      	movs	r5, #0
 800da1c:	4628      	mov	r0, r5
 800da1e:	b003      	add	sp, #12
 800da20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da24:	4a06      	ldr	r2, [pc, #24]	; (800da40 <create_node+0xf0>)
 800da26:	9600      	str	r6, [sp, #0]
 800da28:	463b      	mov	r3, r7
 800da2a:	213c      	movs	r1, #60	; 0x3c
 800da2c:	4803      	ldr	r0, [pc, #12]	; (800da3c <create_node+0xec>)
 800da2e:	f002 fe6f 	bl	8010710 <sniprintf>
 800da32:	e7d7      	b.n	800d9e4 <create_node+0x94>
 800da34:	2000d97c 	.word	0x2000d97c
 800da38:	08011a0c 	.word	0x08011a0c
 800da3c:	2000dabc 	.word	0x2000dabc
 800da40:	08011b9c 	.word	0x08011b9c

0800da44 <rmw_create_node>:
 800da44:	b199      	cbz	r1, 800da6e <rmw_create_node+0x2a>
 800da46:	780b      	ldrb	r3, [r1, #0]
 800da48:	468c      	mov	ip, r1
 800da4a:	b183      	cbz	r3, 800da6e <rmw_create_node+0x2a>
 800da4c:	b410      	push	{r4}
 800da4e:	4614      	mov	r4, r2
 800da50:	b14a      	cbz	r2, 800da66 <rmw_create_node+0x22>
 800da52:	7813      	ldrb	r3, [r2, #0]
 800da54:	b13b      	cbz	r3, 800da66 <rmw_create_node+0x22>
 800da56:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800da58:	4603      	mov	r3, r0
 800da5a:	4621      	mov	r1, r4
 800da5c:	4660      	mov	r0, ip
 800da5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da62:	f7ff bf75 	b.w	800d950 <create_node>
 800da66:	2000      	movs	r0, #0
 800da68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da6c:	4770      	bx	lr
 800da6e:	2000      	movs	r0, #0
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop

0800da74 <rmw_destroy_node>:
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	b328      	cbz	r0, 800dac4 <rmw_destroy_node+0x50>
 800da78:	4607      	mov	r7, r0
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	b120      	cbz	r0, 800da88 <rmw_destroy_node+0x14>
 800da7e:	4b36      	ldr	r3, [pc, #216]	; (800db58 <rmw_destroy_node+0xe4>)
 800da80:	6819      	ldr	r1, [r3, #0]
 800da82:	f7f2 fbad 	bl	80001e0 <strcmp>
 800da86:	b9e8      	cbnz	r0, 800dac4 <rmw_destroy_node+0x50>
 800da88:	687d      	ldr	r5, [r7, #4]
 800da8a:	b1dd      	cbz	r5, 800dac4 <rmw_destroy_node+0x50>
 800da8c:	4b33      	ldr	r3, [pc, #204]	; (800db5c <rmw_destroy_node+0xe8>)
 800da8e:	681c      	ldr	r4, [r3, #0]
 800da90:	2c00      	cmp	r4, #0
 800da92:	d05f      	beq.n	800db54 <rmw_destroy_node+0xe0>
 800da94:	2600      	movs	r6, #0
 800da96:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da9a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800da9e:	429d      	cmp	r5, r3
 800daa0:	d013      	beq.n	800daca <rmw_destroy_node+0x56>
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	d1f7      	bne.n	800da96 <rmw_destroy_node+0x22>
 800daa6:	4b2e      	ldr	r3, [pc, #184]	; (800db60 <rmw_destroy_node+0xec>)
 800daa8:	681c      	ldr	r4, [r3, #0]
 800daaa:	b1c4      	cbz	r4, 800dade <rmw_destroy_node+0x6a>
 800daac:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dab0:	6a0b      	ldr	r3, [r1, #32]
 800dab2:	429d      	cmp	r5, r3
 800dab4:	d1f9      	bne.n	800daaa <rmw_destroy_node+0x36>
 800dab6:	317c      	adds	r1, #124	; 0x7c
 800dab8:	4638      	mov	r0, r7
 800daba:	f000 f8a1 	bl	800dc00 <rmw_destroy_subscription>
 800dabe:	2801      	cmp	r0, #1
 800dac0:	4606      	mov	r6, r0
 800dac2:	d1f2      	bne.n	800daaa <rmw_destroy_node+0x36>
 800dac4:	2601      	movs	r6, #1
 800dac6:	4630      	mov	r0, r6
 800dac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daca:	3184      	adds	r1, #132	; 0x84
 800dacc:	4638      	mov	r0, r7
 800dace:	f7fa f873 	bl	8007bb8 <rmw_destroy_publisher>
 800dad2:	2801      	cmp	r0, #1
 800dad4:	4606      	mov	r6, r0
 800dad6:	d0f5      	beq.n	800dac4 <rmw_destroy_node+0x50>
 800dad8:	2c00      	cmp	r4, #0
 800dada:	d1dc      	bne.n	800da96 <rmw_destroy_node+0x22>
 800dadc:	e7e3      	b.n	800daa6 <rmw_destroy_node+0x32>
 800dade:	4b21      	ldr	r3, [pc, #132]	; (800db64 <rmw_destroy_node+0xf0>)
 800dae0:	681c      	ldr	r4, [r3, #0]
 800dae2:	b16c      	cbz	r4, 800db00 <rmw_destroy_node+0x8c>
 800dae4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dae8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800daea:	429d      	cmp	r5, r3
 800daec:	d1f9      	bne.n	800dae2 <rmw_destroy_node+0x6e>
 800daee:	317c      	adds	r1, #124	; 0x7c
 800daf0:	4638      	mov	r0, r7
 800daf2:	f000 f841 	bl	800db78 <rmw_destroy_service>
 800daf6:	2801      	cmp	r0, #1
 800daf8:	4606      	mov	r6, r0
 800dafa:	d0e3      	beq.n	800dac4 <rmw_destroy_node+0x50>
 800dafc:	2c00      	cmp	r4, #0
 800dafe:	d1f1      	bne.n	800dae4 <rmw_destroy_node+0x70>
 800db00:	4b19      	ldr	r3, [pc, #100]	; (800db68 <rmw_destroy_node+0xf4>)
 800db02:	681c      	ldr	r4, [r3, #0]
 800db04:	b16c      	cbz	r4, 800db22 <rmw_destroy_node+0xae>
 800db06:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800db0a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800db0c:	429d      	cmp	r5, r3
 800db0e:	d1f9      	bne.n	800db04 <rmw_destroy_node+0x90>
 800db10:	317c      	adds	r1, #124	; 0x7c
 800db12:	4638      	mov	r0, r7
 800db14:	f002 fa7a 	bl	801000c <rmw_destroy_client>
 800db18:	2801      	cmp	r0, #1
 800db1a:	4606      	mov	r6, r0
 800db1c:	d0d2      	beq.n	800dac4 <rmw_destroy_node+0x50>
 800db1e:	2c00      	cmp	r4, #0
 800db20:	d1f1      	bne.n	800db06 <rmw_destroy_node+0x92>
 800db22:	6928      	ldr	r0, [r5, #16]
 800db24:	696a      	ldr	r2, [r5, #20]
 800db26:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800db2a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800db2e:	6819      	ldr	r1, [r3, #0]
 800db30:	f7fb fc02 	bl	8009338 <uxr_buffer_delete_entity>
 800db34:	4602      	mov	r2, r0
 800db36:	6928      	ldr	r0, [r5, #16]
 800db38:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800db3c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800db40:	f7fa fabe 	bl	80080c0 <run_xrce_session>
 800db44:	2800      	cmp	r0, #0
 800db46:	bf08      	it	eq
 800db48:	2602      	moveq	r6, #2
 800db4a:	4638      	mov	r0, r7
 800db4c:	f7fa f9ec 	bl	8007f28 <rmw_uxrce_fini_node_memory>
 800db50:	4630      	mov	r0, r6
 800db52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db54:	4626      	mov	r6, r4
 800db56:	e7a6      	b.n	800daa6 <rmw_destroy_node+0x32>
 800db58:	08011ff4 	.word	0x08011ff4
 800db5c:	2000d98c 	.word	0x2000d98c
 800db60:	2000d9cc 	.word	0x2000d9cc
 800db64:	2000d99c 	.word	0x2000d99c
 800db68:	200090b0 	.word	0x200090b0

0800db6c <rmw_node_get_graph_guard_condition>:
 800db6c:	6843      	ldr	r3, [r0, #4]
 800db6e:	6918      	ldr	r0, [r3, #16]
 800db70:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop

0800db78 <rmw_destroy_service>:
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	b128      	cbz	r0, 800db88 <rmw_destroy_service+0x10>
 800db7c:	4604      	mov	r4, r0
 800db7e:	6800      	ldr	r0, [r0, #0]
 800db80:	460d      	mov	r5, r1
 800db82:	f7fa fb1d 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 800db86:	b910      	cbnz	r0, 800db8e <rmw_destroy_service+0x16>
 800db88:	2401      	movs	r4, #1
 800db8a:	4620      	mov	r0, r4
 800db8c:	bd70      	pop	{r4, r5, r6, pc}
 800db8e:	6863      	ldr	r3, [r4, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d0f9      	beq.n	800db88 <rmw_destroy_service+0x10>
 800db94:	2d00      	cmp	r5, #0
 800db96:	d0f7      	beq.n	800db88 <rmw_destroy_service+0x10>
 800db98:	6828      	ldr	r0, [r5, #0]
 800db9a:	f7fa fb11 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d0f2      	beq.n	800db88 <rmw_destroy_service+0x10>
 800dba2:	686e      	ldr	r6, [r5, #4]
 800dba4:	2e00      	cmp	r6, #0
 800dba6:	d0ef      	beq.n	800db88 <rmw_destroy_service+0x10>
 800dba8:	6864      	ldr	r4, [r4, #4]
 800dbaa:	6932      	ldr	r2, [r6, #16]
 800dbac:	6920      	ldr	r0, [r4, #16]
 800dbae:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800dbb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dbb6:	6819      	ldr	r1, [r3, #0]
 800dbb8:	f001 f882 	bl	800ecc0 <uxr_buffer_cancel_data>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	6920      	ldr	r0, [r4, #16]
 800dbc0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dbc4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dbc8:	f7fa fa7a 	bl	80080c0 <run_xrce_session>
 800dbcc:	6920      	ldr	r0, [r4, #16]
 800dbce:	6932      	ldr	r2, [r6, #16]
 800dbd0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800dbd4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dbd8:	6819      	ldr	r1, [r3, #0]
 800dbda:	f7fb fbad 	bl	8009338 <uxr_buffer_delete_entity>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	6920      	ldr	r0, [r4, #16]
 800dbe2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dbe6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dbea:	f7fa fa69 	bl	80080c0 <run_xrce_session>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	bf14      	ite	ne
 800dbf4:	2400      	movne	r4, #0
 800dbf6:	2402      	moveq	r4, #2
 800dbf8:	f7fa f9da 	bl	8007fb0 <rmw_uxrce_fini_service_memory>
 800dbfc:	e7c5      	b.n	800db8a <rmw_destroy_service+0x12>
 800dbfe:	bf00      	nop

0800dc00 <rmw_destroy_subscription>:
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc02:	b128      	cbz	r0, 800dc10 <rmw_destroy_subscription+0x10>
 800dc04:	4604      	mov	r4, r0
 800dc06:	6800      	ldr	r0, [r0, #0]
 800dc08:	460d      	mov	r5, r1
 800dc0a:	f7fa fad9 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 800dc0e:	b910      	cbnz	r0, 800dc16 <rmw_destroy_subscription+0x16>
 800dc10:	2401      	movs	r4, #1
 800dc12:	4620      	mov	r0, r4
 800dc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d0f9      	beq.n	800dc10 <rmw_destroy_subscription+0x10>
 800dc1c:	2d00      	cmp	r5, #0
 800dc1e:	d0f7      	beq.n	800dc10 <rmw_destroy_subscription+0x10>
 800dc20:	6828      	ldr	r0, [r5, #0]
 800dc22:	f7fa facd 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d0f2      	beq.n	800dc10 <rmw_destroy_subscription+0x10>
 800dc2a:	686c      	ldr	r4, [r5, #4]
 800dc2c:	2c00      	cmp	r4, #0
 800dc2e:	d0ef      	beq.n	800dc10 <rmw_destroy_subscription+0x10>
 800dc30:	6a26      	ldr	r6, [r4, #32]
 800dc32:	6962      	ldr	r2, [r4, #20]
 800dc34:	6930      	ldr	r0, [r6, #16]
 800dc36:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800dc3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dc3e:	6819      	ldr	r1, [r3, #0]
 800dc40:	f001 f83e 	bl	800ecc0 <uxr_buffer_cancel_data>
 800dc44:	4602      	mov	r2, r0
 800dc46:	6930      	ldr	r0, [r6, #16]
 800dc48:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dc4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dc50:	f7fa fa36 	bl	80080c0 <run_xrce_session>
 800dc54:	69e0      	ldr	r0, [r4, #28]
 800dc56:	f7ff fe59 	bl	800d90c <destroy_topic>
 800dc5a:	6a23      	ldr	r3, [r4, #32]
 800dc5c:	6962      	ldr	r2, [r4, #20]
 800dc5e:	6918      	ldr	r0, [r3, #16]
 800dc60:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800dc64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dc68:	6819      	ldr	r1, [r3, #0]
 800dc6a:	f7fb fb65 	bl	8009338 <uxr_buffer_delete_entity>
 800dc6e:	6a23      	ldr	r3, [r4, #32]
 800dc70:	6922      	ldr	r2, [r4, #16]
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800dc78:	4604      	mov	r4, r0
 800dc7a:	6809      	ldr	r1, [r1, #0]
 800dc7c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dc80:	f7fb fb5a 	bl	8009338 <uxr_buffer_delete_entity>
 800dc84:	6937      	ldr	r7, [r6, #16]
 800dc86:	4622      	mov	r2, r4
 800dc88:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800dc8c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800dc90:	4604      	mov	r4, r0
 800dc92:	4638      	mov	r0, r7
 800dc94:	f7fa fa14 	bl	80080c0 <run_xrce_session>
 800dc98:	6936      	ldr	r6, [r6, #16]
 800dc9a:	4622      	mov	r2, r4
 800dc9c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800dca0:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800dca4:	4604      	mov	r4, r0
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7fa fa0a 	bl	80080c0 <run_xrce_session>
 800dcac:	b12c      	cbz	r4, 800dcba <rmw_destroy_subscription+0xba>
 800dcae:	b120      	cbz	r0, 800dcba <rmw_destroy_subscription+0xba>
 800dcb0:	2400      	movs	r4, #0
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f7fa f966 	bl	8007f84 <rmw_uxrce_fini_subscription_memory>
 800dcb8:	e7ab      	b.n	800dc12 <rmw_destroy_subscription+0x12>
 800dcba:	2402      	movs	r4, #2
 800dcbc:	e7f9      	b.n	800dcb2 <rmw_destroy_subscription+0xb2>
 800dcbe:	bf00      	nop

0800dcc0 <rmw_uxrce_transport_init>:
 800dcc0:	b508      	push	{r3, lr}
 800dcc2:	b108      	cbz	r0, 800dcc8 <rmw_uxrce_transport_init+0x8>
 800dcc4:	f100 0210 	add.w	r2, r0, #16
 800dcc8:	b139      	cbz	r1, 800dcda <rmw_uxrce_transport_init+0x1a>
 800dcca:	6949      	ldr	r1, [r1, #20]
 800dccc:	4610      	mov	r0, r2
 800dcce:	f000 fa77 	bl	800e1c0 <uxr_init_custom_transport>
 800dcd2:	f080 0001 	eor.w	r0, r0, #1
 800dcd6:	b2c0      	uxtb	r0, r0
 800dcd8:	bd08      	pop	{r3, pc}
 800dcda:	4b04      	ldr	r3, [pc, #16]	; (800dcec <rmw_uxrce_transport_init+0x2c>)
 800dcdc:	4610      	mov	r0, r2
 800dcde:	6859      	ldr	r1, [r3, #4]
 800dce0:	f000 fa6e 	bl	800e1c0 <uxr_init_custom_transport>
 800dce4:	f080 0001 	eor.w	r0, r0, #1
 800dce8:	b2c0      	uxtb	r0, r0
 800dcea:	bd08      	pop	{r3, pc}
 800dcec:	20009094 	.word	0x20009094

0800dcf0 <rmw_uros_epoch_nanos>:
 800dcf0:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <rmw_uros_epoch_nanos+0x18>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	b123      	cbz	r3, 800dd00 <rmw_uros_epoch_nanos+0x10>
 800dcf6:	6898      	ldr	r0, [r3, #8]
 800dcf8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dcfc:	f7fb bdba 	b.w	8009874 <uxr_epoch_nanos>
 800dd00:	2000      	movs	r0, #0
 800dd02:	2100      	movs	r1, #0
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	2000d9ac 	.word	0x2000d9ac

0800dd0c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800dd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd10:	6805      	ldr	r5, [r0, #0]
 800dd12:	4604      	mov	r4, r0
 800dd14:	4628      	mov	r0, r5
 800dd16:	460e      	mov	r6, r1
 800dd18:	f7f2 fa62 	bl	80001e0 <strcmp>
 800dd1c:	b1c8      	cbz	r0, 800dd52 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800dd1e:	4b11      	ldr	r3, [pc, #68]	; (800dd64 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	429d      	cmp	r5, r3
 800dd24:	d112      	bne.n	800dd4c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800dd26:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dd2a:	f8d8 4000 	ldr.w	r4, [r8]
 800dd2e:	b16c      	cbz	r4, 800dd4c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800dd30:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dd34:	2700      	movs	r7, #0
 800dd36:	3d04      	subs	r5, #4
 800dd38:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800dd3c:	4631      	mov	r1, r6
 800dd3e:	f7f2 fa4f 	bl	80001e0 <strcmp>
 800dd42:	00bb      	lsls	r3, r7, #2
 800dd44:	b140      	cbz	r0, 800dd58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800dd46:	3701      	adds	r7, #1
 800dd48:	42bc      	cmp	r4, r7
 800dd4a:	d1f5      	bne.n	800dd38 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd52:	4620      	mov	r0, r4
 800dd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dd5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	58d3      	ldr	r3, [r2, r3]
 800dd62:	4718      	bx	r3
 800dd64:	200000ac 	.word	0x200000ac

0800dd68 <std_msgs__msg__Int32__init>:
 800dd68:	3800      	subs	r0, #0
 800dd6a:	bf18      	it	ne
 800dd6c:	2001      	movne	r0, #1
 800dd6e:	4770      	bx	lr

0800dd70 <std_msgs__msg__Int32__fini>:
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop

0800dd74 <ucdr_serialize_endian_array_char>:
 800dd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd78:	4619      	mov	r1, r3
 800dd7a:	461f      	mov	r7, r3
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	4690      	mov	r8, r2
 800dd80:	f7fb fa16 	bl	80091b0 <ucdr_check_buffer_available_for>
 800dd84:	b9e0      	cbnz	r0, 800ddc0 <ucdr_serialize_endian_array_char+0x4c>
 800dd86:	463e      	mov	r6, r7
 800dd88:	e009      	b.n	800dd9e <ucdr_serialize_endian_array_char+0x2a>
 800dd8a:	68a8      	ldr	r0, [r5, #8]
 800dd8c:	f002 fe39 	bl	8010a02 <memcpy>
 800dd90:	68ab      	ldr	r3, [r5, #8]
 800dd92:	6928      	ldr	r0, [r5, #16]
 800dd94:	4423      	add	r3, r4
 800dd96:	4420      	add	r0, r4
 800dd98:	1b36      	subs	r6, r6, r4
 800dd9a:	60ab      	str	r3, [r5, #8]
 800dd9c:	6128      	str	r0, [r5, #16]
 800dd9e:	4631      	mov	r1, r6
 800dda0:	2201      	movs	r2, #1
 800dda2:	4628      	mov	r0, r5
 800dda4:	f7fb fa8c 	bl	80092c0 <ucdr_check_final_buffer_behavior_array>
 800dda8:	1bb9      	subs	r1, r7, r6
 800ddaa:	4441      	add	r1, r8
 800ddac:	4604      	mov	r4, r0
 800ddae:	4602      	mov	r2, r0
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d1ea      	bne.n	800dd8a <ucdr_serialize_endian_array_char+0x16>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	7da8      	ldrb	r0, [r5, #22]
 800ddb8:	756b      	strb	r3, [r5, #21]
 800ddba:	4058      	eors	r0, r3
 800ddbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc0:	463a      	mov	r2, r7
 800ddc2:	68a8      	ldr	r0, [r5, #8]
 800ddc4:	4641      	mov	r1, r8
 800ddc6:	f002 fe1c 	bl	8010a02 <memcpy>
 800ddca:	68aa      	ldr	r2, [r5, #8]
 800ddcc:	692b      	ldr	r3, [r5, #16]
 800ddce:	443a      	add	r2, r7
 800ddd0:	443b      	add	r3, r7
 800ddd2:	60aa      	str	r2, [r5, #8]
 800ddd4:	612b      	str	r3, [r5, #16]
 800ddd6:	e7ed      	b.n	800ddb4 <ucdr_serialize_endian_array_char+0x40>

0800ddd8 <ucdr_deserialize_endian_array_char>:
 800ddd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dddc:	4619      	mov	r1, r3
 800ddde:	461f      	mov	r7, r3
 800dde0:	4605      	mov	r5, r0
 800dde2:	4690      	mov	r8, r2
 800dde4:	f7fb f9e4 	bl	80091b0 <ucdr_check_buffer_available_for>
 800dde8:	b9e0      	cbnz	r0, 800de24 <ucdr_deserialize_endian_array_char+0x4c>
 800ddea:	463e      	mov	r6, r7
 800ddec:	e009      	b.n	800de02 <ucdr_deserialize_endian_array_char+0x2a>
 800ddee:	68a9      	ldr	r1, [r5, #8]
 800ddf0:	f002 fe07 	bl	8010a02 <memcpy>
 800ddf4:	68ab      	ldr	r3, [r5, #8]
 800ddf6:	6928      	ldr	r0, [r5, #16]
 800ddf8:	4423      	add	r3, r4
 800ddfa:	4420      	add	r0, r4
 800ddfc:	1b36      	subs	r6, r6, r4
 800ddfe:	60ab      	str	r3, [r5, #8]
 800de00:	6128      	str	r0, [r5, #16]
 800de02:	2201      	movs	r2, #1
 800de04:	4631      	mov	r1, r6
 800de06:	4628      	mov	r0, r5
 800de08:	f7fb fa5a 	bl	80092c0 <ucdr_check_final_buffer_behavior_array>
 800de0c:	4604      	mov	r4, r0
 800de0e:	1bb8      	subs	r0, r7, r6
 800de10:	4440      	add	r0, r8
 800de12:	4622      	mov	r2, r4
 800de14:	2c00      	cmp	r4, #0
 800de16:	d1ea      	bne.n	800ddee <ucdr_deserialize_endian_array_char+0x16>
 800de18:	2301      	movs	r3, #1
 800de1a:	7da8      	ldrb	r0, [r5, #22]
 800de1c:	756b      	strb	r3, [r5, #21]
 800de1e:	4058      	eors	r0, r3
 800de20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de24:	463a      	mov	r2, r7
 800de26:	68a9      	ldr	r1, [r5, #8]
 800de28:	4640      	mov	r0, r8
 800de2a:	f002 fdea 	bl	8010a02 <memcpy>
 800de2e:	68aa      	ldr	r2, [r5, #8]
 800de30:	692b      	ldr	r3, [r5, #16]
 800de32:	443a      	add	r2, r7
 800de34:	443b      	add	r3, r7
 800de36:	60aa      	str	r2, [r5, #8]
 800de38:	612b      	str	r3, [r5, #16]
 800de3a:	e7ed      	b.n	800de18 <ucdr_deserialize_endian_array_char+0x40>

0800de3c <ucdr_serialize_array_uint8_t>:
 800de3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de40:	4688      	mov	r8, r1
 800de42:	4611      	mov	r1, r2
 800de44:	4617      	mov	r7, r2
 800de46:	4605      	mov	r5, r0
 800de48:	f7fb f9b2 	bl	80091b0 <ucdr_check_buffer_available_for>
 800de4c:	b9e0      	cbnz	r0, 800de88 <ucdr_serialize_array_uint8_t+0x4c>
 800de4e:	463e      	mov	r6, r7
 800de50:	e009      	b.n	800de66 <ucdr_serialize_array_uint8_t+0x2a>
 800de52:	68a8      	ldr	r0, [r5, #8]
 800de54:	f002 fdd5 	bl	8010a02 <memcpy>
 800de58:	68aa      	ldr	r2, [r5, #8]
 800de5a:	692b      	ldr	r3, [r5, #16]
 800de5c:	4422      	add	r2, r4
 800de5e:	4423      	add	r3, r4
 800de60:	1b36      	subs	r6, r6, r4
 800de62:	60aa      	str	r2, [r5, #8]
 800de64:	612b      	str	r3, [r5, #16]
 800de66:	4631      	mov	r1, r6
 800de68:	2201      	movs	r2, #1
 800de6a:	4628      	mov	r0, r5
 800de6c:	f7fb fa28 	bl	80092c0 <ucdr_check_final_buffer_behavior_array>
 800de70:	1bb9      	subs	r1, r7, r6
 800de72:	4441      	add	r1, r8
 800de74:	4604      	mov	r4, r0
 800de76:	4602      	mov	r2, r0
 800de78:	2800      	cmp	r0, #0
 800de7a:	d1ea      	bne.n	800de52 <ucdr_serialize_array_uint8_t+0x16>
 800de7c:	2301      	movs	r3, #1
 800de7e:	7da8      	ldrb	r0, [r5, #22]
 800de80:	756b      	strb	r3, [r5, #21]
 800de82:	4058      	eors	r0, r3
 800de84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de88:	463a      	mov	r2, r7
 800de8a:	68a8      	ldr	r0, [r5, #8]
 800de8c:	4641      	mov	r1, r8
 800de8e:	f002 fdb8 	bl	8010a02 <memcpy>
 800de92:	68aa      	ldr	r2, [r5, #8]
 800de94:	692b      	ldr	r3, [r5, #16]
 800de96:	443a      	add	r2, r7
 800de98:	443b      	add	r3, r7
 800de9a:	60aa      	str	r2, [r5, #8]
 800de9c:	612b      	str	r3, [r5, #16]
 800de9e:	e7ed      	b.n	800de7c <ucdr_serialize_array_uint8_t+0x40>

0800dea0 <ucdr_serialize_endian_array_uint8_t>:
 800dea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea4:	4619      	mov	r1, r3
 800dea6:	461f      	mov	r7, r3
 800dea8:	4605      	mov	r5, r0
 800deaa:	4690      	mov	r8, r2
 800deac:	f7fb f980 	bl	80091b0 <ucdr_check_buffer_available_for>
 800deb0:	b9e0      	cbnz	r0, 800deec <ucdr_serialize_endian_array_uint8_t+0x4c>
 800deb2:	463e      	mov	r6, r7
 800deb4:	e009      	b.n	800deca <ucdr_serialize_endian_array_uint8_t+0x2a>
 800deb6:	68a8      	ldr	r0, [r5, #8]
 800deb8:	f002 fda3 	bl	8010a02 <memcpy>
 800debc:	68ab      	ldr	r3, [r5, #8]
 800debe:	6928      	ldr	r0, [r5, #16]
 800dec0:	4423      	add	r3, r4
 800dec2:	4420      	add	r0, r4
 800dec4:	1b36      	subs	r6, r6, r4
 800dec6:	60ab      	str	r3, [r5, #8]
 800dec8:	6128      	str	r0, [r5, #16]
 800deca:	4631      	mov	r1, r6
 800decc:	2201      	movs	r2, #1
 800dece:	4628      	mov	r0, r5
 800ded0:	f7fb f9f6 	bl	80092c0 <ucdr_check_final_buffer_behavior_array>
 800ded4:	1bb9      	subs	r1, r7, r6
 800ded6:	4441      	add	r1, r8
 800ded8:	4604      	mov	r4, r0
 800deda:	4602      	mov	r2, r0
 800dedc:	2800      	cmp	r0, #0
 800dede:	d1ea      	bne.n	800deb6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800dee0:	2301      	movs	r3, #1
 800dee2:	7da8      	ldrb	r0, [r5, #22]
 800dee4:	756b      	strb	r3, [r5, #21]
 800dee6:	4058      	eors	r0, r3
 800dee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deec:	463a      	mov	r2, r7
 800deee:	68a8      	ldr	r0, [r5, #8]
 800def0:	4641      	mov	r1, r8
 800def2:	f002 fd86 	bl	8010a02 <memcpy>
 800def6:	68aa      	ldr	r2, [r5, #8]
 800def8:	692b      	ldr	r3, [r5, #16]
 800defa:	443a      	add	r2, r7
 800defc:	443b      	add	r3, r7
 800defe:	60aa      	str	r2, [r5, #8]
 800df00:	612b      	str	r3, [r5, #16]
 800df02:	e7ed      	b.n	800dee0 <ucdr_serialize_endian_array_uint8_t+0x40>

0800df04 <ucdr_deserialize_array_uint8_t>:
 800df04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df08:	4688      	mov	r8, r1
 800df0a:	4611      	mov	r1, r2
 800df0c:	4617      	mov	r7, r2
 800df0e:	4605      	mov	r5, r0
 800df10:	f7fb f94e 	bl	80091b0 <ucdr_check_buffer_available_for>
 800df14:	b9e0      	cbnz	r0, 800df50 <ucdr_deserialize_array_uint8_t+0x4c>
 800df16:	463e      	mov	r6, r7
 800df18:	e009      	b.n	800df2e <ucdr_deserialize_array_uint8_t+0x2a>
 800df1a:	68a9      	ldr	r1, [r5, #8]
 800df1c:	f002 fd71 	bl	8010a02 <memcpy>
 800df20:	68aa      	ldr	r2, [r5, #8]
 800df22:	692b      	ldr	r3, [r5, #16]
 800df24:	4422      	add	r2, r4
 800df26:	4423      	add	r3, r4
 800df28:	1b36      	subs	r6, r6, r4
 800df2a:	60aa      	str	r2, [r5, #8]
 800df2c:	612b      	str	r3, [r5, #16]
 800df2e:	2201      	movs	r2, #1
 800df30:	4631      	mov	r1, r6
 800df32:	4628      	mov	r0, r5
 800df34:	f7fb f9c4 	bl	80092c0 <ucdr_check_final_buffer_behavior_array>
 800df38:	4604      	mov	r4, r0
 800df3a:	1bb8      	subs	r0, r7, r6
 800df3c:	4440      	add	r0, r8
 800df3e:	4622      	mov	r2, r4
 800df40:	2c00      	cmp	r4, #0
 800df42:	d1ea      	bne.n	800df1a <ucdr_deserialize_array_uint8_t+0x16>
 800df44:	2301      	movs	r3, #1
 800df46:	7da8      	ldrb	r0, [r5, #22]
 800df48:	756b      	strb	r3, [r5, #21]
 800df4a:	4058      	eors	r0, r3
 800df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df50:	463a      	mov	r2, r7
 800df52:	68a9      	ldr	r1, [r5, #8]
 800df54:	4640      	mov	r0, r8
 800df56:	f002 fd54 	bl	8010a02 <memcpy>
 800df5a:	68aa      	ldr	r2, [r5, #8]
 800df5c:	692b      	ldr	r3, [r5, #16]
 800df5e:	443a      	add	r2, r7
 800df60:	443b      	add	r3, r7
 800df62:	60aa      	str	r2, [r5, #8]
 800df64:	612b      	str	r3, [r5, #16]
 800df66:	e7ed      	b.n	800df44 <ucdr_deserialize_array_uint8_t+0x40>

0800df68 <ucdr_deserialize_endian_array_uint8_t>:
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	4619      	mov	r1, r3
 800df6e:	461f      	mov	r7, r3
 800df70:	4605      	mov	r5, r0
 800df72:	4690      	mov	r8, r2
 800df74:	f7fb f91c 	bl	80091b0 <ucdr_check_buffer_available_for>
 800df78:	b9e0      	cbnz	r0, 800dfb4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800df7a:	463e      	mov	r6, r7
 800df7c:	e009      	b.n	800df92 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800df7e:	68a9      	ldr	r1, [r5, #8]
 800df80:	f002 fd3f 	bl	8010a02 <memcpy>
 800df84:	68ab      	ldr	r3, [r5, #8]
 800df86:	6928      	ldr	r0, [r5, #16]
 800df88:	4423      	add	r3, r4
 800df8a:	4420      	add	r0, r4
 800df8c:	1b36      	subs	r6, r6, r4
 800df8e:	60ab      	str	r3, [r5, #8]
 800df90:	6128      	str	r0, [r5, #16]
 800df92:	2201      	movs	r2, #1
 800df94:	4631      	mov	r1, r6
 800df96:	4628      	mov	r0, r5
 800df98:	f7fb f992 	bl	80092c0 <ucdr_check_final_buffer_behavior_array>
 800df9c:	4604      	mov	r4, r0
 800df9e:	1bb8      	subs	r0, r7, r6
 800dfa0:	4440      	add	r0, r8
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	2c00      	cmp	r4, #0
 800dfa6:	d1ea      	bne.n	800df7e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	7da8      	ldrb	r0, [r5, #22]
 800dfac:	756b      	strb	r3, [r5, #21]
 800dfae:	4058      	eors	r0, r3
 800dfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb4:	463a      	mov	r2, r7
 800dfb6:	68a9      	ldr	r1, [r5, #8]
 800dfb8:	4640      	mov	r0, r8
 800dfba:	f002 fd22 	bl	8010a02 <memcpy>
 800dfbe:	68aa      	ldr	r2, [r5, #8]
 800dfc0:	692b      	ldr	r3, [r5, #16]
 800dfc2:	443a      	add	r2, r7
 800dfc4:	443b      	add	r3, r7
 800dfc6:	60aa      	str	r2, [r5, #8]
 800dfc8:	612b      	str	r3, [r5, #16]
 800dfca:	e7ed      	b.n	800dfa8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800dfcc <ucdr_serialize_sequence_char>:
 800dfcc:	b570      	push	{r4, r5, r6, lr}
 800dfce:	4615      	mov	r5, r2
 800dfd0:	460e      	mov	r6, r1
 800dfd2:	7d01      	ldrb	r1, [r0, #20]
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	f7fa fc41 	bl	800885c <ucdr_serialize_endian_uint32_t>
 800dfda:	b90d      	cbnz	r5, 800dfe0 <ucdr_serialize_sequence_char+0x14>
 800dfdc:	2001      	movs	r0, #1
 800dfde:	bd70      	pop	{r4, r5, r6, pc}
 800dfe0:	7d21      	ldrb	r1, [r4, #20]
 800dfe2:	462b      	mov	r3, r5
 800dfe4:	4632      	mov	r2, r6
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfec:	f7ff bec2 	b.w	800dd74 <ucdr_serialize_endian_array_char>

0800dff0 <ucdr_deserialize_sequence_char>:
 800dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff4:	461d      	mov	r5, r3
 800dff6:	4616      	mov	r6, r2
 800dff8:	460f      	mov	r7, r1
 800dffa:	461a      	mov	r2, r3
 800dffc:	7d01      	ldrb	r1, [r0, #20]
 800dffe:	4604      	mov	r4, r0
 800e000:	f7fa fd54 	bl	8008aac <ucdr_deserialize_endian_uint32_t>
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	429e      	cmp	r6, r3
 800e008:	bf3c      	itt	cc
 800e00a:	2201      	movcc	r2, #1
 800e00c:	75a2      	strbcc	r2, [r4, #22]
 800e00e:	b913      	cbnz	r3, 800e016 <ucdr_deserialize_sequence_char+0x26>
 800e010:	2001      	movs	r0, #1
 800e012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e016:	7d21      	ldrb	r1, [r4, #20]
 800e018:	463a      	mov	r2, r7
 800e01a:	4620      	mov	r0, r4
 800e01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e020:	f7ff beda 	b.w	800ddd8 <ucdr_deserialize_endian_array_char>

0800e024 <ucdr_serialize_sequence_uint8_t>:
 800e024:	b570      	push	{r4, r5, r6, lr}
 800e026:	4615      	mov	r5, r2
 800e028:	460e      	mov	r6, r1
 800e02a:	7d01      	ldrb	r1, [r0, #20]
 800e02c:	4604      	mov	r4, r0
 800e02e:	f7fa fc15 	bl	800885c <ucdr_serialize_endian_uint32_t>
 800e032:	b90d      	cbnz	r5, 800e038 <ucdr_serialize_sequence_uint8_t+0x14>
 800e034:	2001      	movs	r0, #1
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	7d21      	ldrb	r1, [r4, #20]
 800e03a:	462b      	mov	r3, r5
 800e03c:	4632      	mov	r2, r6
 800e03e:	4620      	mov	r0, r4
 800e040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e044:	f7ff bf2c 	b.w	800dea0 <ucdr_serialize_endian_array_uint8_t>

0800e048 <ucdr_deserialize_sequence_uint8_t>:
 800e048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e04c:	461d      	mov	r5, r3
 800e04e:	4616      	mov	r6, r2
 800e050:	460f      	mov	r7, r1
 800e052:	461a      	mov	r2, r3
 800e054:	7d01      	ldrb	r1, [r0, #20]
 800e056:	4604      	mov	r4, r0
 800e058:	f7fa fd28 	bl	8008aac <ucdr_deserialize_endian_uint32_t>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	429e      	cmp	r6, r3
 800e060:	bf3c      	itt	cc
 800e062:	2201      	movcc	r2, #1
 800e064:	75a2      	strbcc	r2, [r4, #22]
 800e066:	b913      	cbnz	r3, 800e06e <ucdr_deserialize_sequence_uint8_t+0x26>
 800e068:	2001      	movs	r0, #1
 800e06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e06e:	7d21      	ldrb	r1, [r4, #20]
 800e070:	463a      	mov	r2, r7
 800e072:	4620      	mov	r0, r4
 800e074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e078:	f7ff bf76 	b.w	800df68 <ucdr_deserialize_endian_array_uint8_t>

0800e07c <ucdr_serialize_string>:
 800e07c:	b510      	push	{r4, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	4604      	mov	r4, r0
 800e082:	4608      	mov	r0, r1
 800e084:	9101      	str	r1, [sp, #4]
 800e086:	f7f2 f8b5 	bl	80001f4 <strlen>
 800e08a:	9901      	ldr	r1, [sp, #4]
 800e08c:	1c42      	adds	r2, r0, #1
 800e08e:	4620      	mov	r0, r4
 800e090:	b002      	add	sp, #8
 800e092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e096:	f7ff bf99 	b.w	800dfcc <ucdr_serialize_sequence_char>
 800e09a:	bf00      	nop

0800e09c <ucdr_deserialize_string>:
 800e09c:	b500      	push	{lr}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	ab01      	add	r3, sp, #4
 800e0a2:	f7ff ffa5 	bl	800dff0 <ucdr_deserialize_sequence_char>
 800e0a6:	b003      	add	sp, #12
 800e0a8:	f85d fb04 	ldr.w	pc, [sp], #4

0800e0ac <get_custom_error>:
 800e0ac:	4b01      	ldr	r3, [pc, #4]	; (800e0b4 <get_custom_error+0x8>)
 800e0ae:	7818      	ldrb	r0, [r3, #0]
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	2000daf8 	.word	0x2000daf8

0800e0b8 <recv_custom_msg>:
 800e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	4693      	mov	fp, r2
 800e0be:	b089      	sub	sp, #36	; 0x24
 800e0c0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	468a      	mov	sl, r1
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	f88d 101e 	strb.w	r1, [sp, #30]
 800e0d0:	b322      	cbz	r2, 800e11c <recv_custom_msg+0x64>
 800e0d2:	f200 2902 	addw	r9, r0, #514	; 0x202
 800e0d6:	f10d 081f 	add.w	r8, sp, #31
 800e0da:	af05      	add	r7, sp, #20
 800e0dc:	f10d 061e 	add.w	r6, sp, #30
 800e0e0:	f44f 7500 	mov.w	r5, #512	; 0x200
 800e0e4:	e002      	b.n	800e0ec <recv_custom_msg+0x34>
 800e0e6:	9b05      	ldr	r3, [sp, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	dd0f      	ble.n	800e10c <recv_custom_msg+0x54>
 800e0ec:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800e0f0:	4623      	mov	r3, r4
 800e0f2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e0f6:	e9cd 5600 	strd	r5, r6, [sp]
 800e0fa:	4622      	mov	r2, r4
 800e0fc:	4648      	mov	r0, r9
 800e0fe:	f001 f8f3 	bl	800f2e8 <uxr_read_framed_msg>
 800e102:	2800      	cmp	r0, #0
 800e104:	d0ef      	beq.n	800e0e6 <recv_custom_msg+0x2e>
 800e106:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e10a:	b1b3      	cbz	r3, 800e13a <recv_custom_msg+0x82>
 800e10c:	4b0f      	ldr	r3, [pc, #60]	; (800e14c <recv_custom_msg+0x94>)
 800e10e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e112:	701a      	strb	r2, [r3, #0]
 800e114:	2000      	movs	r0, #0
 800e116:	b009      	add	sp, #36	; 0x24
 800e118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11c:	f10d 021f 	add.w	r2, sp, #31
 800e120:	9200      	str	r2, [sp, #0]
 800e122:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800e126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e12a:	4601      	mov	r1, r0
 800e12c:	47a8      	blx	r5
 800e12e:	2800      	cmp	r0, #0
 800e130:	d0ec      	beq.n	800e10c <recv_custom_msg+0x54>
 800e132:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1e8      	bne.n	800e10c <recv_custom_msg+0x54>
 800e13a:	f8cb 0000 	str.w	r0, [fp]
 800e13e:	2001      	movs	r0, #1
 800e140:	f8ca 4000 	str.w	r4, [sl]
 800e144:	b009      	add	sp, #36	; 0x24
 800e146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14a:	bf00      	nop
 800e14c:	2000daf8 	.word	0x2000daf8

0800e150 <send_custom_msg>:
 800e150:	b530      	push	{r4, r5, lr}
 800e152:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 800e156:	b087      	sub	sp, #28
 800e158:	4615      	mov	r5, r2
 800e15a:	b974      	cbnz	r4, 800e17a <send_custom_msg+0x2a>
 800e15c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800e160:	f10d 0317 	add.w	r3, sp, #23
 800e164:	47a0      	blx	r4
 800e166:	b108      	cbz	r0, 800e16c <send_custom_msg+0x1c>
 800e168:	42a8      	cmp	r0, r5
 800e16a:	d015      	beq.n	800e198 <send_custom_msg+0x48>
 800e16c:	4b0c      	ldr	r3, [pc, #48]	; (800e1a0 <send_custom_msg+0x50>)
 800e16e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e172:	701a      	strb	r2, [r3, #0]
 800e174:	2000      	movs	r0, #0
 800e176:	b007      	add	sp, #28
 800e178:	bd30      	pop	{r4, r5, pc}
 800e17a:	460b      	mov	r3, r1
 800e17c:	2200      	movs	r2, #0
 800e17e:	f10d 0117 	add.w	r1, sp, #23
 800e182:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e186:	4602      	mov	r2, r0
 800e188:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800e18c:	9500      	str	r5, [sp, #0]
 800e18e:	f200 2002 	addw	r0, r0, #514	; 0x202
 800e192:	f000 feb1 	bl	800eef8 <uxr_write_framed_msg>
 800e196:	e7e6      	b.n	800e166 <send_custom_msg+0x16>
 800e198:	2001      	movs	r0, #1
 800e19a:	b007      	add	sp, #28
 800e19c:	bd30      	pop	{r4, r5, pc}
 800e19e:	bf00      	nop
 800e1a0:	2000daf8 	.word	0x2000daf8

0800e1a4 <uxr_set_custom_transport_callbacks>:
 800e1a4:	b410      	push	{r4}
 800e1a6:	9c01      	ldr	r4, [sp, #4]
 800e1a8:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 800e1ac:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800e1b0:	9b02      	ldr	r3, [sp, #8]
 800e1b2:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800e1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1ba:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 800e1be:	4770      	bx	lr

0800e1c0 <uxr_init_custom_transport>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800e1c6:	b303      	cbz	r3, 800e20a <uxr_init_custom_transport+0x4a>
 800e1c8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	b1e2      	cbz	r2, 800e20a <uxr_init_custom_transport+0x4a>
 800e1d0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800e1d4:	b1ca      	cbz	r2, 800e20a <uxr_init_custom_transport+0x4a>
 800e1d6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800e1da:	b1b2      	cbz	r2, 800e20a <uxr_init_custom_transport+0x4a>
 800e1dc:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800e1e0:	4798      	blx	r3
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	b188      	cbz	r0, 800e20a <uxr_init_custom_transport+0x4a>
 800e1e6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800e1ea:	b98b      	cbnz	r3, 800e210 <uxr_init_custom_transport+0x50>
 800e1ec:	490b      	ldr	r1, [pc, #44]	; (800e21c <uxr_init_custom_transport+0x5c>)
 800e1ee:	4b0c      	ldr	r3, [pc, #48]	; (800e220 <uxr_init_custom_transport+0x60>)
 800e1f0:	4a0c      	ldr	r2, [pc, #48]	; (800e224 <uxr_init_custom_transport+0x64>)
 800e1f2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800e1f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1fa:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800e1fe:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800e202:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800e206:	4628      	mov	r0, r5
 800e208:	bd38      	pop	{r3, r4, r5, pc}
 800e20a:	2500      	movs	r5, #0
 800e20c:	4628      	mov	r0, r5
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	2100      	movs	r1, #0
 800e212:	f204 2002 	addw	r0, r4, #514	; 0x202
 800e216:	f000 fe69 	bl	800eeec <uxr_init_framing_io>
 800e21a:	e7e7      	b.n	800e1ec <uxr_init_custom_transport+0x2c>
 800e21c:	0800e151 	.word	0x0800e151
 800e220:	0800e0b9 	.word	0x0800e0b9
 800e224:	0800e0ad 	.word	0x0800e0ad

0800e228 <uxr_close_custom_transport>:
 800e228:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800e22c:	4718      	bx	r3
 800e22e:	bf00      	nop

0800e230 <uxr_init_input_best_effort_stream>:
 800e230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e234:	8003      	strh	r3, [r0, #0]
 800e236:	4770      	bx	lr

0800e238 <uxr_reset_input_best_effort_stream>:
 800e238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e23c:	8003      	strh	r3, [r0, #0]
 800e23e:	4770      	bx	lr

0800e240 <uxr_receive_best_effort_message>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4604      	mov	r4, r0
 800e244:	8800      	ldrh	r0, [r0, #0]
 800e246:	460d      	mov	r5, r1
 800e248:	f000 fe38 	bl	800eebc <uxr_seq_num_cmp>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800e254:	bfb8      	it	lt
 800e256:	8025      	strhlt	r5, [r4, #0]
 800e258:	bd38      	pop	{r3, r4, r5, pc}
 800e25a:	bf00      	nop

0800e25c <on_full_input_buffer>:
 800e25c:	b570      	push	{r4, r5, r6, lr}
 800e25e:	4605      	mov	r5, r0
 800e260:	460c      	mov	r4, r1
 800e262:	682b      	ldr	r3, [r5, #0]
 800e264:	6809      	ldr	r1, [r1, #0]
 800e266:	8920      	ldrh	r0, [r4, #8]
 800e268:	6862      	ldr	r2, [r4, #4]
 800e26a:	fbb2 f2f0 	udiv	r2, r2, r0
 800e26e:	eba3 0c01 	sub.w	ip, r3, r1
 800e272:	fbbc fcf2 	udiv	ip, ip, r2
 800e276:	f10c 0c01 	add.w	ip, ip, #1
 800e27a:	fa1f f38c 	uxth.w	r3, ip
 800e27e:	fbb3 f6f0 	udiv	r6, r3, r0
 800e282:	fb00 3316 	mls	r3, r0, r6, r3
 800e286:	b29b      	uxth	r3, r3
 800e288:	fb02 f303 	mul.w	r3, r2, r3
 800e28c:	1d18      	adds	r0, r3, #4
 800e28e:	4408      	add	r0, r1
 800e290:	7d26      	ldrb	r6, [r4, #20]
 800e292:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e296:	b116      	cbz	r6, 800e29e <on_full_input_buffer+0x42>
 800e298:	2600      	movs	r6, #0
 800e29a:	f840 6c04 	str.w	r6, [r0, #-4]
 800e29e:	2a03      	cmp	r2, #3
 800e2a0:	d801      	bhi.n	800e2a6 <on_full_input_buffer+0x4a>
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	bd70      	pop	{r4, r5, r6, pc}
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	4419      	add	r1, r3
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	692b      	ldr	r3, [r5, #16]
 800e2ae:	3a04      	subs	r2, #4
 800e2b0:	f7fa ffca 	bl	8009248 <ucdr_init_buffer_origin>
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	4903      	ldr	r1, [pc, #12]	; (800e2c4 <on_full_input_buffer+0x68>)
 800e2b8:	4622      	mov	r2, r4
 800e2ba:	f7fa ffa1 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	bd70      	pop	{r4, r5, r6, pc}
 800e2c2:	bf00      	nop
 800e2c4:	0800e25d 	.word	0x0800e25d

0800e2c8 <uxr_init_input_reliable_stream>:
 800e2c8:	b500      	push	{lr}
 800e2ca:	e9c0 1200 	strd	r1, r2, [r0]
 800e2ce:	f04f 0e00 	mov.w	lr, #0
 800e2d2:	9a01      	ldr	r2, [sp, #4]
 800e2d4:	8103      	strh	r3, [r0, #8]
 800e2d6:	6102      	str	r2, [r0, #16]
 800e2d8:	f880 e014 	strb.w	lr, [r0, #20]
 800e2dc:	b1d3      	cbz	r3, 800e314 <uxr_init_input_reliable_stream+0x4c>
 800e2de:	f8c1 e000 	str.w	lr, [r1]
 800e2e2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e2e6:	f1bc 0f01 	cmp.w	ip, #1
 800e2ea:	d913      	bls.n	800e314 <uxr_init_input_reliable_stream+0x4c>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	fbb3 f1fc 	udiv	r1, r3, ip
 800e2f2:	fb0c 3111 	mls	r1, ip, r1, r3
 800e2f6:	b289      	uxth	r1, r1
 800e2f8:	6842      	ldr	r2, [r0, #4]
 800e2fa:	fbb2 f2fc 	udiv	r2, r2, ip
 800e2fe:	fb01 f202 	mul.w	r2, r1, r2
 800e302:	6801      	ldr	r1, [r0, #0]
 800e304:	f841 e002 	str.w	lr, [r1, r2]
 800e308:	3301      	adds	r3, #1
 800e30a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e30e:	b29b      	uxth	r3, r3
 800e310:	459c      	cmp	ip, r3
 800e312:	d8ec      	bhi.n	800e2ee <uxr_init_input_reliable_stream+0x26>
 800e314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e318:	60c3      	str	r3, [r0, #12]
 800e31a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e31e:	bf00      	nop

0800e320 <uxr_reset_input_reliable_stream>:
 800e320:	8901      	ldrh	r1, [r0, #8]
 800e322:	b1e9      	cbz	r1, 800e360 <uxr_reset_input_reliable_stream+0x40>
 800e324:	f04f 0c00 	mov.w	ip, #0
 800e328:	b500      	push	{lr}
 800e32a:	4663      	mov	r3, ip
 800e32c:	46e6      	mov	lr, ip
 800e32e:	fbb3 f2f1 	udiv	r2, r3, r1
 800e332:	fb01 3312 	mls	r3, r1, r2, r3
 800e336:	b29b      	uxth	r3, r3
 800e338:	6842      	ldr	r2, [r0, #4]
 800e33a:	fbb2 f2f1 	udiv	r2, r2, r1
 800e33e:	fb02 f303 	mul.w	r3, r2, r3
 800e342:	6802      	ldr	r2, [r0, #0]
 800e344:	f842 e003 	str.w	lr, [r2, r3]
 800e348:	f10c 0c01 	add.w	ip, ip, #1
 800e34c:	8901      	ldrh	r1, [r0, #8]
 800e34e:	fa1f f38c 	uxth.w	r3, ip
 800e352:	4299      	cmp	r1, r3
 800e354:	d8eb      	bhi.n	800e32e <uxr_reset_input_reliable_stream+0xe>
 800e356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e35a:	60c3      	str	r3, [r0, #12]
 800e35c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e364:	60c3      	str	r3, [r0, #12]
 800e366:	4770      	bx	lr

0800e368 <uxr_receive_reliable_message>:
 800e368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e36c:	4604      	mov	r4, r0
 800e36e:	460d      	mov	r5, r1
 800e370:	8901      	ldrh	r1, [r0, #8]
 800e372:	8980      	ldrh	r0, [r0, #12]
 800e374:	4690      	mov	r8, r2
 800e376:	461f      	mov	r7, r3
 800e378:	f000 fd98 	bl	800eeac <uxr_seq_num_add>
 800e37c:	4629      	mov	r1, r5
 800e37e:	4606      	mov	r6, r0
 800e380:	89a0      	ldrh	r0, [r4, #12]
 800e382:	f000 fd9b 	bl	800eebc <uxr_seq_num_cmp>
 800e386:	2800      	cmp	r0, #0
 800e388:	db0a      	blt.n	800e3a0 <uxr_receive_reliable_message+0x38>
 800e38a:	2600      	movs	r6, #0
 800e38c:	89e0      	ldrh	r0, [r4, #14]
 800e38e:	4629      	mov	r1, r5
 800e390:	f000 fd94 	bl	800eebc <uxr_seq_num_cmp>
 800e394:	2800      	cmp	r0, #0
 800e396:	da00      	bge.n	800e39a <uxr_receive_reliable_message+0x32>
 800e398:	81e5      	strh	r5, [r4, #14]
 800e39a:	4630      	mov	r0, r6
 800e39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	f000 fd8a 	bl	800eebc <uxr_seq_num_cmp>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	dbee      	blt.n	800e38a <uxr_receive_reliable_message+0x22>
 800e3ac:	6923      	ldr	r3, [r4, #16]
 800e3ae:	4640      	mov	r0, r8
 800e3b0:	4798      	blx	r3
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	4681      	mov	r9, r0
 800e3b6:	89a0      	ldrh	r0, [r4, #12]
 800e3b8:	f000 fd78 	bl	800eeac <uxr_seq_num_add>
 800e3bc:	f1b9 0f00 	cmp.w	r9, #0
 800e3c0:	d101      	bne.n	800e3c6 <uxr_receive_reliable_message+0x5e>
 800e3c2:	4285      	cmp	r5, r0
 800e3c4:	d047      	beq.n	800e456 <uxr_receive_reliable_message+0xee>
 800e3c6:	8922      	ldrh	r2, [r4, #8]
 800e3c8:	fbb5 f0f2 	udiv	r0, r5, r2
 800e3cc:	fb02 5010 	mls	r0, r2, r0, r5
 800e3d0:	b280      	uxth	r0, r0
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3d8:	fb00 f303 	mul.w	r3, r0, r3
 800e3dc:	6820      	ldr	r0, [r4, #0]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4418      	add	r0, r3
 800e3e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1cf      	bne.n	800e38a <uxr_receive_reliable_message+0x22>
 800e3ea:	4641      	mov	r1, r8
 800e3ec:	463a      	mov	r2, r7
 800e3ee:	f002 fb08 	bl	8010a02 <memcpy>
 800e3f2:	8921      	ldrh	r1, [r4, #8]
 800e3f4:	fbb5 f2f1 	udiv	r2, r5, r1
 800e3f8:	fb01 5212 	mls	r2, r1, r2, r5
 800e3fc:	b292      	uxth	r2, r2
 800e3fe:	6863      	ldr	r3, [r4, #4]
 800e400:	fbb3 f3f1 	udiv	r3, r3, r1
 800e404:	fb02 f303 	mul.w	r3, r2, r3
 800e408:	6822      	ldr	r2, [r4, #0]
 800e40a:	50d7      	str	r7, [r2, r3]
 800e40c:	9a08      	ldr	r2, [sp, #32]
 800e40e:	2301      	movs	r3, #1
 800e410:	7013      	strb	r3, [r2, #0]
 800e412:	f1b9 0f00 	cmp.w	r9, #0
 800e416:	d0b8      	beq.n	800e38a <uxr_receive_reliable_message+0x22>
 800e418:	89a6      	ldrh	r6, [r4, #12]
 800e41a:	4630      	mov	r0, r6
 800e41c:	2101      	movs	r1, #1
 800e41e:	f000 fd45 	bl	800eeac <uxr_seq_num_add>
 800e422:	8922      	ldrh	r2, [r4, #8]
 800e424:	6863      	ldr	r3, [r4, #4]
 800e426:	fbb3 f3f2 	udiv	r3, r3, r2
 800e42a:	4606      	mov	r6, r0
 800e42c:	fbb0 f0f2 	udiv	r0, r0, r2
 800e430:	fb02 6010 	mls	r0, r2, r0, r6
 800e434:	b280      	uxth	r0, r0
 800e436:	fb00 f303 	mul.w	r3, r0, r3
 800e43a:	6820      	ldr	r0, [r4, #0]
 800e43c:	3304      	adds	r3, #4
 800e43e:	4418      	add	r0, r3
 800e440:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d0a0      	beq.n	800e38a <uxr_receive_reliable_message+0x22>
 800e448:	6923      	ldr	r3, [r4, #16]
 800e44a:	4798      	blx	r3
 800e44c:	2802      	cmp	r0, #2
 800e44e:	d008      	beq.n	800e462 <uxr_receive_reliable_message+0xfa>
 800e450:	2801      	cmp	r0, #1
 800e452:	d0e2      	beq.n	800e41a <uxr_receive_reliable_message+0xb2>
 800e454:	e799      	b.n	800e38a <uxr_receive_reliable_message+0x22>
 800e456:	9b08      	ldr	r3, [sp, #32]
 800e458:	81a5      	strh	r5, [r4, #12]
 800e45a:	2601      	movs	r6, #1
 800e45c:	f883 9000 	strb.w	r9, [r3]
 800e460:	e794      	b.n	800e38c <uxr_receive_reliable_message+0x24>
 800e462:	2601      	movs	r6, #1
 800e464:	e792      	b.n	800e38c <uxr_receive_reliable_message+0x24>
 800e466:	bf00      	nop

0800e468 <uxr_next_input_reliable_buffer_available>:
 800e468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e46c:	4604      	mov	r4, r0
 800e46e:	460f      	mov	r7, r1
 800e470:	8980      	ldrh	r0, [r0, #12]
 800e472:	2101      	movs	r1, #1
 800e474:	4690      	mov	r8, r2
 800e476:	f000 fd19 	bl	800eeac <uxr_seq_num_add>
 800e47a:	8922      	ldrh	r2, [r4, #8]
 800e47c:	fbb0 f6f2 	udiv	r6, r0, r2
 800e480:	fb02 0616 	mls	r6, r2, r6, r0
 800e484:	b2b6      	uxth	r6, r6
 800e486:	6863      	ldr	r3, [r4, #4]
 800e488:	fbb3 f3f2 	udiv	r3, r3, r2
 800e48c:	fb06 f303 	mul.w	r3, r6, r3
 800e490:	6826      	ldr	r6, [r4, #0]
 800e492:	3304      	adds	r3, #4
 800e494:	441e      	add	r6, r3
 800e496:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800e49a:	f1b9 0f00 	cmp.w	r9, #0
 800e49e:	d023      	beq.n	800e4e8 <uxr_next_input_reliable_buffer_available+0x80>
 800e4a0:	6923      	ldr	r3, [r4, #16]
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4798      	blx	r3
 800e4a8:	4682      	mov	sl, r0
 800e4aa:	b300      	cbz	r0, 800e4ee <uxr_next_input_reliable_buffer_available+0x86>
 800e4ac:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800e4b0:	2101      	movs	r1, #1
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	f000 fcfa 	bl	800eeac <uxr_seq_num_add>
 800e4b8:	8921      	ldrh	r1, [r4, #8]
 800e4ba:	fbb0 f2f1 	udiv	r2, r0, r1
 800e4be:	4682      	mov	sl, r0
 800e4c0:	fb01 0212 	mls	r2, r1, r2, r0
 800e4c4:	e9d4 0300 	ldrd	r0, r3, [r4]
 800e4c8:	b292      	uxth	r2, r2
 800e4ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4ce:	fb02 f303 	mul.w	r3, r2, r3
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	4418      	add	r0, r3
 800e4d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e4da:	b12b      	cbz	r3, 800e4e8 <uxr_next_input_reliable_buffer_available+0x80>
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	4798      	blx	r3
 800e4e0:	2802      	cmp	r0, #2
 800e4e2:	d01b      	beq.n	800e51c <uxr_next_input_reliable_buffer_available+0xb4>
 800e4e4:	2801      	cmp	r0, #1
 800e4e6:	d0e3      	beq.n	800e4b0 <uxr_next_input_reliable_buffer_available+0x48>
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ee:	464a      	mov	r2, r9
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	f7fa feb0 	bl	8009258 <ucdr_init_buffer>
 800e4f8:	8921      	ldrh	r1, [r4, #8]
 800e4fa:	fbb5 f2f1 	udiv	r2, r5, r1
 800e4fe:	fb01 5212 	mls	r2, r1, r2, r5
 800e502:	b292      	uxth	r2, r2
 800e504:	6863      	ldr	r3, [r4, #4]
 800e506:	fbb3 f3f1 	udiv	r3, r3, r1
 800e50a:	fb02 f303 	mul.w	r3, r2, r3
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	f842 a003 	str.w	sl, [r2, r3]
 800e514:	2001      	movs	r0, #1
 800e516:	81a5      	strh	r5, [r4, #12]
 800e518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e51c:	8920      	ldrh	r0, [r4, #8]
 800e51e:	fbb5 f3f0 	udiv	r3, r5, r0
 800e522:	fb00 5513 	mls	r5, r0, r3, r5
 800e526:	b2ad      	uxth	r5, r5
 800e528:	6863      	ldr	r3, [r4, #4]
 800e52a:	fbb3 f3f0 	udiv	r3, r3, r0
 800e52e:	fb03 f505 	mul.w	r5, r3, r5
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	2000      	movs	r0, #0
 800e536:	5158      	str	r0, [r3, r5]
 800e538:	eb06 0108 	add.w	r1, r6, r8
 800e53c:	eba9 0208 	sub.w	r2, r9, r8
 800e540:	4638      	mov	r0, r7
 800e542:	f7fa fe89 	bl	8009258 <ucdr_init_buffer>
 800e546:	4638      	mov	r0, r7
 800e548:	4903      	ldr	r1, [pc, #12]	; (800e558 <uxr_next_input_reliable_buffer_available+0xf0>)
 800e54a:	4622      	mov	r2, r4
 800e54c:	f7fa fe58 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800e550:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800e554:	2001      	movs	r0, #1
 800e556:	e7c8      	b.n	800e4ea <uxr_next_input_reliable_buffer_available+0x82>
 800e558:	0800e25d 	.word	0x0800e25d

0800e55c <uxr_process_heartbeat>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	4611      	mov	r1, r2
 800e560:	4604      	mov	r4, r0
 800e562:	89c0      	ldrh	r0, [r0, #14]
 800e564:	4615      	mov	r5, r2
 800e566:	f000 fca9 	bl	800eebc <uxr_seq_num_cmp>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	bfb8      	it	lt
 800e56e:	81e5      	strhlt	r5, [r4, #14]
 800e570:	bd38      	pop	{r3, r4, r5, pc}
 800e572:	bf00      	nop

0800e574 <uxr_compute_acknack>:
 800e574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e578:	8903      	ldrh	r3, [r0, #8]
 800e57a:	8985      	ldrh	r5, [r0, #12]
 800e57c:	4604      	mov	r4, r0
 800e57e:	460e      	mov	r6, r1
 800e580:	b1d3      	cbz	r3, 800e5b8 <uxr_compute_acknack+0x44>
 800e582:	4628      	mov	r0, r5
 800e584:	2701      	movs	r7, #1
 800e586:	e003      	b.n	800e590 <uxr_compute_acknack+0x1c>
 800e588:	4567      	cmp	r7, ip
 800e58a:	d215      	bcs.n	800e5b8 <uxr_compute_acknack+0x44>
 800e58c:	89a0      	ldrh	r0, [r4, #12]
 800e58e:	3701      	adds	r7, #1
 800e590:	b2b9      	uxth	r1, r7
 800e592:	f000 fc8b 	bl	800eeac <uxr_seq_num_add>
 800e596:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e59a:	fbb0 f3fc 	udiv	r3, r0, ip
 800e59e:	fb0c 0313 	mls	r3, ip, r3, r0
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	e9d4 1300 	ldrd	r1, r3, [r4]
 800e5a8:	fbb3 f3fc 	udiv	r3, r3, ip
 800e5ac:	fb02 f303 	mul.w	r3, r2, r3
 800e5b0:	58cb      	ldr	r3, [r1, r3]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1e8      	bne.n	800e588 <uxr_compute_acknack+0x14>
 800e5b6:	4605      	mov	r5, r0
 800e5b8:	8035      	strh	r5, [r6, #0]
 800e5ba:	2101      	movs	r1, #1
 800e5bc:	4628      	mov	r0, r5
 800e5be:	89e7      	ldrh	r7, [r4, #14]
 800e5c0:	f000 fc78 	bl	800eeb4 <uxr_seq_num_sub>
 800e5c4:	4601      	mov	r1, r0
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f000 fc74 	bl	800eeb4 <uxr_seq_num_sub>
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	b318      	cbz	r0, 800e618 <uxr_compute_acknack+0xa4>
 800e5d0:	f04f 0900 	mov.w	r9, #0
 800e5d4:	464f      	mov	r7, r9
 800e5d6:	f04f 0801 	mov.w	r8, #1
 800e5da:	fa1f f189 	uxth.w	r1, r9
 800e5de:	8830      	ldrh	r0, [r6, #0]
 800e5e0:	f000 fc64 	bl	800eeac <uxr_seq_num_add>
 800e5e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e5e8:	fbb0 f3fc 	udiv	r3, r0, ip
 800e5ec:	e9d4 1200 	ldrd	r1, r2, [r4]
 800e5f0:	fb03 001c 	mls	r0, r3, ip, r0
 800e5f4:	b283      	uxth	r3, r0
 800e5f6:	fbb2 f2fc 	udiv	r2, r2, ip
 800e5fa:	fb02 f303 	mul.w	r3, r2, r3
 800e5fe:	fa08 f209 	lsl.w	r2, r8, r9
 800e602:	58cb      	ldr	r3, [r1, r3]
 800e604:	f109 0901 	add.w	r9, r9, #1
 800e608:	b90b      	cbnz	r3, 800e60e <uxr_compute_acknack+0x9a>
 800e60a:	4317      	orrs	r7, r2
 800e60c:	b2bf      	uxth	r7, r7
 800e60e:	454d      	cmp	r5, r9
 800e610:	d1e3      	bne.n	800e5da <uxr_compute_acknack+0x66>
 800e612:	4638      	mov	r0, r7
 800e614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e618:	4607      	mov	r7, r0
 800e61a:	4638      	mov	r0, r7
 800e61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e620 <uxr_init_output_best_effort_stream>:
 800e620:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800e624:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800e628:	6001      	str	r1, [r0, #0]
 800e62a:	7303      	strb	r3, [r0, #12]
 800e62c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop

0800e634 <uxr_reset_output_best_effort_stream>:
 800e634:	7b02      	ldrb	r2, [r0, #12]
 800e636:	6042      	str	r2, [r0, #4]
 800e638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e63c:	81c3      	strh	r3, [r0, #14]
 800e63e:	4770      	bx	lr

0800e640 <uxr_prepare_best_effort_buffer_to_write>:
 800e640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e642:	4604      	mov	r4, r0
 800e644:	b083      	sub	sp, #12
 800e646:	6840      	ldr	r0, [r0, #4]
 800e648:	460d      	mov	r5, r1
 800e64a:	4616      	mov	r6, r2
 800e64c:	f7fc f9ce 	bl	800a9ec <uxr_submessage_padding>
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	4418      	add	r0, r3
 800e654:	68a3      	ldr	r3, [r4, #8]
 800e656:	1942      	adds	r2, r0, r5
 800e658:	4293      	cmp	r3, r2
 800e65a:	bf2c      	ite	cs
 800e65c:	2701      	movcs	r7, #1
 800e65e:	2700      	movcc	r7, #0
 800e660:	d202      	bcs.n	800e668 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800e662:	4638      	mov	r0, r7
 800e664:	b003      	add	sp, #12
 800e666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e668:	9000      	str	r0, [sp, #0]
 800e66a:	6821      	ldr	r1, [r4, #0]
 800e66c:	4630      	mov	r0, r6
 800e66e:	2300      	movs	r3, #0
 800e670:	f7fa fde0 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800e674:	6861      	ldr	r1, [r4, #4]
 800e676:	4638      	mov	r0, r7
 800e678:	4429      	add	r1, r5
 800e67a:	6061      	str	r1, [r4, #4]
 800e67c:	b003      	add	sp, #12
 800e67e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e680 <uxr_prepare_best_effort_buffer_to_send>:
 800e680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e684:	4604      	mov	r4, r0
 800e686:	461d      	mov	r5, r3
 800e688:	6840      	ldr	r0, [r0, #4]
 800e68a:	7b23      	ldrb	r3, [r4, #12]
 800e68c:	4298      	cmp	r0, r3
 800e68e:	bf8c      	ite	hi
 800e690:	2601      	movhi	r6, #1
 800e692:	2600      	movls	r6, #0
 800e694:	d802      	bhi.n	800e69c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800e696:	4630      	mov	r0, r6
 800e698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e69c:	4688      	mov	r8, r1
 800e69e:	89e0      	ldrh	r0, [r4, #14]
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	4617      	mov	r7, r2
 800e6a4:	f000 fc02 	bl	800eeac <uxr_seq_num_add>
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	81e0      	strh	r0, [r4, #14]
 800e6ac:	8028      	strh	r0, [r5, #0]
 800e6ae:	f8c8 3000 	str.w	r3, [r8]
 800e6b2:	6863      	ldr	r3, [r4, #4]
 800e6b4:	603b      	str	r3, [r7, #0]
 800e6b6:	7b23      	ldrb	r3, [r4, #12]
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e6c0 <on_full_output_buffer>:
 800e6c0:	b538      	push	{r3, r4, r5, lr}
 800e6c2:	6802      	ldr	r2, [r0, #0]
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	6809      	ldr	r1, [r1, #0]
 800e6c8:	8923      	ldrh	r3, [r4, #8]
 800e6ca:	eba2 0c01 	sub.w	ip, r2, r1
 800e6ce:	6862      	ldr	r2, [r4, #4]
 800e6d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800e6d4:	fbbc fcf2 	udiv	ip, ip, r2
 800e6d8:	f10c 0c01 	add.w	ip, ip, #1
 800e6dc:	fa1f fc8c 	uxth.w	ip, ip
 800e6e0:	fbbc fef3 	udiv	lr, ip, r3
 800e6e4:	fb03 c31e 	mls	r3, r3, lr, ip
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	fb02 f303 	mul.w	r3, r2, r3
 800e6ee:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800e6f2:	58ca      	ldr	r2, [r1, r3]
 800e6f4:	4463      	add	r3, ip
 800e6f6:	eba2 020c 	sub.w	r2, r2, ip
 800e6fa:	3308      	adds	r3, #8
 800e6fc:	4605      	mov	r5, r0
 800e6fe:	4419      	add	r1, r3
 800e700:	3a04      	subs	r2, #4
 800e702:	6903      	ldr	r3, [r0, #16]
 800e704:	f7fa fda0 	bl	8009248 <ucdr_init_buffer_origin>
 800e708:	4628      	mov	r0, r5
 800e70a:	4903      	ldr	r1, [pc, #12]	; (800e718 <on_full_output_buffer+0x58>)
 800e70c:	4622      	mov	r2, r4
 800e70e:	f7fa fd77 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800e712:	2000      	movs	r0, #0
 800e714:	bd38      	pop	{r3, r4, r5, pc}
 800e716:	bf00      	nop
 800e718:	0800e6c1 	.word	0x0800e6c1

0800e71c <uxr_init_output_reliable_stream>:
 800e71c:	b410      	push	{r4}
 800e71e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e722:	8103      	strh	r3, [r0, #8]
 800e724:	e9c0 1200 	strd	r1, r2, [r0]
 800e728:	f880 c00c 	strb.w	ip, [r0, #12]
 800e72c:	b1d3      	cbz	r3, 800e764 <uxr_init_output_reliable_stream+0x48>
 800e72e:	f8c1 c000 	str.w	ip, [r1]
 800e732:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e736:	f1bc 0f01 	cmp.w	ip, #1
 800e73a:	d913      	bls.n	800e764 <uxr_init_output_reliable_stream+0x48>
 800e73c:	2301      	movs	r3, #1
 800e73e:	fbb3 f1fc 	udiv	r1, r3, ip
 800e742:	fb0c 3111 	mls	r1, ip, r1, r3
 800e746:	b289      	uxth	r1, r1
 800e748:	6842      	ldr	r2, [r0, #4]
 800e74a:	6804      	ldr	r4, [r0, #0]
 800e74c:	fbb2 f2fc 	udiv	r2, r2, ip
 800e750:	fb01 f202 	mul.w	r2, r1, r2
 800e754:	7b01      	ldrb	r1, [r0, #12]
 800e756:	50a1      	str	r1, [r4, r2]
 800e758:	3301      	adds	r3, #1
 800e75a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e75e:	b29b      	uxth	r3, r3
 800e760:	459c      	cmp	ip, r3
 800e762:	d8ec      	bhi.n	800e73e <uxr_init_output_reliable_stream+0x22>
 800e764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e768:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e76c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e770:	4905      	ldr	r1, [pc, #20]	; (800e788 <uxr_init_output_reliable_stream+0x6c>)
 800e772:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e776:	f8c0 100e 	str.w	r1, [r0, #14]
 800e77a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e77e:	2300      	movs	r3, #0
 800e780:	8242      	strh	r2, [r0, #18]
 800e782:	8403      	strh	r3, [r0, #32]
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	ffff0000 	.word	0xffff0000

0800e78c <uxr_reset_output_reliable_stream>:
 800e78c:	8901      	ldrh	r1, [r0, #8]
 800e78e:	b1b1      	cbz	r1, 800e7be <uxr_reset_output_reliable_stream+0x32>
 800e790:	f04f 0c00 	mov.w	ip, #0
 800e794:	4663      	mov	r3, ip
 800e796:	fbb3 f2f1 	udiv	r2, r3, r1
 800e79a:	fb01 3312 	mls	r3, r1, r2, r3
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	6842      	ldr	r2, [r0, #4]
 800e7a2:	fbb2 f2f1 	udiv	r2, r2, r1
 800e7a6:	6801      	ldr	r1, [r0, #0]
 800e7a8:	fb02 f303 	mul.w	r3, r2, r3
 800e7ac:	7b02      	ldrb	r2, [r0, #12]
 800e7ae:	50ca      	str	r2, [r1, r3]
 800e7b0:	f10c 0c01 	add.w	ip, ip, #1
 800e7b4:	8901      	ldrh	r1, [r0, #8]
 800e7b6:	fa1f f38c 	uxth.w	r3, ip
 800e7ba:	4299      	cmp	r1, r3
 800e7bc:	d8eb      	bhi.n	800e796 <uxr_reset_output_reliable_stream+0xa>
 800e7be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e7c6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e7ca:	4904      	ldr	r1, [pc, #16]	; (800e7dc <uxr_reset_output_reliable_stream+0x50>)
 800e7cc:	f8c0 100e 	str.w	r1, [r0, #14]
 800e7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	8242      	strh	r2, [r0, #18]
 800e7d8:	8403      	strh	r3, [r0, #32]
 800e7da:	4770      	bx	lr
 800e7dc:	ffff0000 	.word	0xffff0000

0800e7e0 <uxr_prepare_reliable_buffer_to_write>:
 800e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	4604      	mov	r4, r0
 800e7e6:	b091      	sub	sp, #68	; 0x44
 800e7e8:	8900      	ldrh	r0, [r0, #8]
 800e7ea:	89e6      	ldrh	r6, [r4, #14]
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	9204      	str	r2, [sp, #16]
 800e7f0:	fbb6 f2f0 	udiv	r2, r6, r0
 800e7f4:	fb00 6212 	mls	r2, r0, r2, r6
 800e7f8:	b292      	uxth	r2, r2
 800e7fa:	6865      	ldr	r5, [r4, #4]
 800e7fc:	fbb5 f5f0 	udiv	r5, r5, r0
 800e800:	fb05 3202 	mla	r2, r5, r2, r3
 800e804:	3204      	adds	r2, #4
 800e806:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800e80a:	f894 900c 	ldrb.w	r9, [r4, #12]
 800e80e:	9203      	str	r2, [sp, #12]
 800e810:	468b      	mov	fp, r1
 800e812:	1f2f      	subs	r7, r5, #4
 800e814:	2800      	cmp	r0, #0
 800e816:	f000 814c 	beq.w	800eab2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800e81a:	f04f 0c00 	mov.w	ip, #0
 800e81e:	46e2      	mov	sl, ip
 800e820:	4661      	mov	r1, ip
 800e822:	fbb1 f2f0 	udiv	r2, r1, r0
 800e826:	fb00 1212 	mls	r2, r0, r2, r1
 800e82a:	b292      	uxth	r2, r2
 800e82c:	fb05 f202 	mul.w	r2, r5, r2
 800e830:	f10c 0c01 	add.w	ip, ip, #1
 800e834:	589a      	ldr	r2, [r3, r2]
 800e836:	454a      	cmp	r2, r9
 800e838:	bf08      	it	eq
 800e83a:	f10a 0a01 	addeq.w	sl, sl, #1
 800e83e:	fa1f f18c 	uxth.w	r1, ip
 800e842:	bf08      	it	eq
 800e844:	fa1f fa8a 	uxtheq.w	sl, sl
 800e848:	4281      	cmp	r1, r0
 800e84a:	d3ea      	bcc.n	800e822 <uxr_prepare_reliable_buffer_to_write+0x42>
 800e84c:	4640      	mov	r0, r8
 800e84e:	2104      	movs	r1, #4
 800e850:	f8cd a014 	str.w	sl, [sp, #20]
 800e854:	f7fa fd04 	bl	8009260 <ucdr_alignment>
 800e858:	4480      	add	r8, r0
 800e85a:	eb08 020b 	add.w	r2, r8, fp
 800e85e:	42ba      	cmp	r2, r7
 800e860:	f240 80cd 	bls.w	800e9fe <uxr_prepare_reliable_buffer_to_write+0x21e>
 800e864:	7b22      	ldrb	r2, [r4, #12]
 800e866:	445a      	add	r2, fp
 800e868:	42ba      	cmp	r2, r7
 800e86a:	f240 80b5 	bls.w	800e9d8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800e86e:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 800e872:	33fc      	adds	r3, #252	; 0xfc
 800e874:	b2ba      	uxth	r2, r7
 800e876:	4413      	add	r3, r2
 800e878:	b29b      	uxth	r3, r3
 800e87a:	fb0a f903 	mul.w	r9, sl, r3
 800e87e:	45d9      	cmp	r9, fp
 800e880:	9305      	str	r3, [sp, #20]
 800e882:	9306      	str	r3, [sp, #24]
 800e884:	f0c0 80b7 	bcc.w	800e9f6 <uxr_prepare_reliable_buffer_to_write+0x216>
 800e888:	f108 0304 	add.w	r3, r8, #4
 800e88c:	42bb      	cmp	r3, r7
 800e88e:	f080 80db 	bcs.w	800ea48 <uxr_prepare_reliable_buffer_to_write+0x268>
 800e892:	f1a2 0904 	sub.w	r9, r2, #4
 800e896:	eba9 0908 	sub.w	r9, r9, r8
 800e89a:	9b05      	ldr	r3, [sp, #20]
 800e89c:	fa1f f989 	uxth.w	r9, r9
 800e8a0:	ebab 0b09 	sub.w	fp, fp, r9
 800e8a4:	fbbb f2f3 	udiv	r2, fp, r3
 800e8a8:	fb03 b312 	mls	r3, r3, r2, fp
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 80c8 	beq.w	800ea42 <uxr_prepare_reliable_buffer_to_write+0x262>
 800e8b2:	3201      	adds	r2, #1
 800e8b4:	b292      	uxth	r2, r2
 800e8b6:	9306      	str	r3, [sp, #24]
 800e8b8:	4552      	cmp	r2, sl
 800e8ba:	f200 809c 	bhi.w	800e9f6 <uxr_prepare_reliable_buffer_to_write+0x216>
 800e8be:	f10d 0b20 	add.w	fp, sp, #32
 800e8c2:	2a00      	cmp	r2, #0
 800e8c4:	d042      	beq.n	800e94c <uxr_prepare_reliable_buffer_to_write+0x16c>
 800e8c6:	f8cd 801c 	str.w	r8, [sp, #28]
 800e8ca:	f04f 0a00 	mov.w	sl, #0
 800e8ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e8d2:	9505      	str	r5, [sp, #20]
 800e8d4:	f10d 0b20 	add.w	fp, sp, #32
 800e8d8:	4615      	mov	r5, r2
 800e8da:	e000      	b.n	800e8de <uxr_prepare_reliable_buffer_to_write+0xfe>
 800e8dc:	46c1      	mov	r9, r8
 800e8de:	8920      	ldrh	r0, [r4, #8]
 800e8e0:	fbb6 f2f0 	udiv	r2, r6, r0
 800e8e4:	fb00 6112 	mls	r1, r0, r2, r6
 800e8e8:	b28a      	uxth	r2, r1
 800e8ea:	6863      	ldr	r3, [r4, #4]
 800e8ec:	fbb3 f1f0 	udiv	r1, r3, r0
 800e8f0:	6823      	ldr	r3, [r4, #0]
 800e8f2:	fb02 f101 	mul.w	r1, r2, r1
 800e8f6:	3104      	adds	r1, #4
 800e8f8:	4419      	add	r1, r3
 800e8fa:	4658      	mov	r0, fp
 800e8fc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800e900:	9200      	str	r2, [sp, #0]
 800e902:	2300      	movs	r3, #0
 800e904:	463a      	mov	r2, r7
 800e906:	f7fa fc95 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800e90a:	464a      	mov	r2, r9
 800e90c:	2300      	movs	r3, #0
 800e90e:	210d      	movs	r1, #13
 800e910:	4658      	mov	r0, fp
 800e912:	f7fc f82b 	bl	800a96c <uxr_buffer_submessage_header>
 800e916:	8921      	ldrh	r1, [r4, #8]
 800e918:	fbb6 f2f1 	udiv	r2, r6, r1
 800e91c:	fb01 6212 	mls	r2, r1, r2, r6
 800e920:	b292      	uxth	r2, r2
 800e922:	6863      	ldr	r3, [r4, #4]
 800e924:	fbb3 f3f1 	udiv	r3, r3, r1
 800e928:	fb02 f303 	mul.w	r3, r2, r3
 800e92c:	6822      	ldr	r2, [r4, #0]
 800e92e:	4630      	mov	r0, r6
 800e930:	50d7      	str	r7, [r2, r3]
 800e932:	2101      	movs	r1, #1
 800e934:	f000 faba 	bl	800eeac <uxr_seq_num_add>
 800e938:	f10a 0a01 	add.w	sl, sl, #1
 800e93c:	fa1f f38a 	uxth.w	r3, sl
 800e940:	429d      	cmp	r5, r3
 800e942:	4606      	mov	r6, r0
 800e944:	d8ca      	bhi.n	800e8dc <uxr_prepare_reliable_buffer_to_write+0xfc>
 800e946:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e94a:	9d05      	ldr	r5, [sp, #20]
 800e94c:	8920      	ldrh	r0, [r4, #8]
 800e94e:	fbb6 f3f0 	udiv	r3, r6, r0
 800e952:	fb00 6313 	mls	r3, r0, r3, r6
 800e956:	b299      	uxth	r1, r3
 800e958:	6863      	ldr	r3, [r4, #4]
 800e95a:	fbb3 f3f0 	udiv	r3, r3, r0
 800e95e:	fb01 f303 	mul.w	r3, r1, r3
 800e962:	6821      	ldr	r1, [r4, #0]
 800e964:	3304      	adds	r3, #4
 800e966:	4419      	add	r1, r3
 800e968:	463a      	mov	r2, r7
 800e96a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800e96e:	9000      	str	r0, [sp, #0]
 800e970:	2300      	movs	r3, #0
 800e972:	4658      	mov	r0, fp
 800e974:	f7fa fc5e 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800e978:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800e97c:	4658      	mov	r0, fp
 800e97e:	fa1f f289 	uxth.w	r2, r9
 800e982:	2302      	movs	r3, #2
 800e984:	210d      	movs	r1, #13
 800e986:	f7fb fff1 	bl	800a96c <uxr_buffer_submessage_header>
 800e98a:	9b03      	ldr	r3, [sp, #12]
 800e98c:	8927      	ldrh	r7, [r4, #8]
 800e98e:	7b20      	ldrb	r0, [r4, #12]
 800e990:	f108 0104 	add.w	r1, r8, #4
 800e994:	440b      	add	r3, r1
 800e996:	4619      	mov	r1, r3
 800e998:	fbb6 f3f7 	udiv	r3, r6, r7
 800e99c:	fb07 6313 	mls	r3, r7, r3, r6
 800e9a0:	f1a5 0208 	sub.w	r2, r5, #8
 800e9a4:	b29d      	uxth	r5, r3
 800e9a6:	3004      	adds	r0, #4
 800e9a8:	6863      	ldr	r3, [r4, #4]
 800e9aa:	fbb3 f3f7 	udiv	r3, r3, r7
 800e9ae:	fb05 f303 	mul.w	r3, r5, r3
 800e9b2:	6825      	ldr	r5, [r4, #0]
 800e9b4:	4448      	add	r0, r9
 800e9b6:	50e8      	str	r0, [r5, r3]
 800e9b8:	9d04      	ldr	r5, [sp, #16]
 800e9ba:	eba2 0208 	sub.w	r2, r2, r8
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f7fa fc4a 	bl	8009258 <ucdr_init_buffer>
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	493c      	ldr	r1, [pc, #240]	; (800eab8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800e9c8:	4622      	mov	r2, r4
 800e9ca:	f7fa fc19 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	81e6      	strh	r6, [r4, #14]
 800e9d2:	b011      	add	sp, #68	; 0x44
 800e9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d8:	2101      	movs	r1, #1
 800e9da:	89e0      	ldrh	r0, [r4, #14]
 800e9dc:	f000 fa66 	bl	800eeac <uxr_seq_num_add>
 800e9e0:	8921      	ldrh	r1, [r4, #8]
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	8a60      	ldrh	r0, [r4, #18]
 800e9e6:	f000 fa61 	bl	800eeac <uxr_seq_num_add>
 800e9ea:	4601      	mov	r1, r0
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f000 fa65 	bl	800eebc <uxr_seq_num_cmp>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	dd42      	ble.n	800ea7c <uxr_prepare_reliable_buffer_to_write+0x29c>
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	b011      	add	sp, #68	; 0x44
 800e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fe:	8921      	ldrh	r1, [r4, #8]
 800ea00:	8a60      	ldrh	r0, [r4, #18]
 800ea02:	9205      	str	r2, [sp, #20]
 800ea04:	f000 fa52 	bl	800eeac <uxr_seq_num_add>
 800ea08:	4601      	mov	r1, r0
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	f000 fa56 	bl	800eebc <uxr_seq_num_cmp>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	9a05      	ldr	r2, [sp, #20]
 800ea14:	dcef      	bgt.n	800e9f6 <uxr_prepare_reliable_buffer_to_write+0x216>
 800ea16:	8927      	ldrh	r7, [r4, #8]
 800ea18:	fbb6 f3f7 	udiv	r3, r6, r7
 800ea1c:	fb07 6313 	mls	r3, r7, r3, r6
 800ea20:	b29d      	uxth	r5, r3
 800ea22:	6863      	ldr	r3, [r4, #4]
 800ea24:	6824      	ldr	r4, [r4, #0]
 800ea26:	fbb3 f3f7 	udiv	r3, r3, r7
 800ea2a:	fb05 f303 	mul.w	r3, r5, r3
 800ea2e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800ea32:	50e2      	str	r2, [r4, r3]
 800ea34:	2300      	movs	r3, #0
 800ea36:	f8cd 8000 	str.w	r8, [sp]
 800ea3a:	f7fa fbfb 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800ea3e:	2001      	movs	r0, #1
 800ea40:	e7da      	b.n	800e9f8 <uxr_prepare_reliable_buffer_to_write+0x218>
 800ea42:	b293      	uxth	r3, r2
 800ea44:	461a      	mov	r2, r3
 800ea46:	e737      	b.n	800e8b8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800ea48:	4630      	mov	r0, r6
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	9207      	str	r2, [sp, #28]
 800ea4e:	f000 fa2d 	bl	800eeac <uxr_seq_num_add>
 800ea52:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800ea56:	fbb0 f1fc 	udiv	r1, r0, ip
 800ea5a:	fb0c 0111 	mls	r1, ip, r1, r0
 800ea5e:	4606      	mov	r6, r0
 800ea60:	b288      	uxth	r0, r1
 800ea62:	6863      	ldr	r3, [r4, #4]
 800ea64:	fbb3 f1fc 	udiv	r1, r3, ip
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	9a07      	ldr	r2, [sp, #28]
 800ea6c:	fb00 f101 	mul.w	r1, r0, r1
 800ea70:	3104      	adds	r1, #4
 800ea72:	440b      	add	r3, r1
 800ea74:	9303      	str	r3, [sp, #12]
 800ea76:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800ea7a:	e70a      	b.n	800e892 <uxr_prepare_reliable_buffer_to_write+0xb2>
 800ea7c:	8921      	ldrh	r1, [r4, #8]
 800ea7e:	fbb5 f3f1 	udiv	r3, r5, r1
 800ea82:	fb01 5313 	mls	r3, r1, r3, r5
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	6863      	ldr	r3, [r4, #4]
 800ea8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea8e:	6821      	ldr	r1, [r4, #0]
 800ea90:	9804      	ldr	r0, [sp, #16]
 800ea92:	fb02 f303 	mul.w	r3, r2, r3
 800ea96:	3304      	adds	r3, #4
 800ea98:	7b22      	ldrb	r2, [r4, #12]
 800ea9a:	4419      	add	r1, r3
 800ea9c:	445a      	add	r2, fp
 800ea9e:	f841 2c04 	str.w	r2, [r1, #-4]
 800eaa2:	7b23      	ldrb	r3, [r4, #12]
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	f7fa fbc4 	bl	8009234 <ucdr_init_buffer_origin_offset>
 800eaac:	81e5      	strh	r5, [r4, #14]
 800eaae:	2001      	movs	r0, #1
 800eab0:	e7a2      	b.n	800e9f8 <uxr_prepare_reliable_buffer_to_write+0x218>
 800eab2:	4682      	mov	sl, r0
 800eab4:	e6ca      	b.n	800e84c <uxr_prepare_reliable_buffer_to_write+0x6c>
 800eab6:	bf00      	nop
 800eab8:	0800e6c1 	.word	0x0800e6c1

0800eabc <uxr_prepare_next_reliable_buffer_to_send>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	4604      	mov	r4, r0
 800eac0:	460f      	mov	r7, r1
 800eac2:	8a00      	ldrh	r0, [r0, #16]
 800eac4:	2101      	movs	r1, #1
 800eac6:	4616      	mov	r6, r2
 800eac8:	461d      	mov	r5, r3
 800eaca:	f000 f9ef 	bl	800eeac <uxr_seq_num_add>
 800eace:	8028      	strh	r0, [r5, #0]
 800ead0:	8922      	ldrh	r2, [r4, #8]
 800ead2:	fbb0 f3f2 	udiv	r3, r0, r2
 800ead6:	fb02 0c13 	mls	ip, r2, r3, r0
 800eada:	fa1f fc8c 	uxth.w	ip, ip
 800eade:	6863      	ldr	r3, [r4, #4]
 800eae0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eae4:	fb0c fc03 	mul.w	ip, ip, r3
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	89e1      	ldrh	r1, [r4, #14]
 800eaec:	f10c 0c04 	add.w	ip, ip, #4
 800eaf0:	4463      	add	r3, ip
 800eaf2:	603b      	str	r3, [r7, #0]
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	449c      	add	ip, r3
 800eaf8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800eafc:	6033      	str	r3, [r6, #0]
 800eafe:	f000 f9dd 	bl	800eebc <uxr_seq_num_cmp>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	dd01      	ble.n	800eb0a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800eb06:	2000      	movs	r0, #0
 800eb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb0a:	7b23      	ldrb	r3, [r4, #12]
 800eb0c:	6832      	ldr	r2, [r6, #0]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d9f9      	bls.n	800eb06 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800eb12:	8a61      	ldrh	r1, [r4, #18]
 800eb14:	8a20      	ldrh	r0, [r4, #16]
 800eb16:	f000 f9cd 	bl	800eeb4 <uxr_seq_num_sub>
 800eb1a:	8923      	ldrh	r3, [r4, #8]
 800eb1c:	4283      	cmp	r3, r0
 800eb1e:	d0f2      	beq.n	800eb06 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800eb20:	8828      	ldrh	r0, [r5, #0]
 800eb22:	89e3      	ldrh	r3, [r4, #14]
 800eb24:	8220      	strh	r0, [r4, #16]
 800eb26:	4298      	cmp	r0, r3
 800eb28:	d001      	beq.n	800eb2e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800eb2a:	2001      	movs	r0, #1
 800eb2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb2e:	2101      	movs	r1, #1
 800eb30:	f000 f9bc 	bl	800eeac <uxr_seq_num_add>
 800eb34:	81e0      	strh	r0, [r4, #14]
 800eb36:	2001      	movs	r0, #1
 800eb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb3a:	bf00      	nop

0800eb3c <uxr_update_output_stream_heartbeat_timestamp>:
 800eb3c:	b570      	push	{r4, r5, r6, lr}
 800eb3e:	8a01      	ldrh	r1, [r0, #16]
 800eb40:	4604      	mov	r4, r0
 800eb42:	8a40      	ldrh	r0, [r0, #18]
 800eb44:	4615      	mov	r5, r2
 800eb46:	461e      	mov	r6, r3
 800eb48:	f000 f9b8 	bl	800eebc <uxr_seq_num_cmp>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	db07      	blt.n	800eb60 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800eb50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb54:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800eb58:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}
 800eb60:	f894 0020 	ldrb.w	r0, [r4, #32]
 800eb64:	b940      	cbnz	r0, 800eb78 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800eb66:	2301      	movs	r3, #1
 800eb68:	f884 3020 	strb.w	r3, [r4, #32]
 800eb6c:	3564      	adds	r5, #100	; 0x64
 800eb6e:	f146 0600 	adc.w	r6, r6, #0
 800eb72:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800eb76:	bd70      	pop	{r4, r5, r6, pc}
 800eb78:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800eb7c:	4295      	cmp	r5, r2
 800eb7e:	eb76 0303 	sbcs.w	r3, r6, r3
 800eb82:	bfa5      	ittet	ge
 800eb84:	3001      	addge	r0, #1
 800eb86:	f884 0020 	strbge.w	r0, [r4, #32]
 800eb8a:	2000      	movlt	r0, #0
 800eb8c:	2001      	movge	r0, #1
 800eb8e:	e7ed      	b.n	800eb6c <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800eb90 <uxr_begin_output_nack_buffer_it>:
 800eb90:	8a40      	ldrh	r0, [r0, #18]
 800eb92:	4770      	bx	lr

0800eb94 <uxr_next_reliable_nack_buffer_to_send>:
 800eb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb98:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 800eb9c:	b082      	sub	sp, #8
 800eb9e:	f1b8 0f00 	cmp.w	r8, #0
 800eba2:	d011      	beq.n	800ebc8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800eba4:	4604      	mov	r4, r0
 800eba6:	8818      	ldrh	r0, [r3, #0]
 800eba8:	460e      	mov	r6, r1
 800ebaa:	4617      	mov	r7, r2
 800ebac:	461d      	mov	r5, r3
 800ebae:	2101      	movs	r1, #1
 800ebb0:	f000 f97c 	bl	800eeac <uxr_seq_num_add>
 800ebb4:	8028      	strh	r0, [r5, #0]
 800ebb6:	8a21      	ldrh	r1, [r4, #16]
 800ebb8:	f000 f980 	bl	800eebc <uxr_seq_num_cmp>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	dd07      	ble.n	800ebd0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800ebc0:	f04f 0800 	mov.w	r8, #0
 800ebc4:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 800ebc8:	4640      	mov	r0, r8
 800ebca:	b002      	add	sp, #8
 800ebcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd0:	8921      	ldrh	r1, [r4, #8]
 800ebd2:	8828      	ldrh	r0, [r5, #0]
 800ebd4:	6823      	ldr	r3, [r4, #0]
 800ebd6:	fbb0 f2f1 	udiv	r2, r0, r1
 800ebda:	fb01 0c12 	mls	ip, r1, r2, r0
 800ebde:	fa1f f28c 	uxth.w	r2, ip
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	6863      	ldr	r3, [r4, #4]
 800ebe6:	fbb3 fcf1 	udiv	ip, r3, r1
 800ebea:	9b01      	ldr	r3, [sp, #4]
 800ebec:	fb02 fc0c 	mul.w	ip, r2, ip
 800ebf0:	f10c 0c04 	add.w	ip, ip, #4
 800ebf4:	4463      	add	r3, ip
 800ebf6:	6033      	str	r3, [r6, #0]
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	4463      	add	r3, ip
 800ebfc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ec00:	603b      	str	r3, [r7, #0]
 800ec02:	7b22      	ldrb	r2, [r4, #12]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d0d2      	beq.n	800ebae <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800ec08:	4640      	mov	r0, r8
 800ec0a:	b002      	add	sp, #8
 800ec0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec10 <uxr_process_acknack>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	4604      	mov	r4, r0
 800ec14:	460e      	mov	r6, r1
 800ec16:	4610      	mov	r0, r2
 800ec18:	2101      	movs	r1, #1
 800ec1a:	f000 f94b 	bl	800eeb4 <uxr_seq_num_sub>
 800ec1e:	8a61      	ldrh	r1, [r4, #18]
 800ec20:	f000 f948 	bl	800eeb4 <uxr_seq_num_sub>
 800ec24:	b1c0      	cbz	r0, 800ec58 <uxr_process_acknack+0x48>
 800ec26:	4605      	mov	r5, r0
 800ec28:	2700      	movs	r7, #0
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	8a60      	ldrh	r0, [r4, #18]
 800ec2e:	f000 f93d 	bl	800eeac <uxr_seq_num_add>
 800ec32:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800ec36:	fbb0 f1fc 	udiv	r1, r0, ip
 800ec3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec3e:	fb0c 0111 	mls	r1, ip, r1, r0
 800ec42:	b289      	uxth	r1, r1
 800ec44:	3701      	adds	r7, #1
 800ec46:	fbb3 f3fc 	udiv	r3, r3, ip
 800ec4a:	fb01 f303 	mul.w	r3, r1, r3
 800ec4e:	42bd      	cmp	r5, r7
 800ec50:	7b21      	ldrb	r1, [r4, #12]
 800ec52:	8260      	strh	r0, [r4, #18]
 800ec54:	50d1      	str	r1, [r2, r3]
 800ec56:	d1e8      	bne.n	800ec2a <uxr_process_acknack+0x1a>
 800ec58:	3e00      	subs	r6, #0
 800ec5a:	f04f 0300 	mov.w	r3, #0
 800ec5e:	bf18      	it	ne
 800ec60:	2601      	movne	r6, #1
 800ec62:	f884 3020 	strb.w	r3, [r4, #32]
 800ec66:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 800ec6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec6c <uxr_is_output_up_to_date>:
 800ec6c:	8a01      	ldrh	r1, [r0, #16]
 800ec6e:	8a40      	ldrh	r0, [r0, #18]
 800ec70:	b508      	push	{r3, lr}
 800ec72:	f000 f923 	bl	800eebc <uxr_seq_num_cmp>
 800ec76:	fab0 f080 	clz	r0, r0
 800ec7a:	0940      	lsrs	r0, r0, #5
 800ec7c:	bd08      	pop	{r3, pc}
 800ec7e:	bf00      	nop

0800ec80 <get_available_free_slots>:
 800ec80:	8902      	ldrh	r2, [r0, #8]
 800ec82:	b1da      	cbz	r2, 800ecbc <get_available_free_slots+0x3c>
 800ec84:	b530      	push	{r4, r5, lr}
 800ec86:	2100      	movs	r1, #0
 800ec88:	6843      	ldr	r3, [r0, #4]
 800ec8a:	6805      	ldr	r5, [r0, #0]
 800ec8c:	7b04      	ldrb	r4, [r0, #12]
 800ec8e:	fbb3 fef2 	udiv	lr, r3, r2
 800ec92:	4608      	mov	r0, r1
 800ec94:	460b      	mov	r3, r1
 800ec96:	fbb3 fcf2 	udiv	ip, r3, r2
 800ec9a:	fb02 331c 	mls	r3, r2, ip, r3
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	fb0e f303 	mul.w	r3, lr, r3
 800eca4:	3101      	adds	r1, #1
 800eca6:	f855 c003 	ldr.w	ip, [r5, r3]
 800ecaa:	4564      	cmp	r4, ip
 800ecac:	bf08      	it	eq
 800ecae:	3001      	addeq	r0, #1
 800ecb0:	b28b      	uxth	r3, r1
 800ecb2:	bf08      	it	eq
 800ecb4:	b280      	uxtheq	r0, r0
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d3ed      	bcc.n	800ec96 <get_available_free_slots+0x16>
 800ecba:	bd30      	pop	{r4, r5, pc}
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	4770      	bx	lr

0800ecc0 <uxr_buffer_cancel_data>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	b094      	sub	sp, #80	; 0x50
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9202      	str	r2, [sp, #8]
 800ecc8:	9205      	str	r2, [sp, #20]
 800ecca:	9301      	str	r3, [sp, #4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ecd2:	f88d 301e 	strb.w	r3, [sp, #30]
 800ecd6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800ecda:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800ecde:	2308      	movs	r3, #8
 800ece0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	2210      	movs	r2, #16
 800ece8:	ab0c      	add	r3, sp, #48	; 0x30
 800ecea:	4604      	mov	r4, r0
 800ecec:	9103      	str	r1, [sp, #12]
 800ecee:	f7fb fb9f 	bl	800a430 <uxr_prepare_stream_to_write_submessage>
 800ecf2:	b918      	cbnz	r0, 800ecfc <uxr_buffer_cancel_data+0x3c>
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	b014      	add	sp, #80	; 0x50
 800ecfa:	bd10      	pop	{r4, pc}
 800ecfc:	9905      	ldr	r1, [sp, #20]
 800ecfe:	aa06      	add	r2, sp, #24
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7fb fccb 	bl	800a69c <uxr_init_base_object_request>
 800ed06:	a906      	add	r1, sp, #24
 800ed08:	4604      	mov	r4, r0
 800ed0a:	a80c      	add	r0, sp, #48	; 0x30
 800ed0c:	f7fc feda 	bl	800bac4 <uxr_serialize_READ_DATA_Payload>
 800ed10:	4620      	mov	r0, r4
 800ed12:	b014      	add	sp, #80	; 0x50
 800ed14:	bd10      	pop	{r4, pc}
 800ed16:	bf00      	nop

0800ed18 <read_submessage_format>:
 800ed18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed1c:	b095      	sub	sp, #84	; 0x54
 800ed1e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800ed22:	b113      	cbz	r3, 800ed2a <read_submessage_format+0x12>
 800ed24:	b015      	add	sp, #84	; 0x54
 800ed26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	4615      	mov	r5, r2
 800ed2e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ed32:	4607      	mov	r7, r0
 800ed34:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ed36:	9004      	str	r0, [sp, #16]
 800ed38:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ed3a:	9005      	str	r0, [sp, #20]
 800ed3c:	1a52      	subs	r2, r2, r1
 800ed3e:	a80c      	add	r0, sp, #48	; 0x30
 800ed40:	4699      	mov	r9, r3
 800ed42:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800ed46:	f7fa fa87 	bl	8009258 <ucdr_init_buffer>
 800ed4a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ed4e:	a80c      	add	r0, sp, #48	; 0x30
 800ed50:	f7fa fa56 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800ed54:	69e2      	ldr	r2, [r4, #28]
 800ed56:	b19a      	cbz	r2, 800ed80 <read_submessage_format+0x68>
 800ed58:	f1b8 0f07 	cmp.w	r8, #7
 800ed5c:	f882 9014 	strb.w	r9, [r2, #20]
 800ed60:	d040      	beq.n	800ede4 <read_submessage_format+0xcc>
 800ed62:	f1b8 0f08 	cmp.w	r8, #8
 800ed66:	d02e      	beq.n	800edc6 <read_submessage_format+0xae>
 800ed68:	f1b8 0f06 	cmp.w	r8, #6
 800ed6c:	d011      	beq.n	800ed92 <read_submessage_format+0x7a>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	7513      	strb	r3, [r2, #20]
 800ed72:	4629      	mov	r1, r5
 800ed74:	4620      	mov	r0, r4
 800ed76:	f7fa fabf 	bl	80092f8 <ucdr_advance_buffer>
 800ed7a:	b015      	add	sp, #84	; 0x54
 800ed7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed80:	f1b8 0f07 	cmp.w	r8, #7
 800ed84:	d02e      	beq.n	800ede4 <read_submessage_format+0xcc>
 800ed86:	f1b8 0f08 	cmp.w	r8, #8
 800ed8a:	d01c      	beq.n	800edc6 <read_submessage_format+0xae>
 800ed8c:	f1b8 0f06 	cmp.w	r8, #6
 800ed90:	d1ef      	bne.n	800ed72 <read_submessage_format+0x5a>
 800ed92:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 800ed96:	f1b8 0f00 	cmp.w	r8, #0
 800ed9a:	d011      	beq.n	800edc0 <read_submessage_format+0xa8>
 800ed9c:	ab0c      	add	r3, sp, #48	; 0x30
 800ed9e:	e9cd 3500 	strd	r3, r5, [sp]
 800eda2:	2306      	movs	r3, #6
 800eda4:	f88d 3016 	strb.w	r3, [sp, #22]
 800eda8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800edac:	9302      	str	r3, [sp, #8]
 800edae:	4632      	mov	r2, r6
 800edb0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800edb4:	4638      	mov	r0, r7
 800edb6:	47c0      	blx	r8
 800edb8:	2301      	movs	r3, #1
 800edba:	69e2      	ldr	r2, [r4, #28]
 800edbc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800edc0:	2a00      	cmp	r2, #0
 800edc2:	d1d4      	bne.n	800ed6e <read_submessage_format+0x56>
 800edc4:	e7d5      	b.n	800ed72 <read_submessage_format+0x5a>
 800edc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d0f8      	beq.n	800edc0 <read_submessage_format+0xa8>
 800edce:	a906      	add	r1, sp, #24
 800edd0:	a80c      	add	r0, sp, #48	; 0x30
 800edd2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800edd6:	f7fc ff15 	bl	800bc04 <uxr_deserialize_SampleIdentity>
 800edda:	b9a0      	cbnz	r0, 800ee06 <read_submessage_format+0xee>
 800eddc:	69e2      	ldr	r2, [r4, #28]
 800edde:	2a00      	cmp	r2, #0
 800ede0:	d1c5      	bne.n	800ed6e <read_submessage_format+0x56>
 800ede2:	e7c6      	b.n	800ed72 <read_submessage_format+0x5a>
 800ede4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ede8:	b13b      	cbz	r3, 800edfa <read_submessage_format+0xe2>
 800edea:	a906      	add	r1, sp, #24
 800edec:	a80c      	add	r0, sp, #48	; 0x30
 800edee:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800edf2:	f7fc fc01 	bl	800b5f8 <uxr_deserialize_BaseObjectRequest>
 800edf6:	bb60      	cbnz	r0, 800ee52 <read_submessage_format+0x13a>
 800edf8:	69e2      	ldr	r2, [r4, #28]
 800edfa:	68a3      	ldr	r3, [r4, #8]
 800edfc:	442b      	add	r3, r5
 800edfe:	60a3      	str	r3, [r4, #8]
 800ee00:	2a00      	cmp	r2, #0
 800ee02:	d1b4      	bne.n	800ed6e <read_submessage_format+0x56>
 800ee04:	e7b5      	b.n	800ed72 <read_submessage_format+0x5a>
 800ee06:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ee0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee0c:	1a52      	subs	r2, r2, r1
 800ee0e:	eba8 0803 	sub.w	r8, r8, r3
 800ee12:	a80c      	add	r0, sp, #48	; 0x30
 800ee14:	f7fa fa20 	bl	8009258 <ucdr_init_buffer>
 800ee18:	44a8      	add	r8, r5
 800ee1a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ee1e:	a80c      	add	r0, sp, #48	; 0x30
 800ee20:	f7fa f9ee 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800ee24:	fa1f f888 	uxth.w	r8, r8
 800ee28:	ab0c      	add	r3, sp, #48	; 0x30
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	f8cd 8004 	str.w	r8, [sp, #4]
 800ee30:	2108      	movs	r1, #8
 800ee32:	f88d 1016 	strb.w	r1, [sp, #22]
 800ee36:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800ee3a:	9102      	str	r1, [sp, #8]
 800ee3c:	ab06      	add	r3, sp, #24
 800ee3e:	4632      	mov	r2, r6
 800ee40:	9905      	ldr	r1, [sp, #20]
 800ee42:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800ee46:	4638      	mov	r0, r7
 800ee48:	47b0      	blx	r6
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800ee50:	e7c4      	b.n	800eddc <read_submessage_format+0xc4>
 800ee52:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ee56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee58:	1a52      	subs	r2, r2, r1
 800ee5a:	a80c      	add	r0, sp, #48	; 0x30
 800ee5c:	eba8 0803 	sub.w	r8, r8, r3
 800ee60:	f7fa f9fa 	bl	8009258 <ucdr_init_buffer>
 800ee64:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ee68:	a80c      	add	r0, sp, #48	; 0x30
 800ee6a:	f7fa f9c9 	bl	8009200 <ucdr_set_on_full_buffer_callback>
 800ee6e:	ab0c      	add	r3, sp, #48	; 0x30
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ee76:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ee7a:	44a8      	add	r8, r5
 800ee7c:	fa1f f888 	uxth.w	r8, r8
 800ee80:	f8cd 8004 	str.w	r8, [sp, #4]
 800ee84:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ee88:	2107      	movs	r1, #7
 800ee8a:	f88d 1016 	strb.w	r1, [sp, #22]
 800ee8e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ee92:	9102      	str	r1, [sp, #8]
 800ee94:	4632      	mov	r2, r6
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800ee9c:	9905      	ldr	r1, [sp, #20]
 800ee9e:	4638      	mov	r0, r7
 800eea0:	47b0      	blx	r6
 800eea2:	2301      	movs	r3, #1
 800eea4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800eea8:	e7a6      	b.n	800edf8 <read_submessage_format+0xe0>
 800eeaa:	bf00      	nop

0800eeac <uxr_seq_num_add>:
 800eeac:	4408      	add	r0, r1
 800eeae:	b280      	uxth	r0, r0
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop

0800eeb4 <uxr_seq_num_sub>:
 800eeb4:	1a40      	subs	r0, r0, r1
 800eeb6:	b280      	uxth	r0, r0
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop

0800eebc <uxr_seq_num_cmp>:
 800eebc:	4288      	cmp	r0, r1
 800eebe:	d011      	beq.n	800eee4 <uxr_seq_num_cmp+0x28>
 800eec0:	d309      	bcc.n	800eed6 <uxr_seq_num_cmp+0x1a>
 800eec2:	4288      	cmp	r0, r1
 800eec4:	d910      	bls.n	800eee8 <uxr_seq_num_cmp+0x2c>
 800eec6:	1a40      	subs	r0, r0, r1
 800eec8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800eecc:	bfd4      	ite	le
 800eece:	2001      	movle	r0, #1
 800eed0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 800eed4:	4770      	bx	lr
 800eed6:	1a0b      	subs	r3, r1, r0
 800eed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eedc:	daf1      	bge.n	800eec2 <uxr_seq_num_cmp+0x6>
 800eede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eee2:	4770      	bx	lr
 800eee4:	2000      	movs	r0, #0
 800eee6:	4770      	bx	lr
 800eee8:	2001      	movs	r0, #1
 800eeea:	4770      	bx	lr

0800eeec <uxr_init_framing_io>:
 800eeec:	2300      	movs	r3, #0
 800eeee:	7041      	strb	r1, [r0, #1]
 800eef0:	7003      	strb	r3, [r0, #0]
 800eef2:	8583      	strh	r3, [r0, #44]	; 0x2c
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop

0800eef8 <uxr_write_framed_msg>:
 800eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	4617      	mov	r7, r2
 800eefe:	7842      	ldrb	r2, [r0, #1]
 800ef00:	b083      	sub	sp, #12
 800ef02:	460e      	mov	r6, r1
 800ef04:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 800ef08:	469a      	mov	sl, r3
 800ef0a:	2901      	cmp	r1, #1
 800ef0c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 800ef10:	4604      	mov	r4, r0
 800ef12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800ef16:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800ef1a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 800ef1e:	f240 8137 	bls.w	800f190 <uxr_write_framed_msg+0x298>
 800ef22:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800ef26:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 800ef2a:	2901      	cmp	r1, #1
 800ef2c:	f04f 0202 	mov.w	r2, #2
 800ef30:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ef34:	f240 808f 	bls.w	800f056 <uxr_write_framed_msg+0x15e>
 800ef38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef3a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800ef3e:	b2dd      	uxtb	r5, r3
 800ef40:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800ef44:	2203      	movs	r2, #3
 800ef46:	2901      	cmp	r1, #1
 800ef48:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ef4c:	f240 809a 	bls.w	800f084 <uxr_write_framed_msg+0x18c>
 800ef50:	18a1      	adds	r1, r4, r2
 800ef52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef54:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 800ef58:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ef5c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800ef60:	3201      	adds	r2, #1
 800ef62:	2801      	cmp	r0, #1
 800ef64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ef68:	f240 80a0 	bls.w	800f0ac <uxr_write_framed_msg+0x1b4>
 800ef6c:	18a0      	adds	r0, r4, r2
 800ef6e:	3201      	adds	r2, #1
 800ef70:	b2d2      	uxtb	r2, r2
 800ef72:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800ef76:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 80a9 	beq.w	800f0d2 <uxr_write_framed_msg+0x1da>
 800ef80:	f04f 0900 	mov.w	r9, #0
 800ef84:	46c8      	mov	r8, r9
 800ef86:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800ef8a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800ef8e:	2901      	cmp	r1, #1
 800ef90:	f240 80c3 	bls.w	800f11a <uxr_write_framed_msg+0x222>
 800ef94:	2a29      	cmp	r2, #41	; 0x29
 800ef96:	f200 809f 	bhi.w	800f0d8 <uxr_write_framed_msg+0x1e0>
 800ef9a:	18a1      	adds	r1, r4, r2
 800ef9c:	3201      	adds	r2, #1
 800ef9e:	b2d2      	uxtb	r2, r2
 800efa0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 800efa4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800efa8:	ea89 0303 	eor.w	r3, r9, r3
 800efac:	498c      	ldr	r1, [pc, #560]	; (800f1e0 <uxr_write_framed_msg+0x2e8>)
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	f108 0801 	add.w	r8, r8, #1
 800efb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efb8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800efbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efbe:	4543      	cmp	r3, r8
 800efc0:	d8e1      	bhi.n	800ef86 <uxr_write_framed_msg+0x8e>
 800efc2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800efc6:	fa5f f889 	uxtb.w	r8, r9
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	f04f 0900 	mov.w	r9, #0
 800efd0:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 800efd4:	fa5f f18a 	uxtb.w	r1, sl
 800efd8:	2901      	cmp	r1, #1
 800efda:	d921      	bls.n	800f020 <uxr_write_framed_msg+0x128>
 800efdc:	2a29      	cmp	r2, #41	; 0x29
 800efde:	f240 80af 	bls.w	800f140 <uxr_write_framed_msg+0x248>
 800efe2:	2500      	movs	r5, #0
 800efe4:	e000      	b.n	800efe8 <uxr_write_framed_msg+0xf0>
 800efe6:	b160      	cbz	r0, 800f002 <uxr_write_framed_msg+0x10a>
 800efe8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800efec:	1b52      	subs	r2, r2, r5
 800efee:	465b      	mov	r3, fp
 800eff0:	4421      	add	r1, r4
 800eff2:	4638      	mov	r0, r7
 800eff4:	47b0      	blx	r6
 800eff6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800effa:	4405      	add	r5, r0
 800effc:	4295      	cmp	r5, r2
 800effe:	d3f2      	bcc.n	800efe6 <uxr_write_framed_msg+0xee>
 800f000:	d003      	beq.n	800f00a <uxr_write_framed_msg+0x112>
 800f002:	2000      	movs	r0, #0
 800f004:	b003      	add	sp, #12
 800f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00a:	fa5f f18a 	uxtb.w	r1, sl
 800f00e:	f04f 0300 	mov.w	r3, #0
 800f012:	2901      	cmp	r1, #1
 800f014:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800f018:	f04f 0200 	mov.w	r2, #0
 800f01c:	f200 8090 	bhi.w	800f140 <uxr_write_framed_msg+0x248>
 800f020:	1c51      	adds	r1, r2, #1
 800f022:	b2c9      	uxtb	r1, r1
 800f024:	2929      	cmp	r1, #41	; 0x29
 800f026:	d8dc      	bhi.n	800efe2 <uxr_write_framed_msg+0xea>
 800f028:	18a5      	adds	r5, r4, r2
 800f02a:	4421      	add	r1, r4
 800f02c:	3202      	adds	r2, #2
 800f02e:	f088 0820 	eor.w	r8, r8, #32
 800f032:	4648      	mov	r0, r9
 800f034:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800f038:	b2d2      	uxtb	r2, r2
 800f03a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800f03e:	f04f 0901 	mov.w	r9, #1
 800f042:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800f046:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f04a:	2800      	cmp	r0, #0
 800f04c:	f040 8085 	bne.w	800f15a <uxr_write_framed_msg+0x262>
 800f050:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f054:	e7bc      	b.n	800efd0 <uxr_write_framed_msg+0xd8>
 800f056:	4611      	mov	r1, r2
 800f058:	f04f 0c03 	mov.w	ip, #3
 800f05c:	2204      	movs	r2, #4
 800f05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f060:	4421      	add	r1, r4
 800f062:	b2dd      	uxtb	r5, r3
 800f064:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 800f068:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 800f06c:	44a4      	add	ip, r4
 800f06e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800f072:	f080 0020 	eor.w	r0, r0, #32
 800f076:	2901      	cmp	r1, #1
 800f078:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 800f07c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f080:	f63f af66 	bhi.w	800ef50 <uxr_write_framed_msg+0x58>
 800f084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f086:	18a0      	adds	r0, r4, r2
 800f088:	f085 0520 	eor.w	r5, r5, #32
 800f08c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800f090:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f094:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800f098:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 800f09c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800f0a0:	3202      	adds	r2, #2
 800f0a2:	2801      	cmp	r0, #1
 800f0a4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f0a8:	f63f af60 	bhi.w	800ef6c <uxr_write_framed_msg+0x74>
 800f0ac:	1c50      	adds	r0, r2, #1
 800f0ae:	18a5      	adds	r5, r4, r2
 800f0b0:	fa54 f080 	uxtab	r0, r4, r0
 800f0b4:	3202      	adds	r2, #2
 800f0b6:	f081 0120 	eor.w	r1, r1, #32
 800f0ba:	b2d2      	uxtb	r2, r2
 800f0bc:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800f0c0:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 800f0c4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f0c8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f47f af57 	bne.w	800ef80 <uxr_write_framed_msg+0x88>
 800f0d2:	9301      	str	r3, [sp, #4]
 800f0d4:	4698      	mov	r8, r3
 800f0d6:	e779      	b.n	800efcc <uxr_write_framed_msg+0xd4>
 800f0d8:	2500      	movs	r5, #0
 800f0da:	e001      	b.n	800f0e0 <uxr_write_framed_msg+0x1e8>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d090      	beq.n	800f002 <uxr_write_framed_msg+0x10a>
 800f0e0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800f0e4:	1b52      	subs	r2, r2, r5
 800f0e6:	465b      	mov	r3, fp
 800f0e8:	4421      	add	r1, r4
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	47b0      	blx	r6
 800f0ee:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800f0f2:	4405      	add	r5, r0
 800f0f4:	4295      	cmp	r5, r2
 800f0f6:	d3f1      	bcc.n	800f0dc <uxr_write_framed_msg+0x1e4>
 800f0f8:	d183      	bne.n	800f002 <uxr_write_framed_msg+0x10a>
 800f0fa:	f04f 0300 	mov.w	r3, #0
 800f0fe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800f102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f104:	4543      	cmp	r3, r8
 800f106:	d964      	bls.n	800f1d2 <uxr_write_framed_msg+0x2da>
 800f108:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f10c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800f110:	2901      	cmp	r1, #1
 800f112:	f04f 0200 	mov.w	r2, #0
 800f116:	f63f af3d 	bhi.w	800ef94 <uxr_write_framed_msg+0x9c>
 800f11a:	1c51      	adds	r1, r2, #1
 800f11c:	b2c9      	uxtb	r1, r1
 800f11e:	2929      	cmp	r1, #41	; 0x29
 800f120:	d8da      	bhi.n	800f0d8 <uxr_write_framed_msg+0x1e0>
 800f122:	18a0      	adds	r0, r4, r2
 800f124:	4421      	add	r1, r4
 800f126:	f04f 057d 	mov.w	r5, #125	; 0x7d
 800f12a:	3202      	adds	r2, #2
 800f12c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 800f130:	b2d2      	uxtb	r2, r2
 800f132:	f083 0020 	eor.w	r0, r3, #32
 800f136:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800f13a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f13e:	e733      	b.n	800efa8 <uxr_write_framed_msg+0xb0>
 800f140:	18a1      	adds	r1, r4, r2
 800f142:	3201      	adds	r2, #1
 800f144:	4648      	mov	r0, r9
 800f146:	b2d2      	uxtb	r2, r2
 800f148:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800f14c:	f04f 0901 	mov.w	r9, #1
 800f150:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f154:	2800      	cmp	r0, #0
 800f156:	f43f af7b 	beq.w	800f050 <uxr_write_framed_msg+0x158>
 800f15a:	2500      	movs	r5, #0
 800f15c:	e002      	b.n	800f164 <uxr_write_framed_msg+0x26c>
 800f15e:	2800      	cmp	r0, #0
 800f160:	f43f af4f 	beq.w	800f002 <uxr_write_framed_msg+0x10a>
 800f164:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800f168:	1b52      	subs	r2, r2, r5
 800f16a:	465b      	mov	r3, fp
 800f16c:	4421      	add	r1, r4
 800f16e:	4638      	mov	r0, r7
 800f170:	47b0      	blx	r6
 800f172:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800f176:	4405      	add	r5, r0
 800f178:	4295      	cmp	r5, r2
 800f17a:	d3f0      	bcc.n	800f15e <uxr_write_framed_msg+0x266>
 800f17c:	f47f af41 	bne.w	800f002 <uxr_write_framed_msg+0x10a>
 800f180:	2300      	movs	r3, #0
 800f182:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800f186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f188:	b298      	uxth	r0, r3
 800f18a:	b003      	add	sp, #12
 800f18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f190:	217d      	movs	r1, #125	; 0x7d
 800f192:	f082 0220 	eor.w	r2, r2, #32
 800f196:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800f19a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800f19e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800f1a2:	2901      	cmp	r1, #1
 800f1a4:	f04f 0203 	mov.w	r2, #3
 800f1a8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f1ac:	d804      	bhi.n	800f1b8 <uxr_write_framed_msg+0x2c0>
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	f04f 0c04 	mov.w	ip, #4
 800f1b4:	2205      	movs	r2, #5
 800f1b6:	e752      	b.n	800f05e <uxr_write_framed_msg+0x166>
 800f1b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1ba:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800f1be:	b2dd      	uxtb	r5, r3
 800f1c0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800f1c4:	2204      	movs	r2, #4
 800f1c6:	2901      	cmp	r1, #1
 800f1c8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f1cc:	f63f aec0 	bhi.w	800ef50 <uxr_write_framed_msg+0x58>
 800f1d0:	e758      	b.n	800f084 <uxr_write_framed_msg+0x18c>
 800f1d2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f1d6:	fa5f f889 	uxtb.w	r8, r9
 800f1da:	9301      	str	r3, [sp, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	e6f5      	b.n	800efcc <uxr_write_framed_msg+0xd4>
 800f1e0:	08012010 	.word	0x08012010

0800f1e4 <uxr_framing_read_transport>:
 800f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	461f      	mov	r7, r3
 800f1ee:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f1f2:	4689      	mov	r9, r1
 800f1f4:	4692      	mov	sl, r2
 800f1f6:	f7fb fbff 	bl	800a9f8 <uxr_millis>
 800f1fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f1fe:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800f202:	42b3      	cmp	r3, r6
 800f204:	4680      	mov	r8, r0
 800f206:	d061      	beq.n	800f2cc <uxr_framing_read_transport+0xe8>
 800f208:	d81c      	bhi.n	800f244 <uxr_framing_read_transport+0x60>
 800f20a:	1e75      	subs	r5, r6, #1
 800f20c:	1aed      	subs	r5, r5, r3
 800f20e:	b2ed      	uxtb	r5, r5
 800f210:	2600      	movs	r6, #0
 800f212:	455d      	cmp	r5, fp
 800f214:	d81f      	bhi.n	800f256 <uxr_framing_read_transport+0x72>
 800f216:	19ab      	adds	r3, r5, r6
 800f218:	455b      	cmp	r3, fp
 800f21a:	bf84      	itt	hi
 800f21c:	ebab 0605 	subhi.w	r6, fp, r5
 800f220:	b2f6      	uxtbhi	r6, r6
 800f222:	b9ed      	cbnz	r5, 800f260 <uxr_framing_read_transport+0x7c>
 800f224:	f04f 0b00 	mov.w	fp, #0
 800f228:	f7fb fbe6 	bl	800a9f8 <uxr_millis>
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	eba0 0808 	sub.w	r8, r0, r8
 800f232:	eba3 0308 	sub.w	r3, r3, r8
 800f236:	4658      	mov	r0, fp
 800f238:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f23c:	603b      	str	r3, [r7, #0]
 800f23e:	b003      	add	sp, #12
 800f240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f244:	2e00      	cmp	r6, #0
 800f246:	d049      	beq.n	800f2dc <uxr_framing_read_transport+0xf8>
 800f248:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 800f24c:	b2ed      	uxtb	r5, r5
 800f24e:	3e01      	subs	r6, #1
 800f250:	455d      	cmp	r5, fp
 800f252:	b2f6      	uxtb	r6, r6
 800f254:	d9df      	bls.n	800f216 <uxr_framing_read_transport+0x32>
 800f256:	fa5f f58b 	uxtb.w	r5, fp
 800f25a:	2600      	movs	r6, #0
 800f25c:	2d00      	cmp	r5, #0
 800f25e:	d0e1      	beq.n	800f224 <uxr_framing_read_transport+0x40>
 800f260:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f264:	3102      	adds	r1, #2
 800f266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	4421      	add	r1, r4
 800f26e:	462a      	mov	r2, r5
 800f270:	4650      	mov	r0, sl
 800f272:	47c8      	blx	r9
 800f274:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f278:	4a1a      	ldr	r2, [pc, #104]	; (800f2e4 <uxr_framing_read_transport+0x100>)
 800f27a:	4403      	add	r3, r0
 800f27c:	0859      	lsrs	r1, r3, #1
 800f27e:	fba2 2101 	umull	r2, r1, r2, r1
 800f282:	0889      	lsrs	r1, r1, #2
 800f284:	222a      	movs	r2, #42	; 0x2a
 800f286:	fb02 3111 	mls	r1, r2, r1, r3
 800f28a:	4683      	mov	fp, r0
 800f28c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800f290:	2800      	cmp	r0, #0
 800f292:	d0c7      	beq.n	800f224 <uxr_framing_read_transport+0x40>
 800f294:	42a8      	cmp	r0, r5
 800f296:	d1c7      	bne.n	800f228 <uxr_framing_read_transport+0x44>
 800f298:	2e00      	cmp	r6, #0
 800f29a:	d0c5      	beq.n	800f228 <uxr_framing_read_transport+0x44>
 800f29c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	3102      	adds	r1, #2
 800f2a2:	4632      	mov	r2, r6
 800f2a4:	4421      	add	r1, r4
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	4650      	mov	r0, sl
 800f2aa:	47c8      	blx	r9
 800f2ac:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f2b0:	4a0c      	ldr	r2, [pc, #48]	; (800f2e4 <uxr_framing_read_transport+0x100>)
 800f2b2:	180b      	adds	r3, r1, r0
 800f2b4:	0859      	lsrs	r1, r3, #1
 800f2b6:	fba2 1201 	umull	r1, r2, r2, r1
 800f2ba:	0892      	lsrs	r2, r2, #2
 800f2bc:	212a      	movs	r1, #42	; 0x2a
 800f2be:	fb01 3312 	mls	r3, r1, r2, r3
 800f2c2:	eb00 0b05 	add.w	fp, r0, r5
 800f2c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800f2ca:	e7ad      	b.n	800f228 <uxr_framing_read_transport+0x44>
 800f2cc:	2600      	movs	r6, #0
 800f2ce:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800f2d2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 800f2d4:	d9bf      	bls.n	800f256 <uxr_framing_read_transport+0x72>
 800f2d6:	2102      	movs	r1, #2
 800f2d8:	2529      	movs	r5, #41	; 0x29
 800f2da:	e7c4      	b.n	800f266 <uxr_framing_read_transport+0x82>
 800f2dc:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 800f2e0:	b2ed      	uxtb	r5, r5
 800f2e2:	e796      	b.n	800f212 <uxr_framing_read_transport+0x2e>
 800f2e4:	30c30c31 	.word	0x30c30c31

0800f2e8 <uxr_read_framed_msg>:
 800f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ec:	461e      	mov	r6, r3
 800f2ee:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800f2f2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800f2f6:	429d      	cmp	r5, r3
 800f2f8:	b083      	sub	sp, #12
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	4688      	mov	r8, r1
 800f2fe:	4691      	mov	r9, r2
 800f300:	f000 8188 	beq.w	800f614 <uxr_read_framed_msg+0x32c>
 800f304:	7823      	ldrb	r3, [r4, #0]
 800f306:	4dc1      	ldr	r5, [pc, #772]	; (800f60c <uxr_read_framed_msg+0x324>)
 800f308:	4fc1      	ldr	r7, [pc, #772]	; (800f610 <uxr_read_framed_msg+0x328>)
 800f30a:	2b07      	cmp	r3, #7
 800f30c:	d8fd      	bhi.n	800f30a <uxr_read_framed_msg+0x22>
 800f30e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f312:	0115      	.short	0x0115
 800f314:	00d600f6 	.word	0x00d600f6
 800f318:	009000b9 	.word	0x009000b9
 800f31c:	0030004d 	.word	0x0030004d
 800f320:	0008      	.short	0x0008
 800f322:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f326:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f32a:	4299      	cmp	r1, r3
 800f32c:	f000 814a 	beq.w	800f5c4 <uxr_read_framed_msg+0x2dc>
 800f330:	18e2      	adds	r2, r4, r3
 800f332:	7892      	ldrb	r2, [r2, #2]
 800f334:	2a7d      	cmp	r2, #125	; 0x7d
 800f336:	f000 8199 	beq.w	800f66c <uxr_read_framed_msg+0x384>
 800f33a:	3301      	adds	r3, #1
 800f33c:	0858      	lsrs	r0, r3, #1
 800f33e:	fba5 1000 	umull	r1, r0, r5, r0
 800f342:	0880      	lsrs	r0, r0, #2
 800f344:	212a      	movs	r1, #42	; 0x2a
 800f346:	fb01 3310 	mls	r3, r1, r0, r3
 800f34a:	2a7e      	cmp	r2, #126	; 0x7e
 800f34c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f350:	f000 8252 	beq.w	800f7f8 <uxr_read_framed_msg+0x510>
 800f354:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f356:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800f358:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	2200      	movs	r2, #0
 800f360:	4299      	cmp	r1, r3
 800f362:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f364:	7022      	strb	r2, [r4, #0]
 800f366:	f000 8179 	beq.w	800f65c <uxr_read_framed_msg+0x374>
 800f36a:	2000      	movs	r0, #0
 800f36c:	b003      	add	sp, #12
 800f36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f372:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f376:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f37a:	4299      	cmp	r1, r3
 800f37c:	f000 8131 	beq.w	800f5e2 <uxr_read_framed_msg+0x2fa>
 800f380:	18e2      	adds	r2, r4, r3
 800f382:	7890      	ldrb	r0, [r2, #2]
 800f384:	287d      	cmp	r0, #125	; 0x7d
 800f386:	f000 8190 	beq.w	800f6aa <uxr_read_framed_msg+0x3c2>
 800f38a:	3301      	adds	r3, #1
 800f38c:	085a      	lsrs	r2, r3, #1
 800f38e:	fba5 1202 	umull	r1, r2, r5, r2
 800f392:	0892      	lsrs	r2, r2, #2
 800f394:	212a      	movs	r1, #42	; 0x2a
 800f396:	fb01 3312 	mls	r3, r1, r2, r3
 800f39a:	287e      	cmp	r0, #126	; 0x7e
 800f39c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f3a0:	f000 821a 	beq.w	800f7d8 <uxr_read_framed_msg+0x4f0>
 800f3a4:	2307      	movs	r3, #7
 800f3a6:	86a0      	strh	r0, [r4, #52]	; 0x34
 800f3a8:	7023      	strb	r3, [r4, #0]
 800f3aa:	e7ae      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f3ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f3ae:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800f3b2:	459e      	cmp	lr, r3
 800f3b4:	d938      	bls.n	800f428 <uxr_read_framed_msg+0x140>
 800f3b6:	ee07 8a90 	vmov	s15, r8
 800f3ba:	212a      	movs	r1, #42	; 0x2a
 800f3bc:	e020      	b.n	800f400 <uxr_read_framed_msg+0x118>
 800f3be:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f3c2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 800f3c6:	f000 80d4 	beq.w	800f572 <uxr_read_framed_msg+0x28a>
 800f3ca:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800f3ce:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f3d2:	f000 8219 	beq.w	800f808 <uxr_read_framed_msg+0x520>
 800f3d6:	f806 c003 	strb.w	ip, [r6, r3]
 800f3da:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 800f3de:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f3e0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800f3e4:	ea8a 000c 	eor.w	r0, sl, ip
 800f3e8:	b2c0      	uxtb	r0, r0
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f3f6:	4573      	cmp	r3, lr
 800f3f8:	8663      	strh	r3, [r4, #50]	; 0x32
 800f3fa:	86e2      	strh	r2, [r4, #54]	; 0x36
 800f3fc:	f080 8120 	bcs.w	800f640 <uxr_read_framed_msg+0x358>
 800f400:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800f404:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800f408:	f100 0c01 	add.w	ip, r0, #1
 800f40c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f410:	fba5 8202 	umull	r8, r2, r5, r2
 800f414:	0892      	lsrs	r2, r2, #2
 800f416:	4582      	cmp	sl, r0
 800f418:	eb04 0b00 	add.w	fp, r4, r0
 800f41c:	fb01 c212 	mls	r2, r1, r2, ip
 800f420:	d1cd      	bne.n	800f3be <uxr_read_framed_msg+0xd6>
 800f422:	ee17 8a90 	vmov	r8, s15
 800f426:	459e      	cmp	lr, r3
 800f428:	f040 8111 	bne.w	800f64e <uxr_read_framed_msg+0x366>
 800f42c:	2306      	movs	r3, #6
 800f42e:	7023      	strb	r3, [r4, #0]
 800f430:	e76b      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f432:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800f436:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f43a:	4298      	cmp	r0, r3
 800f43c:	f000 80c2 	beq.w	800f5c4 <uxr_read_framed_msg+0x2dc>
 800f440:	18e2      	adds	r2, r4, r3
 800f442:	7891      	ldrb	r1, [r2, #2]
 800f444:	297d      	cmp	r1, #125	; 0x7d
 800f446:	f000 814c 	beq.w	800f6e2 <uxr_read_framed_msg+0x3fa>
 800f44a:	3301      	adds	r3, #1
 800f44c:	085a      	lsrs	r2, r3, #1
 800f44e:	fba5 0202 	umull	r0, r2, r5, r2
 800f452:	0892      	lsrs	r2, r2, #2
 800f454:	202a      	movs	r0, #42	; 0x2a
 800f456:	fb00 3312 	mls	r3, r0, r2, r3
 800f45a:	297e      	cmp	r1, #126	; 0x7e
 800f45c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f460:	f000 81ca 	beq.w	800f7f8 <uxr_read_framed_msg+0x510>
 800f464:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f466:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f46a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	2000      	movs	r0, #0
 800f470:	428b      	cmp	r3, r1
 800f472:	8623      	strh	r3, [r4, #48]	; 0x30
 800f474:	8660      	strh	r0, [r4, #50]	; 0x32
 800f476:	86e0      	strh	r0, [r4, #54]	; 0x36
 800f478:	f240 80df 	bls.w	800f63a <uxr_read_framed_msg+0x352>
 800f47c:	7020      	strb	r0, [r4, #0]
 800f47e:	b003      	add	sp, #12
 800f480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f484:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f488:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f48c:	4299      	cmp	r1, r3
 800f48e:	f000 80a8 	beq.w	800f5e2 <uxr_read_framed_msg+0x2fa>
 800f492:	18e2      	adds	r2, r4, r3
 800f494:	7890      	ldrb	r0, [r2, #2]
 800f496:	287d      	cmp	r0, #125	; 0x7d
 800f498:	f000 8164 	beq.w	800f764 <uxr_read_framed_msg+0x47c>
 800f49c:	3301      	adds	r3, #1
 800f49e:	085a      	lsrs	r2, r3, #1
 800f4a0:	fba5 1202 	umull	r1, r2, r5, r2
 800f4a4:	0892      	lsrs	r2, r2, #2
 800f4a6:	212a      	movs	r1, #42	; 0x2a
 800f4a8:	fb01 3312 	mls	r3, r1, r2, r3
 800f4ac:	287e      	cmp	r0, #126	; 0x7e
 800f4ae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f4b2:	f000 8191 	beq.w	800f7d8 <uxr_read_framed_msg+0x4f0>
 800f4b6:	2304      	movs	r3, #4
 800f4b8:	8620      	strh	r0, [r4, #48]	; 0x30
 800f4ba:	7023      	strb	r3, [r4, #0]
 800f4bc:	e725      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f4be:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800f4c2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800f4c6:	4290      	cmp	r0, r2
 800f4c8:	f000 80b3 	beq.w	800f632 <uxr_read_framed_msg+0x34a>
 800f4cc:	18a3      	adds	r3, r4, r2
 800f4ce:	7899      	ldrb	r1, [r3, #2]
 800f4d0:	297d      	cmp	r1, #125	; 0x7d
 800f4d2:	f000 8164 	beq.w	800f79e <uxr_read_framed_msg+0x4b6>
 800f4d6:	3201      	adds	r2, #1
 800f4d8:	0850      	lsrs	r0, r2, #1
 800f4da:	fba5 3000 	umull	r3, r0, r5, r0
 800f4de:	0880      	lsrs	r0, r0, #2
 800f4e0:	232a      	movs	r3, #42	; 0x2a
 800f4e2:	fb03 2210 	mls	r2, r3, r0, r2
 800f4e6:	297e      	cmp	r1, #126	; 0x7e
 800f4e8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f4ec:	f000 8188 	beq.w	800f800 <uxr_read_framed_msg+0x518>
 800f4f0:	7863      	ldrb	r3, [r4, #1]
 800f4f2:	428b      	cmp	r3, r1
 800f4f4:	bf0c      	ite	eq
 800f4f6:	2303      	moveq	r3, #3
 800f4f8:	2300      	movne	r3, #0
 800f4fa:	7023      	strb	r3, [r4, #0]
 800f4fc:	e705      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f4fe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f502:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f506:	2200      	movs	r2, #0
 800f508:	4299      	cmp	r1, r3
 800f50a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800f50e:	d06c      	beq.n	800f5ea <uxr_read_framed_msg+0x302>
 800f510:	18e2      	adds	r2, r4, r3
 800f512:	7890      	ldrb	r0, [r2, #2]
 800f514:	287d      	cmp	r0, #125	; 0x7d
 800f516:	f000 8101 	beq.w	800f71c <uxr_read_framed_msg+0x434>
 800f51a:	3301      	adds	r3, #1
 800f51c:	085a      	lsrs	r2, r3, #1
 800f51e:	fba5 1202 	umull	r1, r2, r5, r2
 800f522:	0892      	lsrs	r2, r2, #2
 800f524:	212a      	movs	r1, #42	; 0x2a
 800f526:	fb01 3312 	mls	r3, r1, r2, r3
 800f52a:	287e      	cmp	r0, #126	; 0x7e
 800f52c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 800f530:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f534:	d059      	beq.n	800f5ea <uxr_read_framed_msg+0x302>
 800f536:	2302      	movs	r3, #2
 800f538:	7023      	strb	r3, [r4, #0]
 800f53a:	e6e6      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f53c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800f540:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800f544:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800f548:	1c51      	adds	r1, r2, #1
 800f54a:	084b      	lsrs	r3, r1, #1
 800f54c:	fba5 c303 	umull	ip, r3, r5, r3
 800f550:	089b      	lsrs	r3, r3, #2
 800f552:	fb0e 1313 	mls	r3, lr, r3, r1
 800f556:	4592      	cmp	sl, r2
 800f558:	eb04 0002 	add.w	r0, r4, r2
 800f55c:	b2da      	uxtb	r2, r3
 800f55e:	f43f af04 	beq.w	800f36a <uxr_read_framed_msg+0x82>
 800f562:	7883      	ldrb	r3, [r0, #2]
 800f564:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f568:	2b7e      	cmp	r3, #126	; 0x7e
 800f56a:	d1ed      	bne.n	800f548 <uxr_read_framed_msg+0x260>
 800f56c:	2301      	movs	r3, #1
 800f56e:	7023      	strb	r3, [r4, #0]
 800f570:	e6cb      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f572:	f100 0c01 	add.w	ip, r0, #1
 800f576:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f57a:	fba5 8202 	umull	r8, r2, r5, r2
 800f57e:	0892      	lsrs	r2, r2, #2
 800f580:	fb01 c212 	mls	r2, r1, r2, ip
 800f584:	eb04 0c02 	add.w	ip, r4, r2
 800f588:	b2d2      	uxtb	r2, r2
 800f58a:	4592      	cmp	sl, r2
 800f58c:	f100 0002 	add.w	r0, r0, #2
 800f590:	f43f af47 	beq.w	800f422 <uxr_read_framed_msg+0x13a>
 800f594:	0842      	lsrs	r2, r0, #1
 800f596:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f59a:	fba5 8202 	umull	r8, r2, r5, r2
 800f59e:	0892      	lsrs	r2, r2, #2
 800f5a0:	fb01 0012 	mls	r0, r1, r2, r0
 800f5a4:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 800f5a8:	f08a 0c20 	eor.w	ip, sl, #32
 800f5ac:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 800f5b0:	f47f af11 	bne.w	800f3d6 <uxr_read_framed_msg+0xee>
 800f5b4:	459e      	cmp	lr, r3
 800f5b6:	ee17 8a90 	vmov	r8, s15
 800f5ba:	f43f af37 	beq.w	800f42c <uxr_read_framed_msg+0x144>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	7023      	strb	r3, [r4, #0]
 800f5c2:	e6a2      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f5c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5c6:	9300      	str	r3, [sp, #0]
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	9301      	str	r3, [sp, #4]
 800f5cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5ce:	464a      	mov	r2, r9
 800f5d0:	4641      	mov	r1, r8
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7ff fe06 	bl	800f1e4 <uxr_framing_read_transport>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	f43f aec6 	beq.w	800f36a <uxr_read_framed_msg+0x82>
 800f5de:	7823      	ldrb	r3, [r4, #0]
 800f5e0:	e693      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f5e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5e4:	9300      	str	r3, [sp, #0]
 800f5e6:	2302      	movs	r3, #2
 800f5e8:	e7ef      	b.n	800f5ca <uxr_read_framed_msg+0x2e2>
 800f5ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	2304      	movs	r3, #4
 800f5f0:	9301      	str	r3, [sp, #4]
 800f5f2:	464a      	mov	r2, r9
 800f5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5f6:	4641      	mov	r1, r8
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f7ff fdf3 	bl	800f1e4 <uxr_framing_read_transport>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d1ed      	bne.n	800f5de <uxr_read_framed_msg+0x2f6>
 800f602:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f606:	2b7e      	cmp	r3, #126	; 0x7e
 800f608:	d0e9      	beq.n	800f5de <uxr_read_framed_msg+0x2f6>
 800f60a:	e6ae      	b.n	800f36a <uxr_read_framed_msg+0x82>
 800f60c:	30c30c31 	.word	0x30c30c31
 800f610:	08012010 	.word	0x08012010
 800f614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	2305      	movs	r3, #5
 800f61a:	9301      	str	r3, [sp, #4]
 800f61c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f61e:	f7ff fde1 	bl	800f1e4 <uxr_framing_read_transport>
 800f622:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800f626:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f62a:	429a      	cmp	r2, r3
 800f62c:	f43f ae9d 	beq.w	800f36a <uxr_read_framed_msg+0x82>
 800f630:	e668      	b.n	800f304 <uxr_read_framed_msg+0x1c>
 800f632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f634:	9300      	str	r3, [sp, #0]
 800f636:	2303      	movs	r3, #3
 800f638:	e7c7      	b.n	800f5ca <uxr_read_framed_msg+0x2e2>
 800f63a:	2305      	movs	r3, #5
 800f63c:	7023      	strb	r3, [r4, #0]
 800f63e:	e664      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f640:	ee17 8a90 	vmov	r8, s15
 800f644:	f43f aef2 	beq.w	800f42c <uxr_read_framed_msg+0x144>
 800f648:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800f64c:	d08e      	beq.n	800f56c <uxr_read_framed_msg+0x284>
 800f64e:	ebae 0303 	sub.w	r3, lr, r3
 800f652:	3302      	adds	r3, #2
 800f654:	9301      	str	r3, [sp, #4]
 800f656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	e7b7      	b.n	800f5cc <uxr_read_framed_msg+0x2e4>
 800f65c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f65e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f662:	7013      	strb	r3, [r2, #0]
 800f664:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800f666:	b003      	add	sp, #12
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66c:	f103 0c01 	add.w	ip, r3, #1
 800f670:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f674:	fba5 0202 	umull	r0, r2, r5, r2
 800f678:	0892      	lsrs	r2, r2, #2
 800f67a:	202a      	movs	r0, #42	; 0x2a
 800f67c:	fb00 c212 	mls	r2, r0, r2, ip
 800f680:	fa5f fc82 	uxtb.w	ip, r2
 800f684:	4561      	cmp	r1, ip
 800f686:	d09d      	beq.n	800f5c4 <uxr_read_framed_msg+0x2dc>
 800f688:	3302      	adds	r3, #2
 800f68a:	4422      	add	r2, r4
 800f68c:	0859      	lsrs	r1, r3, #1
 800f68e:	7892      	ldrb	r2, [r2, #2]
 800f690:	fba5 c101 	umull	ip, r1, r5, r1
 800f694:	0889      	lsrs	r1, r1, #2
 800f696:	fb00 3311 	mls	r3, r0, r1, r3
 800f69a:	2a7e      	cmp	r2, #126	; 0x7e
 800f69c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f6a0:	f000 80aa 	beq.w	800f7f8 <uxr_read_framed_msg+0x510>
 800f6a4:	f082 0220 	eor.w	r2, r2, #32
 800f6a8:	e654      	b.n	800f354 <uxr_read_framed_msg+0x6c>
 800f6aa:	1c58      	adds	r0, r3, #1
 800f6ac:	0842      	lsrs	r2, r0, #1
 800f6ae:	fba5 c202 	umull	ip, r2, r5, r2
 800f6b2:	0892      	lsrs	r2, r2, #2
 800f6b4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f6b8:	fb0c 0212 	mls	r2, ip, r2, r0
 800f6bc:	b2d0      	uxtb	r0, r2
 800f6be:	4281      	cmp	r1, r0
 800f6c0:	d08f      	beq.n	800f5e2 <uxr_read_framed_msg+0x2fa>
 800f6c2:	4422      	add	r2, r4
 800f6c4:	3302      	adds	r3, #2
 800f6c6:	7890      	ldrb	r0, [r2, #2]
 800f6c8:	085a      	lsrs	r2, r3, #1
 800f6ca:	fba5 1202 	umull	r1, r2, r5, r2
 800f6ce:	0892      	lsrs	r2, r2, #2
 800f6d0:	fb0c 3312 	mls	r3, ip, r2, r3
 800f6d4:	287e      	cmp	r0, #126	; 0x7e
 800f6d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f6da:	d07d      	beq.n	800f7d8 <uxr_read_framed_msg+0x4f0>
 800f6dc:	f080 0020 	eor.w	r0, r0, #32
 800f6e0:	e660      	b.n	800f3a4 <uxr_read_framed_msg+0xbc>
 800f6e2:	1c59      	adds	r1, r3, #1
 800f6e4:	084a      	lsrs	r2, r1, #1
 800f6e6:	fba5 c202 	umull	ip, r2, r5, r2
 800f6ea:	0892      	lsrs	r2, r2, #2
 800f6ec:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f6f0:	fb0c 1212 	mls	r2, ip, r2, r1
 800f6f4:	b2d1      	uxtb	r1, r2
 800f6f6:	4288      	cmp	r0, r1
 800f6f8:	f43f af64 	beq.w	800f5c4 <uxr_read_framed_msg+0x2dc>
 800f6fc:	4422      	add	r2, r4
 800f6fe:	3302      	adds	r3, #2
 800f700:	7891      	ldrb	r1, [r2, #2]
 800f702:	085a      	lsrs	r2, r3, #1
 800f704:	fba5 0202 	umull	r0, r2, r5, r2
 800f708:	0892      	lsrs	r2, r2, #2
 800f70a:	fb0c 3312 	mls	r3, ip, r2, r3
 800f70e:	297e      	cmp	r1, #126	; 0x7e
 800f710:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f714:	d070      	beq.n	800f7f8 <uxr_read_framed_msg+0x510>
 800f716:	f081 0120 	eor.w	r1, r1, #32
 800f71a:	e6a3      	b.n	800f464 <uxr_read_framed_msg+0x17c>
 800f71c:	f103 0c01 	add.w	ip, r3, #1
 800f720:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f724:	fba5 0202 	umull	r0, r2, r5, r2
 800f728:	0892      	lsrs	r2, r2, #2
 800f72a:	202a      	movs	r0, #42	; 0x2a
 800f72c:	fb00 c212 	mls	r2, r0, r2, ip
 800f730:	fa5f fc82 	uxtb.w	ip, r2
 800f734:	4561      	cmp	r1, ip
 800f736:	f43f af58 	beq.w	800f5ea <uxr_read_framed_msg+0x302>
 800f73a:	4422      	add	r2, r4
 800f73c:	3302      	adds	r3, #2
 800f73e:	7891      	ldrb	r1, [r2, #2]
 800f740:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800f744:	085a      	lsrs	r2, r3, #1
 800f746:	fba5 c202 	umull	ip, r2, r5, r2
 800f74a:	0892      	lsrs	r2, r2, #2
 800f74c:	fb00 3312 	mls	r3, r0, r2, r3
 800f750:	297e      	cmp	r1, #126	; 0x7e
 800f752:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f756:	f43f af48 	beq.w	800f5ea <uxr_read_framed_msg+0x302>
 800f75a:	f081 0120 	eor.w	r1, r1, #32
 800f75e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800f762:	e6e8      	b.n	800f536 <uxr_read_framed_msg+0x24e>
 800f764:	1c58      	adds	r0, r3, #1
 800f766:	0842      	lsrs	r2, r0, #1
 800f768:	fba5 c202 	umull	ip, r2, r5, r2
 800f76c:	0892      	lsrs	r2, r2, #2
 800f76e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f772:	fb0c 0212 	mls	r2, ip, r2, r0
 800f776:	b2d0      	uxtb	r0, r2
 800f778:	4281      	cmp	r1, r0
 800f77a:	f43f af32 	beq.w	800f5e2 <uxr_read_framed_msg+0x2fa>
 800f77e:	4422      	add	r2, r4
 800f780:	3302      	adds	r3, #2
 800f782:	7890      	ldrb	r0, [r2, #2]
 800f784:	085a      	lsrs	r2, r3, #1
 800f786:	fba5 1202 	umull	r1, r2, r5, r2
 800f78a:	0892      	lsrs	r2, r2, #2
 800f78c:	fb0c 3312 	mls	r3, ip, r2, r3
 800f790:	287e      	cmp	r0, #126	; 0x7e
 800f792:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f796:	d01f      	beq.n	800f7d8 <uxr_read_framed_msg+0x4f0>
 800f798:	f080 0020 	eor.w	r0, r0, #32
 800f79c:	e68b      	b.n	800f4b6 <uxr_read_framed_msg+0x1ce>
 800f79e:	1c51      	adds	r1, r2, #1
 800f7a0:	084b      	lsrs	r3, r1, #1
 800f7a2:	fba5 c303 	umull	ip, r3, r5, r3
 800f7a6:	089b      	lsrs	r3, r3, #2
 800f7a8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f7ac:	fb0c 1313 	mls	r3, ip, r3, r1
 800f7b0:	b2d9      	uxtb	r1, r3
 800f7b2:	4288      	cmp	r0, r1
 800f7b4:	f43f af3d 	beq.w	800f632 <uxr_read_framed_msg+0x34a>
 800f7b8:	3202      	adds	r2, #2
 800f7ba:	4423      	add	r3, r4
 800f7bc:	0850      	lsrs	r0, r2, #1
 800f7be:	789b      	ldrb	r3, [r3, #2]
 800f7c0:	fba5 1000 	umull	r1, r0, r5, r0
 800f7c4:	0880      	lsrs	r0, r0, #2
 800f7c6:	fb0c 2210 	mls	r2, ip, r0, r2
 800f7ca:	2b7e      	cmp	r3, #126	; 0x7e
 800f7cc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f7d0:	d016      	beq.n	800f800 <uxr_read_framed_msg+0x518>
 800f7d2:	f083 0120 	eor.w	r1, r3, #32
 800f7d6:	e68b      	b.n	800f4f0 <uxr_read_framed_msg+0x208>
 800f7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	2302      	movs	r3, #2
 800f7de:	9301      	str	r3, [sp, #4]
 800f7e0:	464a      	mov	r2, r9
 800f7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7e4:	4641      	mov	r1, r8
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f7ff fcfc 	bl	800f1e4 <uxr_framing_read_transport>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	f47f aef6 	bne.w	800f5de <uxr_read_framed_msg+0x2f6>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	7023      	strb	r3, [r4, #0]
 800f7f6:	e588      	b.n	800f30a <uxr_read_framed_msg+0x22>
 800f7f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e7ee      	b.n	800f7de <uxr_read_framed_msg+0x4f6>
 800f800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	2303      	movs	r3, #3
 800f806:	e7ea      	b.n	800f7de <uxr_read_framed_msg+0x4f6>
 800f808:	ee17 8a90 	vmov	r8, s15
 800f80c:	e6ae      	b.n	800f56c <uxr_read_framed_msg+0x284>
 800f80e:	bf00      	nop

0800f810 <rcl_get_default_domain_id>:
 800f810:	b530      	push	{r4, r5, lr}
 800f812:	b083      	sub	sp, #12
 800f814:	2300      	movs	r3, #0
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	b1d0      	cbz	r0, 800f850 <rcl_get_default_domain_id+0x40>
 800f81a:	4604      	mov	r4, r0
 800f81c:	4669      	mov	r1, sp
 800f81e:	4815      	ldr	r0, [pc, #84]	; (800f874 <rcl_get_default_domain_id+0x64>)
 800f820:	f7fd f93a 	bl	800ca98 <rcutils_get_env>
 800f824:	4602      	mov	r2, r0
 800f826:	b110      	cbz	r0, 800f82e <rcl_get_default_domain_id+0x1e>
 800f828:	2001      	movs	r0, #1
 800f82a:	b003      	add	sp, #12
 800f82c:	bd30      	pop	{r4, r5, pc}
 800f82e:	9b00      	ldr	r3, [sp, #0]
 800f830:	b18b      	cbz	r3, 800f856 <rcl_get_default_domain_id+0x46>
 800f832:	7818      	ldrb	r0, [r3, #0]
 800f834:	2800      	cmp	r0, #0
 800f836:	d0f8      	beq.n	800f82a <rcl_get_default_domain_id+0x1a>
 800f838:	a901      	add	r1, sp, #4
 800f83a:	4618      	mov	r0, r3
 800f83c:	9201      	str	r2, [sp, #4]
 800f83e:	f000 fe89 	bl	8010554 <strtoul>
 800f842:	4605      	mov	r5, r0
 800f844:	b150      	cbz	r0, 800f85c <rcl_get_default_domain_id+0x4c>
 800f846:	1c43      	adds	r3, r0, #1
 800f848:	d00d      	beq.n	800f866 <rcl_get_default_domain_id+0x56>
 800f84a:	6025      	str	r5, [r4, #0]
 800f84c:	2000      	movs	r0, #0
 800f84e:	e7ec      	b.n	800f82a <rcl_get_default_domain_id+0x1a>
 800f850:	200b      	movs	r0, #11
 800f852:	b003      	add	sp, #12
 800f854:	bd30      	pop	{r4, r5, pc}
 800f856:	4618      	mov	r0, r3
 800f858:	b003      	add	sp, #12
 800f85a:	bd30      	pop	{r4, r5, pc}
 800f85c:	9b01      	ldr	r3, [sp, #4]
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d0f2      	beq.n	800f84a <rcl_get_default_domain_id+0x3a>
 800f864:	e7e0      	b.n	800f828 <rcl_get_default_domain_id+0x18>
 800f866:	f001 f897 	bl	8010998 <__errno>
 800f86a:	6803      	ldr	r3, [r0, #0]
 800f86c:	2b22      	cmp	r3, #34	; 0x22
 800f86e:	d1ec      	bne.n	800f84a <rcl_get_default_domain_id+0x3a>
 800f870:	e7da      	b.n	800f828 <rcl_get_default_domain_id+0x18>
 800f872:	bf00      	nop
 800f874:	08012210 	.word	0x08012210

0800f878 <rcl_expand_topic_name>:
 800f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	b08b      	sub	sp, #44	; 0x2c
 800f87e:	9306      	str	r3, [sp, #24]
 800f880:	2800      	cmp	r0, #0
 800f882:	f000 80ad 	beq.w	800f9e0 <rcl_expand_topic_name+0x168>
 800f886:	460e      	mov	r6, r1
 800f888:	2900      	cmp	r1, #0
 800f88a:	f000 80a9 	beq.w	800f9e0 <rcl_expand_topic_name+0x168>
 800f88e:	4617      	mov	r7, r2
 800f890:	2a00      	cmp	r2, #0
 800f892:	f000 80a5 	beq.w	800f9e0 <rcl_expand_topic_name+0x168>
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 80a2 	beq.w	800f9e0 <rcl_expand_topic_name+0x168>
 800f89c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f000 809e 	beq.w	800f9e0 <rcl_expand_topic_name+0x168>
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	a909      	add	r1, sp, #36	; 0x24
 800f8a8:	4680      	mov	r8, r0
 800f8aa:	f000 f9f5 	bl	800fc98 <rcl_validate_topic_name>
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	f040 8096 	bne.w	800f9e2 <rcl_expand_topic_name+0x16a>
 800f8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f040 809a 	bne.w	800f9f2 <rcl_expand_topic_name+0x17a>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	a909      	add	r1, sp, #36	; 0x24
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f7fd fcea 	bl	800d29c <rmw_validate_node_name>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	f040 808e 	bne.w	800f9ea <rcl_expand_topic_name+0x172>
 800f8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8d0:	2a00      	cmp	r2, #0
 800f8d2:	f040 8093 	bne.w	800f9fc <rcl_expand_topic_name+0x184>
 800f8d6:	a909      	add	r1, sp, #36	; 0x24
 800f8d8:	4638      	mov	r0, r7
 800f8da:	f7fd fcc1 	bl	800d260 <rmw_validate_namespace>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	f040 8083 	bne.w	800f9ea <rcl_expand_topic_name+0x172>
 800f8e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f8e6:	2c00      	cmp	r4, #0
 800f8e8:	f040 80ed 	bne.w	800fac6 <rcl_expand_topic_name+0x24e>
 800f8ec:	217b      	movs	r1, #123	; 0x7b
 800f8ee:	4640      	mov	r0, r8
 800f8f0:	f000 ffc6 	bl	8010880 <strchr>
 800f8f4:	f898 3000 	ldrb.w	r3, [r8]
 800f8f8:	2b2f      	cmp	r3, #47	; 0x2f
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	f000 809e 	beq.w	800fa3c <rcl_expand_topic_name+0x1c4>
 800f900:	2b7e      	cmp	r3, #126	; 0x7e
 800f902:	f040 80a2 	bne.w	800fa4a <rcl_expand_topic_name+0x1d2>
 800f906:	4638      	mov	r0, r7
 800f908:	f7f0 fc74 	bl	80001f4 <strlen>
 800f90c:	4a82      	ldr	r2, [pc, #520]	; (800fb18 <rcl_expand_topic_name+0x2a0>)
 800f90e:	4b83      	ldr	r3, [pc, #524]	; (800fb1c <rcl_expand_topic_name+0x2a4>)
 800f910:	2801      	cmp	r0, #1
 800f912:	bf18      	it	ne
 800f914:	4613      	movne	r3, r2
 800f916:	9302      	str	r3, [sp, #8]
 800f918:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800f920:	f108 0301 	add.w	r3, r8, #1
 800f924:	9305      	str	r3, [sp, #20]
 800f926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f92a:	9301      	str	r3, [sp, #4]
 800f92c:	ab14      	add	r3, sp, #80	; 0x50
 800f92e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f930:	f7fd f8da 	bl	800cae8 <rcutils_format_string_limit>
 800f934:	4682      	mov	sl, r0
 800f936:	2800      	cmp	r0, #0
 800f938:	f000 80c7 	beq.w	800faca <rcl_expand_topic_name+0x252>
 800f93c:	2d00      	cmp	r5, #0
 800f93e:	f000 80a2 	beq.w	800fa86 <rcl_expand_topic_name+0x20e>
 800f942:	217b      	movs	r1, #123	; 0x7b
 800f944:	f000 ff9c 	bl	8010880 <strchr>
 800f948:	46d1      	mov	r9, sl
 800f94a:	4605      	mov	r5, r0
 800f94c:	9407      	str	r4, [sp, #28]
 800f94e:	46d3      	mov	fp, sl
 800f950:	464c      	mov	r4, r9
 800f952:	2d00      	cmp	r5, #0
 800f954:	f000 80be 	beq.w	800fad4 <rcl_expand_topic_name+0x25c>
 800f958:	217d      	movs	r1, #125	; 0x7d
 800f95a:	4620      	mov	r0, r4
 800f95c:	f000 ff90 	bl	8010880 <strchr>
 800f960:	eba0 0905 	sub.w	r9, r0, r5
 800f964:	f109 0a01 	add.w	sl, r9, #1
 800f968:	486d      	ldr	r0, [pc, #436]	; (800fb20 <rcl_expand_topic_name+0x2a8>)
 800f96a:	4652      	mov	r2, sl
 800f96c:	4629      	mov	r1, r5
 800f96e:	f000 ff94 	bl	801089a <strncmp>
 800f972:	2800      	cmp	r0, #0
 800f974:	d067      	beq.n	800fa46 <rcl_expand_topic_name+0x1ce>
 800f976:	486b      	ldr	r0, [pc, #428]	; (800fb24 <rcl_expand_topic_name+0x2ac>)
 800f978:	4652      	mov	r2, sl
 800f97a:	4629      	mov	r1, r5
 800f97c:	f000 ff8d 	bl	801089a <strncmp>
 800f980:	b130      	cbz	r0, 800f990 <rcl_expand_topic_name+0x118>
 800f982:	4869      	ldr	r0, [pc, #420]	; (800fb28 <rcl_expand_topic_name+0x2b0>)
 800f984:	4652      	mov	r2, sl
 800f986:	4629      	mov	r1, r5
 800f988:	f000 ff87 	bl	801089a <strncmp>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d137      	bne.n	800fa00 <rcl_expand_topic_name+0x188>
 800f990:	46b9      	mov	r9, r7
 800f992:	ab16      	add	r3, sp, #88	; 0x58
 800f994:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f998:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f99c:	ab14      	add	r3, sp, #80	; 0x50
 800f99e:	4628      	mov	r0, r5
 800f9a0:	cb0c      	ldmia	r3, {r2, r3}
 800f9a2:	4651      	mov	r1, sl
 800f9a4:	f7fd f9dc 	bl	800cd60 <rcutils_strndup>
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	f000 809c 	beq.w	800fae8 <rcl_expand_topic_name+0x270>
 800f9b0:	464a      	mov	r2, r9
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	ab14      	add	r3, sp, #80	; 0x50
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	f7fd f8d0 	bl	800cb5c <rcutils_repl_str>
 800f9bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	4798      	blx	r3
 800f9c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9ca:	4658      	mov	r0, fp
 800f9cc:	4798      	blx	r3
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	d07b      	beq.n	800faca <rcl_expand_topic_name+0x252>
 800f9d2:	217b      	movs	r1, #123	; 0x7b
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f000 ff53 	bl	8010880 <strchr>
 800f9da:	46a3      	mov	fp, r4
 800f9dc:	4605      	mov	r5, r0
 800f9de:	e7b8      	b.n	800f952 <rcl_expand_topic_name+0xda>
 800f9e0:	240b      	movs	r4, #11
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	b00b      	add	sp, #44	; 0x2c
 800f9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ea:	f7fc f935 	bl	800bc58 <rcl_convert_rmw_ret_to_rcl_ret>
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	e7f7      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800f9f2:	2467      	movs	r4, #103	; 0x67
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	b00b      	add	sp, #44	; 0x2c
 800f9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fc:	24c9      	movs	r4, #201	; 0xc9
 800f9fe:	e7f0      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800fa00:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800fa04:	9806      	ldr	r0, [sp, #24]
 800fa06:	1c69      	adds	r1, r5, #1
 800fa08:	f7fd fac4 	bl	800cf94 <rcutils_string_map_getn>
 800fa0c:	4681      	mov	r9, r0
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d1bf      	bne.n	800f992 <rcl_expand_topic_name+0x11a>
 800fa12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa14:	aa16      	add	r2, sp, #88	; 0x58
 800fa16:	6018      	str	r0, [r3, #0]
 800fa18:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fa1e:	ab14      	add	r3, sp, #80	; 0x50
 800fa20:	cb0c      	ldmia	r3, {r2, r3}
 800fa22:	4651      	mov	r1, sl
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7fd f99b 	bl	800cd60 <rcutils_strndup>
 800fa2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa2e:	4798      	blx	r3
 800fa30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa32:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa34:	4658      	mov	r0, fp
 800fa36:	2469      	movs	r4, #105	; 0x69
 800fa38:	4798      	blx	r3
 800fa3a:	e7d2      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d05b      	beq.n	800faf8 <rcl_expand_topic_name+0x280>
 800fa40:	46c1      	mov	r9, r8
 800fa42:	46a2      	mov	sl, r4
 800fa44:	e782      	b.n	800f94c <rcl_expand_topic_name+0xd4>
 800fa46:	46b1      	mov	r9, r6
 800fa48:	e7a3      	b.n	800f992 <rcl_expand_topic_name+0x11a>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d1f8      	bne.n	800fa40 <rcl_expand_topic_name+0x1c8>
 800fa4e:	4638      	mov	r0, r7
 800fa50:	f7f0 fbd0 	bl	80001f4 <strlen>
 800fa54:	4a35      	ldr	r2, [pc, #212]	; (800fb2c <rcl_expand_topic_name+0x2b4>)
 800fa56:	4b36      	ldr	r3, [pc, #216]	; (800fb30 <rcl_expand_topic_name+0x2b8>)
 800fa58:	f8cd 8010 	str.w	r8, [sp, #16]
 800fa5c:	2801      	cmp	r0, #1
 800fa5e:	bf18      	it	ne
 800fa60:	4613      	movne	r3, r2
 800fa62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fa66:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800fa6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa6c:	9703      	str	r7, [sp, #12]
 800fa6e:	9200      	str	r2, [sp, #0]
 800fa70:	ab14      	add	r3, sp, #80	; 0x50
 800fa72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa74:	f7fd f838 	bl	800cae8 <rcutils_format_string_limit>
 800fa78:	4682      	mov	sl, r0
 800fa7a:	4653      	mov	r3, sl
 800fa7c:	b32b      	cbz	r3, 800faca <rcl_expand_topic_name+0x252>
 800fa7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa80:	f8c3 a000 	str.w	sl, [r3]
 800fa84:	e7ad      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800fa86:	f89a 3000 	ldrb.w	r3, [sl]
 800fa8a:	2b2f      	cmp	r3, #47	; 0x2f
 800fa8c:	d0f7      	beq.n	800fa7e <rcl_expand_topic_name+0x206>
 800fa8e:	4638      	mov	r0, r7
 800fa90:	f7f0 fbb0 	bl	80001f4 <strlen>
 800fa94:	4a25      	ldr	r2, [pc, #148]	; (800fb2c <rcl_expand_topic_name+0x2b4>)
 800fa96:	4b26      	ldr	r3, [pc, #152]	; (800fb30 <rcl_expand_topic_name+0x2b8>)
 800fa98:	f8cd a010 	str.w	sl, [sp, #16]
 800fa9c:	2801      	cmp	r0, #1
 800fa9e:	bf18      	it	ne
 800faa0:	4613      	movne	r3, r2
 800faa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800faa6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800faaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800faac:	9703      	str	r7, [sp, #12]
 800faae:	9200      	str	r2, [sp, #0]
 800fab0:	ab14      	add	r3, sp, #80	; 0x50
 800fab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fab4:	f7fd f818 	bl	800cae8 <rcutils_format_string_limit>
 800fab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800faba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fabc:	4605      	mov	r5, r0
 800fabe:	4650      	mov	r0, sl
 800fac0:	4798      	blx	r3
 800fac2:	46aa      	mov	sl, r5
 800fac4:	e7d9      	b.n	800fa7a <rcl_expand_topic_name+0x202>
 800fac6:	24ca      	movs	r4, #202	; 0xca
 800fac8:	e78b      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800faca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800facc:	2300      	movs	r3, #0
 800face:	6013      	str	r3, [r2, #0]
 800fad0:	240a      	movs	r4, #10
 800fad2:	e786      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800fad4:	465b      	mov	r3, fp
 800fad6:	9c07      	ldr	r4, [sp, #28]
 800fad8:	46da      	mov	sl, fp
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1d3      	bne.n	800fa86 <rcl_expand_topic_name+0x20e>
 800fade:	f898 3000 	ldrb.w	r3, [r8]
 800fae2:	2b2f      	cmp	r3, #47	; 0x2f
 800fae4:	d0cb      	beq.n	800fa7e <rcl_expand_topic_name+0x206>
 800fae6:	e7b2      	b.n	800fa4e <rcl_expand_topic_name+0x1d6>
 800fae8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 800faec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800faee:	6015      	str	r5, [r2, #0]
 800faf0:	4658      	mov	r0, fp
 800faf2:	4798      	blx	r3
 800faf4:	240a      	movs	r4, #10
 800faf6:	e774      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800faf8:	ab17      	add	r3, sp, #92	; 0x5c
 800fafa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fafe:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb02:	ab14      	add	r3, sp, #80	; 0x50
 800fb04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fb06:	4640      	mov	r0, r8
 800fb08:	f7fd f908 	bl	800cd1c <rcutils_strdup>
 800fb0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	6018      	str	r0, [r3, #0]
 800fb12:	bf08      	it	eq
 800fb14:	240a      	moveq	r4, #10
 800fb16:	e764      	b.n	800f9e2 <rcl_expand_topic_name+0x16a>
 800fb18:	08012220 	.word	0x08012220
 800fb1c:	08011a08 	.word	0x08011a08
 800fb20:	08012228 	.word	0x08012228
 800fb24:	08012230 	.word	0x08012230
 800fb28:	08012238 	.word	0x08012238
 800fb2c:	08011b9c 	.word	0x08011b9c
 800fb30:	08011a18 	.word	0x08011a18

0800fb34 <rcl_get_default_topic_name_substitutions>:
 800fb34:	2800      	cmp	r0, #0
 800fb36:	bf0c      	ite	eq
 800fb38:	200b      	moveq	r0, #11
 800fb3a:	2000      	movne	r0, #0
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop

0800fb40 <rcl_get_zero_initialized_guard_condition>:
 800fb40:	4a03      	ldr	r2, [pc, #12]	; (800fb50 <rcl_get_zero_initialized_guard_condition+0x10>)
 800fb42:	4603      	mov	r3, r0
 800fb44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb48:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	4770      	bx	lr
 800fb50:	08012244 	.word	0x08012244

0800fb54 <rcl_guard_condition_init_from_rmw>:
 800fb54:	b082      	sub	sp, #8
 800fb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb5a:	b086      	sub	sp, #24
 800fb5c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800fb60:	4604      	mov	r4, r0
 800fb62:	f84c 3f04 	str.w	r3, [ip, #4]!
 800fb66:	460e      	mov	r6, r1
 800fb68:	4617      	mov	r7, r2
 800fb6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb6e:	f10d 0e04 	add.w	lr, sp, #4
 800fb72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fb76:	f8dc 3000 	ldr.w	r3, [ip]
 800fb7a:	f8ce 3000 	str.w	r3, [lr]
 800fb7e:	a801      	add	r0, sp, #4
 800fb80:	f7f7 fe6e 	bl	8007860 <rcutils_allocator_is_valid>
 800fb84:	b350      	cbz	r0, 800fbdc <rcl_guard_condition_init_from_rmw+0x88>
 800fb86:	b34c      	cbz	r4, 800fbdc <rcl_guard_condition_init_from_rmw+0x88>
 800fb88:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fb8c:	f1b8 0f00 	cmp.w	r8, #0
 800fb90:	d11e      	bne.n	800fbd0 <rcl_guard_condition_init_from_rmw+0x7c>
 800fb92:	b31f      	cbz	r7, 800fbdc <rcl_guard_condition_init_from_rmw+0x88>
 800fb94:	4638      	mov	r0, r7
 800fb96:	f7fc f87d 	bl	800bc94 <rcl_context_is_valid>
 800fb9a:	b328      	cbz	r0, 800fbe8 <rcl_guard_condition_init_from_rmw+0x94>
 800fb9c:	9b01      	ldr	r3, [sp, #4]
 800fb9e:	9905      	ldr	r1, [sp, #20]
 800fba0:	201c      	movs	r0, #28
 800fba2:	4798      	blx	r3
 800fba4:	4605      	mov	r5, r0
 800fba6:	6060      	str	r0, [r4, #4]
 800fba8:	b358      	cbz	r0, 800fc02 <rcl_guard_condition_init_from_rmw+0xae>
 800fbaa:	b1fe      	cbz	r6, 800fbec <rcl_guard_condition_init_from_rmw+0x98>
 800fbac:	6006      	str	r6, [r0, #0]
 800fbae:	f880 8004 	strb.w	r8, [r0, #4]
 800fbb2:	ac01      	add	r4, sp, #4
 800fbb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbb6:	f105 0c08 	add.w	ip, r5, #8
 800fbba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbbe:	6823      	ldr	r3, [r4, #0]
 800fbc0:	f8cc 3000 	str.w	r3, [ip]
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	b006      	add	sp, #24
 800fbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbcc:	b002      	add	sp, #8
 800fbce:	4770      	bx	lr
 800fbd0:	2064      	movs	r0, #100	; 0x64
 800fbd2:	b006      	add	sp, #24
 800fbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd8:	b002      	add	sp, #8
 800fbda:	4770      	bx	lr
 800fbdc:	200b      	movs	r0, #11
 800fbde:	b006      	add	sp, #24
 800fbe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe4:	b002      	add	sp, #8
 800fbe6:	4770      	bx	lr
 800fbe8:	2065      	movs	r0, #101	; 0x65
 800fbea:	e7f2      	b.n	800fbd2 <rcl_guard_condition_init_from_rmw+0x7e>
 800fbec:	6838      	ldr	r0, [r7, #0]
 800fbee:	3028      	adds	r0, #40	; 0x28
 800fbf0:	f000 fa50 	bl	8010094 <rmw_create_guard_condition>
 800fbf4:	6028      	str	r0, [r5, #0]
 800fbf6:	6865      	ldr	r5, [r4, #4]
 800fbf8:	682e      	ldr	r6, [r5, #0]
 800fbfa:	b126      	cbz	r6, 800fc06 <rcl_guard_condition_init_from_rmw+0xb2>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	712b      	strb	r3, [r5, #4]
 800fc00:	e7d7      	b.n	800fbb2 <rcl_guard_condition_init_from_rmw+0x5e>
 800fc02:	200a      	movs	r0, #10
 800fc04:	e7e5      	b.n	800fbd2 <rcl_guard_condition_init_from_rmw+0x7e>
 800fc06:	4628      	mov	r0, r5
 800fc08:	9b02      	ldr	r3, [sp, #8]
 800fc0a:	9905      	ldr	r1, [sp, #20]
 800fc0c:	4798      	blx	r3
 800fc0e:	6066      	str	r6, [r4, #4]
 800fc10:	2001      	movs	r0, #1
 800fc12:	e7de      	b.n	800fbd2 <rcl_guard_condition_init_from_rmw+0x7e>

0800fc14 <rcl_guard_condition_fini>:
 800fc14:	b570      	push	{r4, r5, r6, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	b1f0      	cbz	r0, 800fc58 <rcl_guard_condition_fini+0x44>
 800fc1a:	6843      	ldr	r3, [r0, #4]
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	b163      	cbz	r3, 800fc3a <rcl_guard_condition_fini+0x26>
 800fc20:	6818      	ldr	r0, [r3, #0]
 800fc22:	68de      	ldr	r6, [r3, #12]
 800fc24:	6999      	ldr	r1, [r3, #24]
 800fc26:	b160      	cbz	r0, 800fc42 <rcl_guard_condition_fini+0x2e>
 800fc28:	791d      	ldrb	r5, [r3, #4]
 800fc2a:	b965      	cbnz	r5, 800fc46 <rcl_guard_condition_fini+0x32>
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	47b0      	blx	r6
 800fc30:	2300      	movs	r3, #0
 800fc32:	4628      	mov	r0, r5
 800fc34:	6063      	str	r3, [r4, #4]
 800fc36:	b002      	add	sp, #8
 800fc38:	bd70      	pop	{r4, r5, r6, pc}
 800fc3a:	461d      	mov	r5, r3
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	b002      	add	sp, #8
 800fc40:	bd70      	pop	{r4, r5, r6, pc}
 800fc42:	4605      	mov	r5, r0
 800fc44:	e7f2      	b.n	800fc2c <rcl_guard_condition_fini+0x18>
 800fc46:	9101      	str	r1, [sp, #4]
 800fc48:	f000 fa38 	bl	80100bc <rmw_destroy_guard_condition>
 800fc4c:	1e05      	subs	r5, r0, #0
 800fc4e:	6863      	ldr	r3, [r4, #4]
 800fc50:	9901      	ldr	r1, [sp, #4]
 800fc52:	bf18      	it	ne
 800fc54:	2501      	movne	r5, #1
 800fc56:	e7e9      	b.n	800fc2c <rcl_guard_condition_fini+0x18>
 800fc58:	250b      	movs	r5, #11
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	b002      	add	sp, #8
 800fc5e:	bd70      	pop	{r4, r5, r6, pc}

0800fc60 <rcl_guard_condition_get_default_options>:
 800fc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc62:	b087      	sub	sp, #28
 800fc64:	4606      	mov	r6, r0
 800fc66:	4668      	mov	r0, sp
 800fc68:	f7f7 fdec 	bl	8007844 <rcutils_get_default_allocator>
 800fc6c:	4b09      	ldr	r3, [pc, #36]	; (800fc94 <rcl_guard_condition_get_default_options+0x34>)
 800fc6e:	46ee      	mov	lr, sp
 800fc70:	469c      	mov	ip, r3
 800fc72:	461d      	mov	r5, r3
 800fc74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc7e:	4634      	mov	r4, r6
 800fc80:	f8de 7000 	ldr.w	r7, [lr]
 800fc84:	f8cc 7000 	str.w	r7, [ip]
 800fc88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	6027      	str	r7, [r4, #0]
 800fc8e:	b007      	add	sp, #28
 800fc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc92:	bf00      	nop
 800fc94:	2000dafc 	.word	0x2000dafc

0800fc98 <rcl_validate_topic_name>:
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d07a      	beq.n	800fd92 <rcl_validate_topic_name+0xfa>
 800fc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fca0:	460e      	mov	r6, r1
 800fca2:	2900      	cmp	r1, #0
 800fca4:	d07c      	beq.n	800fda0 <rcl_validate_topic_name+0x108>
 800fca6:	4617      	mov	r7, r2
 800fca8:	4605      	mov	r5, r0
 800fcaa:	f7f0 faa3 	bl	80001f4 <strlen>
 800fcae:	b1b0      	cbz	r0, 800fcde <rcl_validate_topic_name+0x46>
 800fcb0:	f895 9000 	ldrb.w	r9, [r5]
 800fcb4:	f8df c180 	ldr.w	ip, [pc, #384]	; 800fe38 <rcl_validate_topic_name+0x1a0>
 800fcb8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800fcbc:	f013 0304 	ands.w	r3, r3, #4
 800fcc0:	d169      	bne.n	800fd96 <rcl_validate_topic_name+0xfe>
 800fcc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800fcc6:	f815 2008 	ldrb.w	r2, [r5, r8]
 800fcca:	2a2f      	cmp	r2, #47	; 0x2f
 800fccc:	d10e      	bne.n	800fcec <rcl_validate_topic_name+0x54>
 800fcce:	2202      	movs	r2, #2
 800fcd0:	6032      	str	r2, [r6, #0]
 800fcd2:	b36f      	cbz	r7, 800fd30 <rcl_validate_topic_name+0x98>
 800fcd4:	f8c7 8000 	str.w	r8, [r7]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcde:	2301      	movs	r3, #1
 800fce0:	6033      	str	r3, [r6, #0]
 800fce2:	b32f      	cbz	r7, 800fd30 <rcl_validate_topic_name+0x98>
 800fce4:	2000      	movs	r0, #0
 800fce6:	6038      	str	r0, [r7, #0]
 800fce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcec:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 800fcf0:	461c      	mov	r4, r3
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800fcf8:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fcfc:	f1be 0f09 	cmp.w	lr, #9
 800fd00:	d919      	bls.n	800fd36 <rcl_validate_topic_name+0x9e>
 800fd02:	f022 0e20 	bic.w	lr, r2, #32
 800fd06:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 800fd0a:	f1be 0f19 	cmp.w	lr, #25
 800fd0e:	d912      	bls.n	800fd36 <rcl_validate_topic_name+0x9e>
 800fd10:	2a5f      	cmp	r2, #95	; 0x5f
 800fd12:	d019      	beq.n	800fd48 <rcl_validate_topic_name+0xb0>
 800fd14:	2a2f      	cmp	r2, #47	; 0x2f
 800fd16:	d051      	beq.n	800fdbc <rcl_validate_topic_name+0x124>
 800fd18:	2a7e      	cmp	r2, #126	; 0x7e
 800fd1a:	d048      	beq.n	800fdae <rcl_validate_topic_name+0x116>
 800fd1c:	2a7b      	cmp	r2, #123	; 0x7b
 800fd1e:	d054      	beq.n	800fdca <rcl_validate_topic_name+0x132>
 800fd20:	2a7d      	cmp	r2, #125	; 0x7d
 800fd22:	d161      	bne.n	800fde8 <rcl_validate_topic_name+0x150>
 800fd24:	2c00      	cmp	r4, #0
 800fd26:	d155      	bne.n	800fdd4 <rcl_validate_topic_name+0x13c>
 800fd28:	2305      	movs	r3, #5
 800fd2a:	6033      	str	r3, [r6, #0]
 800fd2c:	b107      	cbz	r7, 800fd30 <rcl_validate_topic_name+0x98>
 800fd2e:	6039      	str	r1, [r7, #0]
 800fd30:	2000      	movs	r0, #0
 800fd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd36:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fd3a:	0752      	lsls	r2, r2, #29
 800fd3c:	d504      	bpl.n	800fd48 <rcl_validate_topic_name+0xb0>
 800fd3e:	b11c      	cbz	r4, 800fd48 <rcl_validate_topic_name+0xb0>
 800fd40:	b111      	cbz	r1, 800fd48 <rcl_validate_topic_name+0xb0>
 800fd42:	1e4a      	subs	r2, r1, #1
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d02d      	beq.n	800fda4 <rcl_validate_topic_name+0x10c>
 800fd48:	3101      	adds	r1, #1
 800fd4a:	4288      	cmp	r0, r1
 800fd4c:	d1d2      	bne.n	800fcf4 <rcl_validate_topic_name+0x5c>
 800fd4e:	2c00      	cmp	r4, #0
 800fd50:	d145      	bne.n	800fdde <rcl_validate_topic_name+0x146>
 800fd52:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 800fd56:	d04f      	beq.n	800fdf8 <rcl_validate_topic_name+0x160>
 800fd58:	4620      	mov	r0, r4
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	e006      	b.n	800fd6c <rcl_validate_topic_name+0xd4>
 800fd5e:	428b      	cmp	r3, r1
 800fd60:	f105 0501 	add.w	r5, r5, #1
 800fd64:	f103 0201 	add.w	r2, r3, #1
 800fd68:	d236      	bcs.n	800fdd8 <rcl_validate_topic_name+0x140>
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	4580      	cmp	r8, r0
 800fd6e:	f100 0001 	add.w	r0, r0, #1
 800fd72:	d0f4      	beq.n	800fd5e <rcl_validate_topic_name+0xc6>
 800fd74:	782a      	ldrb	r2, [r5, #0]
 800fd76:	2a2f      	cmp	r2, #47	; 0x2f
 800fd78:	d1f1      	bne.n	800fd5e <rcl_validate_topic_name+0xc6>
 800fd7a:	786a      	ldrb	r2, [r5, #1]
 800fd7c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fd80:	0754      	lsls	r4, r2, #29
 800fd82:	d5ec      	bpl.n	800fd5e <rcl_validate_topic_name+0xc6>
 800fd84:	2204      	movs	r2, #4
 800fd86:	6032      	str	r2, [r6, #0]
 800fd88:	2f00      	cmp	r7, #0
 800fd8a:	d0d1      	beq.n	800fd30 <rcl_validate_topic_name+0x98>
 800fd8c:	603b      	str	r3, [r7, #0]
 800fd8e:	2000      	movs	r0, #0
 800fd90:	e7aa      	b.n	800fce8 <rcl_validate_topic_name+0x50>
 800fd92:	200b      	movs	r0, #11
 800fd94:	4770      	bx	lr
 800fd96:	2304      	movs	r3, #4
 800fd98:	6033      	str	r3, [r6, #0]
 800fd9a:	2f00      	cmp	r7, #0
 800fd9c:	d1a2      	bne.n	800fce4 <rcl_validate_topic_name+0x4c>
 800fd9e:	e7c7      	b.n	800fd30 <rcl_validate_topic_name+0x98>
 800fda0:	200b      	movs	r0, #11
 800fda2:	e7a1      	b.n	800fce8 <rcl_validate_topic_name+0x50>
 800fda4:	2309      	movs	r3, #9
 800fda6:	6033      	str	r3, [r6, #0]
 800fda8:	2f00      	cmp	r7, #0
 800fdaa:	d1c0      	bne.n	800fd2e <rcl_validate_topic_name+0x96>
 800fdac:	e7c0      	b.n	800fd30 <rcl_validate_topic_name+0x98>
 800fdae:	2900      	cmp	r1, #0
 800fdb0:	d0ca      	beq.n	800fd48 <rcl_validate_topic_name+0xb0>
 800fdb2:	2306      	movs	r3, #6
 800fdb4:	6033      	str	r3, [r6, #0]
 800fdb6:	2f00      	cmp	r7, #0
 800fdb8:	d1b9      	bne.n	800fd2e <rcl_validate_topic_name+0x96>
 800fdba:	e7b9      	b.n	800fd30 <rcl_validate_topic_name+0x98>
 800fdbc:	2c00      	cmp	r4, #0
 800fdbe:	d0c3      	beq.n	800fd48 <rcl_validate_topic_name+0xb0>
 800fdc0:	2308      	movs	r3, #8
 800fdc2:	6033      	str	r3, [r6, #0]
 800fdc4:	2f00      	cmp	r7, #0
 800fdc6:	d1b2      	bne.n	800fd2e <rcl_validate_topic_name+0x96>
 800fdc8:	e7b2      	b.n	800fd30 <rcl_validate_topic_name+0x98>
 800fdca:	2c00      	cmp	r4, #0
 800fdcc:	d1f8      	bne.n	800fdc0 <rcl_validate_topic_name+0x128>
 800fdce:	460b      	mov	r3, r1
 800fdd0:	2401      	movs	r4, #1
 800fdd2:	e7b9      	b.n	800fd48 <rcl_validate_topic_name+0xb0>
 800fdd4:	2400      	movs	r4, #0
 800fdd6:	e7b7      	b.n	800fd48 <rcl_validate_topic_name+0xb0>
 800fdd8:	2000      	movs	r0, #0
 800fdda:	6030      	str	r0, [r6, #0]
 800fddc:	e784      	b.n	800fce8 <rcl_validate_topic_name+0x50>
 800fdde:	2205      	movs	r2, #5
 800fde0:	6032      	str	r2, [r6, #0]
 800fde2:	2f00      	cmp	r7, #0
 800fde4:	d1d2      	bne.n	800fd8c <rcl_validate_topic_name+0xf4>
 800fde6:	e7a3      	b.n	800fd30 <rcl_validate_topic_name+0x98>
 800fde8:	2c00      	cmp	r4, #0
 800fdea:	bf14      	ite	ne
 800fdec:	2308      	movne	r3, #8
 800fdee:	2303      	moveq	r3, #3
 800fdf0:	6033      	str	r3, [r6, #0]
 800fdf2:	2f00      	cmp	r7, #0
 800fdf4:	d19b      	bne.n	800fd2e <rcl_validate_topic_name+0x96>
 800fdf6:	e79b      	b.n	800fd30 <rcl_validate_topic_name+0x98>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e00a      	b.n	800fe12 <rcl_validate_topic_name+0x17a>
 800fdfc:	2c01      	cmp	r4, #1
 800fdfe:	d013      	beq.n	800fe28 <rcl_validate_topic_name+0x190>
 800fe00:	4299      	cmp	r1, r3
 800fe02:	f104 0401 	add.w	r4, r4, #1
 800fe06:	f105 0501 	add.w	r5, r5, #1
 800fe0a:	f103 0201 	add.w	r2, r3, #1
 800fe0e:	d9e3      	bls.n	800fdd8 <rcl_validate_topic_name+0x140>
 800fe10:	4613      	mov	r3, r2
 800fe12:	45a0      	cmp	r8, r4
 800fe14:	d0f4      	beq.n	800fe00 <rcl_validate_topic_name+0x168>
 800fe16:	782a      	ldrb	r2, [r5, #0]
 800fe18:	2a2f      	cmp	r2, #47	; 0x2f
 800fe1a:	d1ef      	bne.n	800fdfc <rcl_validate_topic_name+0x164>
 800fe1c:	786a      	ldrb	r2, [r5, #1]
 800fe1e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fe22:	0752      	lsls	r2, r2, #29
 800fe24:	d5ec      	bpl.n	800fe00 <rcl_validate_topic_name+0x168>
 800fe26:	e7ad      	b.n	800fd84 <rcl_validate_topic_name+0xec>
 800fe28:	2307      	movs	r3, #7
 800fe2a:	6033      	str	r3, [r6, #0]
 800fe2c:	2f00      	cmp	r7, #0
 800fe2e:	f43f af7f 	beq.w	800fd30 <rcl_validate_topic_name+0x98>
 800fe32:	603c      	str	r4, [r7, #0]
 800fe34:	2000      	movs	r0, #0
 800fe36:	e757      	b.n	800fce8 <rcl_validate_topic_name+0x50>
 800fe38:	080122bc 	.word	0x080122bc

0800fe3c <on_status>:
 800fe3c:	b082      	sub	sp, #8
 800fe3e:	b002      	add	sp, #8
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop

0800fe44 <on_topic>:
 800fe44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe48:	4a22      	ldr	r2, [pc, #136]	; (800fed4 <on_topic+0x90>)
 800fe4a:	b094      	sub	sp, #80	; 0x50
 800fe4c:	6812      	ldr	r2, [r2, #0]
 800fe4e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800fe50:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 800fe54:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 800fe58:	b3c2      	cbz	r2, 800fecc <on_topic+0x88>
 800fe5a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 800fe5e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 800fe62:	e001      	b.n	800fe68 <on_topic+0x24>
 800fe64:	6852      	ldr	r2, [r2, #4]
 800fe66:	b38a      	cbz	r2, 800fecc <on_topic+0x88>
 800fe68:	6894      	ldr	r4, [r2, #8]
 800fe6a:	8aa3      	ldrh	r3, [r4, #20]
 800fe6c:	428b      	cmp	r3, r1
 800fe6e:	d1f9      	bne.n	800fe64 <on_topic+0x20>
 800fe70:	7da3      	ldrb	r3, [r4, #22]
 800fe72:	4283      	cmp	r3, r0
 800fe74:	d1f6      	bne.n	800fe64 <on_topic+0x20>
 800fe76:	2248      	movs	r2, #72	; 0x48
 800fe78:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800fe7c:	4668      	mov	r0, sp
 800fe7e:	f000 fdc0 	bl	8010a02 <memcpy>
 800fe82:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800fe86:	cb0c      	ldmia	r3, {r2, r3}
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f7f8 f8c9 	bl	8008020 <rmw_uxrce_get_static_input_buffer_for_entity>
 800fe8e:	4607      	mov	r7, r0
 800fe90:	b1e0      	cbz	r0, 800fecc <on_topic+0x88>
 800fe92:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800fe96:	4632      	mov	r2, r6
 800fe98:	4628      	mov	r0, r5
 800fe9a:	f108 0110 	add.w	r1, r8, #16
 800fe9e:	f7fe f831 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800fea2:	b930      	cbnz	r0, 800feb2 <on_topic+0x6e>
 800fea4:	480c      	ldr	r0, [pc, #48]	; (800fed8 <on_topic+0x94>)
 800fea6:	4639      	mov	r1, r7
 800fea8:	b014      	add	sp, #80	; 0x50
 800feaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feae:	f7fd ba63 	b.w	800d378 <put_memory>
 800feb2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 800feb6:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 800feba:	f7fd ff19 	bl	800dcf0 <rmw_uros_epoch_nanos>
 800febe:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 800fec2:	2305      	movs	r3, #5
 800fec4:	e942 0102 	strd	r0, r1, [r2, #-8]
 800fec8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 800fecc:	b014      	add	sp, #80	; 0x50
 800fece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed2:	bf00      	nop
 800fed4:	2000d9cc 	.word	0x2000d9cc
 800fed8:	2000d9bc 	.word	0x2000d9bc

0800fedc <on_request>:
 800fedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee0:	4823      	ldr	r0, [pc, #140]	; (800ff70 <on_request+0x94>)
 800fee2:	b094      	sub	sp, #80	; 0x50
 800fee4:	6800      	ldr	r0, [r0, #0]
 800fee6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800fee8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 800feec:	9113      	str	r1, [sp, #76]	; 0x4c
 800feee:	2800      	cmp	r0, #0
 800fef0:	d03b      	beq.n	800ff6a <on_request+0x8e>
 800fef2:	461d      	mov	r5, r3
 800fef4:	e001      	b.n	800fefa <on_request+0x1e>
 800fef6:	6840      	ldr	r0, [r0, #4]
 800fef8:	b3b8      	cbz	r0, 800ff6a <on_request+0x8e>
 800fefa:	6884      	ldr	r4, [r0, #8]
 800fefc:	8b21      	ldrh	r1, [r4, #24]
 800fefe:	4291      	cmp	r1, r2
 800ff00:	d1f9      	bne.n	800fef6 <on_request+0x1a>
 800ff02:	2248      	movs	r2, #72	; 0x48
 800ff04:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800ff08:	4668      	mov	r0, sp
 800ff0a:	f000 fd7a 	bl	8010a02 <memcpy>
 800ff0e:	f104 0320 	add.w	r3, r4, #32
 800ff12:	cb0c      	ldmia	r3, {r2, r3}
 800ff14:	4620      	mov	r0, r4
 800ff16:	f7f8 f883 	bl	8008020 <rmw_uxrce_get_static_input_buffer_for_entity>
 800ff1a:	4680      	mov	r8, r0
 800ff1c:	b328      	cbz	r0, 800ff6a <on_request+0x8e>
 800ff1e:	4638      	mov	r0, r7
 800ff20:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800ff24:	4632      	mov	r2, r6
 800ff26:	f107 0110 	add.w	r1, r7, #16
 800ff2a:	f7fd ffeb 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800ff2e:	b930      	cbnz	r0, 800ff3e <on_request+0x62>
 800ff30:	4810      	ldr	r0, [pc, #64]	; (800ff74 <on_request+0x98>)
 800ff32:	4641      	mov	r1, r8
 800ff34:	b014      	add	sp, #80	; 0x50
 800ff36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3a:	f7fd ba1d 	b.w	800d378 <put_memory>
 800ff3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff40:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 800ff44:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 800ff48:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 800ff4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff50:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ff54:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ff58:	f7fd feca 	bl	800dcf0 <rmw_uros_epoch_nanos>
 800ff5c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800ff60:	2303      	movs	r3, #3
 800ff62:	e942 0102 	strd	r0, r1, [r2, #-8]
 800ff66:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 800ff6a:	b014      	add	sp, #80	; 0x50
 800ff6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff70:	2000d99c 	.word	0x2000d99c
 800ff74:	2000d9bc 	.word	0x2000d9bc

0800ff78 <on_reply>:
 800ff78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7c:	4821      	ldr	r0, [pc, #132]	; (8010004 <on_reply+0x8c>)
 800ff7e:	b094      	sub	sp, #80	; 0x50
 800ff80:	6800      	ldr	r0, [r0, #0]
 800ff82:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ff84:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 800ff88:	9113      	str	r1, [sp, #76]	; 0x4c
 800ff8a:	b3b8      	cbz	r0, 800fffc <on_reply+0x84>
 800ff8c:	461d      	mov	r5, r3
 800ff8e:	e001      	b.n	800ff94 <on_reply+0x1c>
 800ff90:	6840      	ldr	r0, [r0, #4]
 800ff92:	b398      	cbz	r0, 800fffc <on_reply+0x84>
 800ff94:	6884      	ldr	r4, [r0, #8]
 800ff96:	8b21      	ldrh	r1, [r4, #24]
 800ff98:	4291      	cmp	r1, r2
 800ff9a:	d1f9      	bne.n	800ff90 <on_reply+0x18>
 800ff9c:	2248      	movs	r2, #72	; 0x48
 800ff9e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800ffa2:	4668      	mov	r0, sp
 800ffa4:	f000 fd2d 	bl	8010a02 <memcpy>
 800ffa8:	f104 0320 	add.w	r3, r4, #32
 800ffac:	cb0c      	ldmia	r3, {r2, r3}
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f7f8 f836 	bl	8008020 <rmw_uxrce_get_static_input_buffer_for_entity>
 800ffb4:	4680      	mov	r8, r0
 800ffb6:	b308      	cbz	r0, 800fffc <on_reply+0x84>
 800ffb8:	4638      	mov	r0, r7
 800ffba:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800ffbe:	4632      	mov	r2, r6
 800ffc0:	f107 0110 	add.w	r1, r7, #16
 800ffc4:	f7fd ff9e 	bl	800df04 <ucdr_deserialize_array_uint8_t>
 800ffc8:	b930      	cbnz	r0, 800ffd8 <on_reply+0x60>
 800ffca:	480f      	ldr	r0, [pc, #60]	; (8010008 <on_reply+0x90>)
 800ffcc:	4641      	mov	r1, r8
 800ffce:	b014      	add	sp, #80	; 0x50
 800ffd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd4:	f7fd b9d0 	b.w	800d378 <put_memory>
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 800ffde:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 800ffe2:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 800ffe6:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 800ffea:	f7fd fe81 	bl	800dcf0 <rmw_uros_epoch_nanos>
 800ffee:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800fff2:	2304      	movs	r3, #4
 800fff4:	e942 0102 	strd	r0, r1, [r2, #-8]
 800fff8:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 800fffc:	b014      	add	sp, #80	; 0x50
 800fffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010002:	bf00      	nop
 8010004:	200090b0 	.word	0x200090b0
 8010008:	2000d9bc 	.word	0x2000d9bc

0801000c <rmw_destroy_client>:
 801000c:	b570      	push	{r4, r5, r6, lr}
 801000e:	b128      	cbz	r0, 801001c <rmw_destroy_client+0x10>
 8010010:	4604      	mov	r4, r0
 8010012:	6800      	ldr	r0, [r0, #0]
 8010014:	460d      	mov	r5, r1
 8010016:	f7f8 f8d3 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 801001a:	b910      	cbnz	r0, 8010022 <rmw_destroy_client+0x16>
 801001c:	2401      	movs	r4, #1
 801001e:	4620      	mov	r0, r4
 8010020:	bd70      	pop	{r4, r5, r6, pc}
 8010022:	6863      	ldr	r3, [r4, #4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d0f9      	beq.n	801001c <rmw_destroy_client+0x10>
 8010028:	2d00      	cmp	r5, #0
 801002a:	d0f7      	beq.n	801001c <rmw_destroy_client+0x10>
 801002c:	6828      	ldr	r0, [r5, #0]
 801002e:	f7f8 f8c7 	bl	80081c0 <is_uxrce_rmw_identifier_valid>
 8010032:	2800      	cmp	r0, #0
 8010034:	d0f2      	beq.n	801001c <rmw_destroy_client+0x10>
 8010036:	686e      	ldr	r6, [r5, #4]
 8010038:	2e00      	cmp	r6, #0
 801003a:	d0ef      	beq.n	801001c <rmw_destroy_client+0x10>
 801003c:	6864      	ldr	r4, [r4, #4]
 801003e:	6932      	ldr	r2, [r6, #16]
 8010040:	6920      	ldr	r0, [r4, #16]
 8010042:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010046:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801004a:	6819      	ldr	r1, [r3, #0]
 801004c:	f7fe fe38 	bl	800ecc0 <uxr_buffer_cancel_data>
 8010050:	4602      	mov	r2, r0
 8010052:	6920      	ldr	r0, [r4, #16]
 8010054:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010058:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801005c:	f7f8 f830 	bl	80080c0 <run_xrce_session>
 8010060:	6920      	ldr	r0, [r4, #16]
 8010062:	6932      	ldr	r2, [r6, #16]
 8010064:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010068:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801006c:	6819      	ldr	r1, [r3, #0]
 801006e:	f7f9 f963 	bl	8009338 <uxr_buffer_delete_entity>
 8010072:	4602      	mov	r2, r0
 8010074:	6920      	ldr	r0, [r4, #16]
 8010076:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801007a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801007e:	f7f8 f81f 	bl	80080c0 <run_xrce_session>
 8010082:	2800      	cmp	r0, #0
 8010084:	4628      	mov	r0, r5
 8010086:	bf14      	ite	ne
 8010088:	2400      	movne	r4, #0
 801008a:	2402      	moveq	r4, #2
 801008c:	f7f7 ffa6 	bl	8007fdc <rmw_uxrce_fini_client_memory>
 8010090:	e7c5      	b.n	801001e <rmw_destroy_client+0x12>
 8010092:	bf00      	nop

08010094 <rmw_create_guard_condition>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4605      	mov	r5, r0
 8010098:	4807      	ldr	r0, [pc, #28]	; (80100b8 <rmw_create_guard_condition+0x24>)
 801009a:	f7fd f95d 	bl	800d358 <get_memory>
 801009e:	b148      	cbz	r0, 80100b4 <rmw_create_guard_condition+0x20>
 80100a0:	6884      	ldr	r4, [r0, #8]
 80100a2:	2300      	movs	r3, #0
 80100a4:	7423      	strb	r3, [r4, #16]
 80100a6:	61e5      	str	r5, [r4, #28]
 80100a8:	f7fd f97a 	bl	800d3a0 <rmw_get_implementation_identifier>
 80100ac:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80100b0:	f104 0014 	add.w	r0, r4, #20
 80100b4:	bd38      	pop	{r3, r4, r5, pc}
 80100b6:	bf00      	nop
 80100b8:	2000d95c 	.word	0x2000d95c

080100bc <rmw_destroy_guard_condition>:
 80100bc:	b508      	push	{r3, lr}
 80100be:	4b08      	ldr	r3, [pc, #32]	; (80100e0 <rmw_destroy_guard_condition+0x24>)
 80100c0:	6819      	ldr	r1, [r3, #0]
 80100c2:	b911      	cbnz	r1, 80100ca <rmw_destroy_guard_condition+0xe>
 80100c4:	e00a      	b.n	80100dc <rmw_destroy_guard_condition+0x20>
 80100c6:	6849      	ldr	r1, [r1, #4]
 80100c8:	b141      	cbz	r1, 80100dc <rmw_destroy_guard_condition+0x20>
 80100ca:	688b      	ldr	r3, [r1, #8]
 80100cc:	3314      	adds	r3, #20
 80100ce:	4298      	cmp	r0, r3
 80100d0:	d1f9      	bne.n	80100c6 <rmw_destroy_guard_condition+0xa>
 80100d2:	4803      	ldr	r0, [pc, #12]	; (80100e0 <rmw_destroy_guard_condition+0x24>)
 80100d4:	f7fd f950 	bl	800d378 <put_memory>
 80100d8:	2000      	movs	r0, #0
 80100da:	bd08      	pop	{r3, pc}
 80100dc:	2001      	movs	r0, #1
 80100de:	bd08      	pop	{r3, pc}
 80100e0:	2000d95c 	.word	0x2000d95c

080100e4 <calloc>:
 80100e4:	4b02      	ldr	r3, [pc, #8]	; (80100f0 <calloc+0xc>)
 80100e6:	460a      	mov	r2, r1
 80100e8:	4601      	mov	r1, r0
 80100ea:	6818      	ldr	r0, [r3, #0]
 80100ec:	f000 b802 	b.w	80100f4 <_calloc_r>
 80100f0:	2000010c 	.word	0x2000010c

080100f4 <_calloc_r>:
 80100f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100f6:	fba1 2402 	umull	r2, r4, r1, r2
 80100fa:	b94c      	cbnz	r4, 8010110 <_calloc_r+0x1c>
 80100fc:	4611      	mov	r1, r2
 80100fe:	9201      	str	r2, [sp, #4]
 8010100:	f000 f886 	bl	8010210 <_malloc_r>
 8010104:	9a01      	ldr	r2, [sp, #4]
 8010106:	4605      	mov	r5, r0
 8010108:	b930      	cbnz	r0, 8010118 <_calloc_r+0x24>
 801010a:	4628      	mov	r0, r5
 801010c:	b003      	add	sp, #12
 801010e:	bd30      	pop	{r4, r5, pc}
 8010110:	220c      	movs	r2, #12
 8010112:	6002      	str	r2, [r0, #0]
 8010114:	2500      	movs	r5, #0
 8010116:	e7f8      	b.n	801010a <_calloc_r+0x16>
 8010118:	4621      	mov	r1, r4
 801011a:	f000 fba9 	bl	8010870 <memset>
 801011e:	e7f4      	b.n	801010a <_calloc_r+0x16>

08010120 <getenv>:
 8010120:	b507      	push	{r0, r1, r2, lr}
 8010122:	4b04      	ldr	r3, [pc, #16]	; (8010134 <getenv+0x14>)
 8010124:	4601      	mov	r1, r0
 8010126:	aa01      	add	r2, sp, #4
 8010128:	6818      	ldr	r0, [r3, #0]
 801012a:	f000 f805 	bl	8010138 <_findenv_r>
 801012e:	b003      	add	sp, #12
 8010130:	f85d fb04 	ldr.w	pc, [sp], #4
 8010134:	2000010c 	.word	0x2000010c

08010138 <_findenv_r>:
 8010138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801013c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80101ac <_findenv_r+0x74>
 8010140:	4607      	mov	r7, r0
 8010142:	4689      	mov	r9, r1
 8010144:	4616      	mov	r6, r2
 8010146:	f000 fc89 	bl	8010a5c <__env_lock>
 801014a:	f8da 4000 	ldr.w	r4, [sl]
 801014e:	b134      	cbz	r4, 801015e <_findenv_r+0x26>
 8010150:	464b      	mov	r3, r9
 8010152:	4698      	mov	r8, r3
 8010154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010158:	b13a      	cbz	r2, 801016a <_findenv_r+0x32>
 801015a:	2a3d      	cmp	r2, #61	; 0x3d
 801015c:	d1f9      	bne.n	8010152 <_findenv_r+0x1a>
 801015e:	4638      	mov	r0, r7
 8010160:	f000 fc82 	bl	8010a68 <__env_unlock>
 8010164:	2000      	movs	r0, #0
 8010166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016a:	eba8 0809 	sub.w	r8, r8, r9
 801016e:	46a3      	mov	fp, r4
 8010170:	f854 0b04 	ldr.w	r0, [r4], #4
 8010174:	2800      	cmp	r0, #0
 8010176:	d0f2      	beq.n	801015e <_findenv_r+0x26>
 8010178:	4642      	mov	r2, r8
 801017a:	4649      	mov	r1, r9
 801017c:	f000 fb8d 	bl	801089a <strncmp>
 8010180:	2800      	cmp	r0, #0
 8010182:	d1f4      	bne.n	801016e <_findenv_r+0x36>
 8010184:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010188:	eb03 0508 	add.w	r5, r3, r8
 801018c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010190:	2b3d      	cmp	r3, #61	; 0x3d
 8010192:	d1ec      	bne.n	801016e <_findenv_r+0x36>
 8010194:	f8da 3000 	ldr.w	r3, [sl]
 8010198:	ebab 0303 	sub.w	r3, fp, r3
 801019c:	109b      	asrs	r3, r3, #2
 801019e:	4638      	mov	r0, r7
 80101a0:	6033      	str	r3, [r6, #0]
 80101a2:	f000 fc61 	bl	8010a68 <__env_unlock>
 80101a6:	1c68      	adds	r0, r5, #1
 80101a8:	e7dd      	b.n	8010166 <_findenv_r+0x2e>
 80101aa:	bf00      	nop
 80101ac:	20000000 	.word	0x20000000

080101b0 <malloc>:
 80101b0:	4b02      	ldr	r3, [pc, #8]	; (80101bc <malloc+0xc>)
 80101b2:	4601      	mov	r1, r0
 80101b4:	6818      	ldr	r0, [r3, #0]
 80101b6:	f000 b82b 	b.w	8010210 <_malloc_r>
 80101ba:	bf00      	nop
 80101bc:	2000010c 	.word	0x2000010c

080101c0 <free>:
 80101c0:	4b02      	ldr	r3, [pc, #8]	; (80101cc <free+0xc>)
 80101c2:	4601      	mov	r1, r0
 80101c4:	6818      	ldr	r0, [r3, #0]
 80101c6:	f000 bc55 	b.w	8010a74 <_free_r>
 80101ca:	bf00      	nop
 80101cc:	2000010c 	.word	0x2000010c

080101d0 <sbrk_aligned>:
 80101d0:	b570      	push	{r4, r5, r6, lr}
 80101d2:	4e0e      	ldr	r6, [pc, #56]	; (801020c <sbrk_aligned+0x3c>)
 80101d4:	460c      	mov	r4, r1
 80101d6:	6831      	ldr	r1, [r6, #0]
 80101d8:	4605      	mov	r5, r0
 80101da:	b911      	cbnz	r1, 80101e2 <sbrk_aligned+0x12>
 80101dc:	f000 fbba 	bl	8010954 <_sbrk_r>
 80101e0:	6030      	str	r0, [r6, #0]
 80101e2:	4621      	mov	r1, r4
 80101e4:	4628      	mov	r0, r5
 80101e6:	f000 fbb5 	bl	8010954 <_sbrk_r>
 80101ea:	1c43      	adds	r3, r0, #1
 80101ec:	d00a      	beq.n	8010204 <sbrk_aligned+0x34>
 80101ee:	1cc4      	adds	r4, r0, #3
 80101f0:	f024 0403 	bic.w	r4, r4, #3
 80101f4:	42a0      	cmp	r0, r4
 80101f6:	d007      	beq.n	8010208 <sbrk_aligned+0x38>
 80101f8:	1a21      	subs	r1, r4, r0
 80101fa:	4628      	mov	r0, r5
 80101fc:	f000 fbaa 	bl	8010954 <_sbrk_r>
 8010200:	3001      	adds	r0, #1
 8010202:	d101      	bne.n	8010208 <sbrk_aligned+0x38>
 8010204:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010208:	4620      	mov	r0, r4
 801020a:	bd70      	pop	{r4, r5, r6, pc}
 801020c:	2000db14 	.word	0x2000db14

08010210 <_malloc_r>:
 8010210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010214:	1ccd      	adds	r5, r1, #3
 8010216:	f025 0503 	bic.w	r5, r5, #3
 801021a:	3508      	adds	r5, #8
 801021c:	2d0c      	cmp	r5, #12
 801021e:	bf38      	it	cc
 8010220:	250c      	movcc	r5, #12
 8010222:	2d00      	cmp	r5, #0
 8010224:	4607      	mov	r7, r0
 8010226:	db01      	blt.n	801022c <_malloc_r+0x1c>
 8010228:	42a9      	cmp	r1, r5
 801022a:	d905      	bls.n	8010238 <_malloc_r+0x28>
 801022c:	230c      	movs	r3, #12
 801022e:	603b      	str	r3, [r7, #0]
 8010230:	2600      	movs	r6, #0
 8010232:	4630      	mov	r0, r6
 8010234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010238:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801030c <_malloc_r+0xfc>
 801023c:	f000 f868 	bl	8010310 <__malloc_lock>
 8010240:	f8d8 3000 	ldr.w	r3, [r8]
 8010244:	461c      	mov	r4, r3
 8010246:	bb5c      	cbnz	r4, 80102a0 <_malloc_r+0x90>
 8010248:	4629      	mov	r1, r5
 801024a:	4638      	mov	r0, r7
 801024c:	f7ff ffc0 	bl	80101d0 <sbrk_aligned>
 8010250:	1c43      	adds	r3, r0, #1
 8010252:	4604      	mov	r4, r0
 8010254:	d155      	bne.n	8010302 <_malloc_r+0xf2>
 8010256:	f8d8 4000 	ldr.w	r4, [r8]
 801025a:	4626      	mov	r6, r4
 801025c:	2e00      	cmp	r6, #0
 801025e:	d145      	bne.n	80102ec <_malloc_r+0xdc>
 8010260:	2c00      	cmp	r4, #0
 8010262:	d048      	beq.n	80102f6 <_malloc_r+0xe6>
 8010264:	6823      	ldr	r3, [r4, #0]
 8010266:	4631      	mov	r1, r6
 8010268:	4638      	mov	r0, r7
 801026a:	eb04 0903 	add.w	r9, r4, r3
 801026e:	f000 fb71 	bl	8010954 <_sbrk_r>
 8010272:	4581      	cmp	r9, r0
 8010274:	d13f      	bne.n	80102f6 <_malloc_r+0xe6>
 8010276:	6821      	ldr	r1, [r4, #0]
 8010278:	1a6d      	subs	r5, r5, r1
 801027a:	4629      	mov	r1, r5
 801027c:	4638      	mov	r0, r7
 801027e:	f7ff ffa7 	bl	80101d0 <sbrk_aligned>
 8010282:	3001      	adds	r0, #1
 8010284:	d037      	beq.n	80102f6 <_malloc_r+0xe6>
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	442b      	add	r3, r5
 801028a:	6023      	str	r3, [r4, #0]
 801028c:	f8d8 3000 	ldr.w	r3, [r8]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d038      	beq.n	8010306 <_malloc_r+0xf6>
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	42a2      	cmp	r2, r4
 8010298:	d12b      	bne.n	80102f2 <_malloc_r+0xe2>
 801029a:	2200      	movs	r2, #0
 801029c:	605a      	str	r2, [r3, #4]
 801029e:	e00f      	b.n	80102c0 <_malloc_r+0xb0>
 80102a0:	6822      	ldr	r2, [r4, #0]
 80102a2:	1b52      	subs	r2, r2, r5
 80102a4:	d41f      	bmi.n	80102e6 <_malloc_r+0xd6>
 80102a6:	2a0b      	cmp	r2, #11
 80102a8:	d917      	bls.n	80102da <_malloc_r+0xca>
 80102aa:	1961      	adds	r1, r4, r5
 80102ac:	42a3      	cmp	r3, r4
 80102ae:	6025      	str	r5, [r4, #0]
 80102b0:	bf18      	it	ne
 80102b2:	6059      	strne	r1, [r3, #4]
 80102b4:	6863      	ldr	r3, [r4, #4]
 80102b6:	bf08      	it	eq
 80102b8:	f8c8 1000 	streq.w	r1, [r8]
 80102bc:	5162      	str	r2, [r4, r5]
 80102be:	604b      	str	r3, [r1, #4]
 80102c0:	4638      	mov	r0, r7
 80102c2:	f104 060b 	add.w	r6, r4, #11
 80102c6:	f000 f829 	bl	801031c <__malloc_unlock>
 80102ca:	f026 0607 	bic.w	r6, r6, #7
 80102ce:	1d23      	adds	r3, r4, #4
 80102d0:	1af2      	subs	r2, r6, r3
 80102d2:	d0ae      	beq.n	8010232 <_malloc_r+0x22>
 80102d4:	1b9b      	subs	r3, r3, r6
 80102d6:	50a3      	str	r3, [r4, r2]
 80102d8:	e7ab      	b.n	8010232 <_malloc_r+0x22>
 80102da:	42a3      	cmp	r3, r4
 80102dc:	6862      	ldr	r2, [r4, #4]
 80102de:	d1dd      	bne.n	801029c <_malloc_r+0x8c>
 80102e0:	f8c8 2000 	str.w	r2, [r8]
 80102e4:	e7ec      	b.n	80102c0 <_malloc_r+0xb0>
 80102e6:	4623      	mov	r3, r4
 80102e8:	6864      	ldr	r4, [r4, #4]
 80102ea:	e7ac      	b.n	8010246 <_malloc_r+0x36>
 80102ec:	4634      	mov	r4, r6
 80102ee:	6876      	ldr	r6, [r6, #4]
 80102f0:	e7b4      	b.n	801025c <_malloc_r+0x4c>
 80102f2:	4613      	mov	r3, r2
 80102f4:	e7cc      	b.n	8010290 <_malloc_r+0x80>
 80102f6:	230c      	movs	r3, #12
 80102f8:	603b      	str	r3, [r7, #0]
 80102fa:	4638      	mov	r0, r7
 80102fc:	f000 f80e 	bl	801031c <__malloc_unlock>
 8010300:	e797      	b.n	8010232 <_malloc_r+0x22>
 8010302:	6025      	str	r5, [r4, #0]
 8010304:	e7dc      	b.n	80102c0 <_malloc_r+0xb0>
 8010306:	605b      	str	r3, [r3, #4]
 8010308:	deff      	udf	#255	; 0xff
 801030a:	bf00      	nop
 801030c:	2000db10 	.word	0x2000db10

08010310 <__malloc_lock>:
 8010310:	4801      	ldr	r0, [pc, #4]	; (8010318 <__malloc_lock+0x8>)
 8010312:	f000 bb6c 	b.w	80109ee <__retarget_lock_acquire_recursive>
 8010316:	bf00      	nop
 8010318:	2000dc59 	.word	0x2000dc59

0801031c <__malloc_unlock>:
 801031c:	4801      	ldr	r0, [pc, #4]	; (8010324 <__malloc_unlock+0x8>)
 801031e:	f000 bb67 	b.w	80109f0 <__retarget_lock_release_recursive>
 8010322:	bf00      	nop
 8010324:	2000dc59 	.word	0x2000dc59

08010328 <srand>:
 8010328:	b538      	push	{r3, r4, r5, lr}
 801032a:	4b10      	ldr	r3, [pc, #64]	; (801036c <srand+0x44>)
 801032c:	681d      	ldr	r5, [r3, #0]
 801032e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010330:	4604      	mov	r4, r0
 8010332:	b9b3      	cbnz	r3, 8010362 <srand+0x3a>
 8010334:	2018      	movs	r0, #24
 8010336:	f7ff ff3b 	bl	80101b0 <malloc>
 801033a:	4602      	mov	r2, r0
 801033c:	6328      	str	r0, [r5, #48]	; 0x30
 801033e:	b920      	cbnz	r0, 801034a <srand+0x22>
 8010340:	4b0b      	ldr	r3, [pc, #44]	; (8010370 <srand+0x48>)
 8010342:	480c      	ldr	r0, [pc, #48]	; (8010374 <srand+0x4c>)
 8010344:	2146      	movs	r1, #70	; 0x46
 8010346:	f000 fb6b 	bl	8010a20 <__assert_func>
 801034a:	490b      	ldr	r1, [pc, #44]	; (8010378 <srand+0x50>)
 801034c:	4b0b      	ldr	r3, [pc, #44]	; (801037c <srand+0x54>)
 801034e:	e9c0 1300 	strd	r1, r3, [r0]
 8010352:	4b0b      	ldr	r3, [pc, #44]	; (8010380 <srand+0x58>)
 8010354:	6083      	str	r3, [r0, #8]
 8010356:	230b      	movs	r3, #11
 8010358:	8183      	strh	r3, [r0, #12]
 801035a:	2100      	movs	r1, #0
 801035c:	2001      	movs	r0, #1
 801035e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010362:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010364:	2200      	movs	r2, #0
 8010366:	611c      	str	r4, [r3, #16]
 8010368:	615a      	str	r2, [r3, #20]
 801036a:	bd38      	pop	{r3, r4, r5, pc}
 801036c:	2000010c 	.word	0x2000010c
 8010370:	0801224c 	.word	0x0801224c
 8010374:	08012263 	.word	0x08012263
 8010378:	abcd330e 	.word	0xabcd330e
 801037c:	e66d1234 	.word	0xe66d1234
 8010380:	0005deec 	.word	0x0005deec

08010384 <rand>:
 8010384:	4b16      	ldr	r3, [pc, #88]	; (80103e0 <rand+0x5c>)
 8010386:	b510      	push	{r4, lr}
 8010388:	681c      	ldr	r4, [r3, #0]
 801038a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801038c:	b9b3      	cbnz	r3, 80103bc <rand+0x38>
 801038e:	2018      	movs	r0, #24
 8010390:	f7ff ff0e 	bl	80101b0 <malloc>
 8010394:	4602      	mov	r2, r0
 8010396:	6320      	str	r0, [r4, #48]	; 0x30
 8010398:	b920      	cbnz	r0, 80103a4 <rand+0x20>
 801039a:	4b12      	ldr	r3, [pc, #72]	; (80103e4 <rand+0x60>)
 801039c:	4812      	ldr	r0, [pc, #72]	; (80103e8 <rand+0x64>)
 801039e:	2152      	movs	r1, #82	; 0x52
 80103a0:	f000 fb3e 	bl	8010a20 <__assert_func>
 80103a4:	4911      	ldr	r1, [pc, #68]	; (80103ec <rand+0x68>)
 80103a6:	4b12      	ldr	r3, [pc, #72]	; (80103f0 <rand+0x6c>)
 80103a8:	e9c0 1300 	strd	r1, r3, [r0]
 80103ac:	4b11      	ldr	r3, [pc, #68]	; (80103f4 <rand+0x70>)
 80103ae:	6083      	str	r3, [r0, #8]
 80103b0:	230b      	movs	r3, #11
 80103b2:	8183      	strh	r3, [r0, #12]
 80103b4:	2100      	movs	r1, #0
 80103b6:	2001      	movs	r0, #1
 80103b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80103bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80103be:	480e      	ldr	r0, [pc, #56]	; (80103f8 <rand+0x74>)
 80103c0:	690b      	ldr	r3, [r1, #16]
 80103c2:	694c      	ldr	r4, [r1, #20]
 80103c4:	4a0d      	ldr	r2, [pc, #52]	; (80103fc <rand+0x78>)
 80103c6:	4358      	muls	r0, r3
 80103c8:	fb02 0004 	mla	r0, r2, r4, r0
 80103cc:	fba3 3202 	umull	r3, r2, r3, r2
 80103d0:	3301      	adds	r3, #1
 80103d2:	eb40 0002 	adc.w	r0, r0, r2
 80103d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80103da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80103de:	bd10      	pop	{r4, pc}
 80103e0:	2000010c 	.word	0x2000010c
 80103e4:	0801224c 	.word	0x0801224c
 80103e8:	08012263 	.word	0x08012263
 80103ec:	abcd330e 	.word	0xabcd330e
 80103f0:	e66d1234 	.word	0xe66d1234
 80103f4:	0005deec 	.word	0x0005deec
 80103f8:	5851f42d 	.word	0x5851f42d
 80103fc:	4c957f2d 	.word	0x4c957f2d

08010400 <realloc>:
 8010400:	4b02      	ldr	r3, [pc, #8]	; (801040c <realloc+0xc>)
 8010402:	460a      	mov	r2, r1
 8010404:	4601      	mov	r1, r0
 8010406:	6818      	ldr	r0, [r3, #0]
 8010408:	f000 b802 	b.w	8010410 <_realloc_r>
 801040c:	2000010c 	.word	0x2000010c

08010410 <_realloc_r>:
 8010410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010414:	4680      	mov	r8, r0
 8010416:	4614      	mov	r4, r2
 8010418:	460e      	mov	r6, r1
 801041a:	b921      	cbnz	r1, 8010426 <_realloc_r+0x16>
 801041c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010420:	4611      	mov	r1, r2
 8010422:	f7ff bef5 	b.w	8010210 <_malloc_r>
 8010426:	b92a      	cbnz	r2, 8010434 <_realloc_r+0x24>
 8010428:	f000 fb24 	bl	8010a74 <_free_r>
 801042c:	4625      	mov	r5, r4
 801042e:	4628      	mov	r0, r5
 8010430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010434:	f000 fb6a 	bl	8010b0c <_malloc_usable_size_r>
 8010438:	4284      	cmp	r4, r0
 801043a:	4607      	mov	r7, r0
 801043c:	d802      	bhi.n	8010444 <_realloc_r+0x34>
 801043e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010442:	d812      	bhi.n	801046a <_realloc_r+0x5a>
 8010444:	4621      	mov	r1, r4
 8010446:	4640      	mov	r0, r8
 8010448:	f7ff fee2 	bl	8010210 <_malloc_r>
 801044c:	4605      	mov	r5, r0
 801044e:	2800      	cmp	r0, #0
 8010450:	d0ed      	beq.n	801042e <_realloc_r+0x1e>
 8010452:	42bc      	cmp	r4, r7
 8010454:	4622      	mov	r2, r4
 8010456:	4631      	mov	r1, r6
 8010458:	bf28      	it	cs
 801045a:	463a      	movcs	r2, r7
 801045c:	f000 fad1 	bl	8010a02 <memcpy>
 8010460:	4631      	mov	r1, r6
 8010462:	4640      	mov	r0, r8
 8010464:	f000 fb06 	bl	8010a74 <_free_r>
 8010468:	e7e1      	b.n	801042e <_realloc_r+0x1e>
 801046a:	4635      	mov	r5, r6
 801046c:	e7df      	b.n	801042e <_realloc_r+0x1e>
	...

08010470 <_strtoul_l.constprop.0>:
 8010470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010474:	4f36      	ldr	r7, [pc, #216]	; (8010550 <_strtoul_l.constprop.0+0xe0>)
 8010476:	4686      	mov	lr, r0
 8010478:	460d      	mov	r5, r1
 801047a:	4628      	mov	r0, r5
 801047c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010480:	5d3e      	ldrb	r6, [r7, r4]
 8010482:	f016 0608 	ands.w	r6, r6, #8
 8010486:	d1f8      	bne.n	801047a <_strtoul_l.constprop.0+0xa>
 8010488:	2c2d      	cmp	r4, #45	; 0x2d
 801048a:	d130      	bne.n	80104ee <_strtoul_l.constprop.0+0x7e>
 801048c:	782c      	ldrb	r4, [r5, #0]
 801048e:	2601      	movs	r6, #1
 8010490:	1c85      	adds	r5, r0, #2
 8010492:	2b00      	cmp	r3, #0
 8010494:	d057      	beq.n	8010546 <_strtoul_l.constprop.0+0xd6>
 8010496:	2b10      	cmp	r3, #16
 8010498:	d109      	bne.n	80104ae <_strtoul_l.constprop.0+0x3e>
 801049a:	2c30      	cmp	r4, #48	; 0x30
 801049c:	d107      	bne.n	80104ae <_strtoul_l.constprop.0+0x3e>
 801049e:	7828      	ldrb	r0, [r5, #0]
 80104a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80104a4:	2858      	cmp	r0, #88	; 0x58
 80104a6:	d149      	bne.n	801053c <_strtoul_l.constprop.0+0xcc>
 80104a8:	786c      	ldrb	r4, [r5, #1]
 80104aa:	2310      	movs	r3, #16
 80104ac:	3502      	adds	r5, #2
 80104ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80104b2:	2700      	movs	r7, #0
 80104b4:	fbb8 f8f3 	udiv	r8, r8, r3
 80104b8:	fb03 f908 	mul.w	r9, r3, r8
 80104bc:	ea6f 0909 	mvn.w	r9, r9
 80104c0:	4638      	mov	r0, r7
 80104c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80104c6:	f1bc 0f09 	cmp.w	ip, #9
 80104ca:	d815      	bhi.n	80104f8 <_strtoul_l.constprop.0+0x88>
 80104cc:	4664      	mov	r4, ip
 80104ce:	42a3      	cmp	r3, r4
 80104d0:	dd23      	ble.n	801051a <_strtoul_l.constprop.0+0xaa>
 80104d2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80104d6:	d007      	beq.n	80104e8 <_strtoul_l.constprop.0+0x78>
 80104d8:	4580      	cmp	r8, r0
 80104da:	d31b      	bcc.n	8010514 <_strtoul_l.constprop.0+0xa4>
 80104dc:	d101      	bne.n	80104e2 <_strtoul_l.constprop.0+0x72>
 80104de:	45a1      	cmp	r9, r4
 80104e0:	db18      	blt.n	8010514 <_strtoul_l.constprop.0+0xa4>
 80104e2:	fb00 4003 	mla	r0, r0, r3, r4
 80104e6:	2701      	movs	r7, #1
 80104e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104ec:	e7e9      	b.n	80104c2 <_strtoul_l.constprop.0+0x52>
 80104ee:	2c2b      	cmp	r4, #43	; 0x2b
 80104f0:	bf04      	itt	eq
 80104f2:	782c      	ldrbeq	r4, [r5, #0]
 80104f4:	1c85      	addeq	r5, r0, #2
 80104f6:	e7cc      	b.n	8010492 <_strtoul_l.constprop.0+0x22>
 80104f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80104fc:	f1bc 0f19 	cmp.w	ip, #25
 8010500:	d801      	bhi.n	8010506 <_strtoul_l.constprop.0+0x96>
 8010502:	3c37      	subs	r4, #55	; 0x37
 8010504:	e7e3      	b.n	80104ce <_strtoul_l.constprop.0+0x5e>
 8010506:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801050a:	f1bc 0f19 	cmp.w	ip, #25
 801050e:	d804      	bhi.n	801051a <_strtoul_l.constprop.0+0xaa>
 8010510:	3c57      	subs	r4, #87	; 0x57
 8010512:	e7dc      	b.n	80104ce <_strtoul_l.constprop.0+0x5e>
 8010514:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010518:	e7e6      	b.n	80104e8 <_strtoul_l.constprop.0+0x78>
 801051a:	1c7b      	adds	r3, r7, #1
 801051c:	d106      	bne.n	801052c <_strtoul_l.constprop.0+0xbc>
 801051e:	2322      	movs	r3, #34	; 0x22
 8010520:	f8ce 3000 	str.w	r3, [lr]
 8010524:	4638      	mov	r0, r7
 8010526:	b932      	cbnz	r2, 8010536 <_strtoul_l.constprop.0+0xc6>
 8010528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801052c:	b106      	cbz	r6, 8010530 <_strtoul_l.constprop.0+0xc0>
 801052e:	4240      	negs	r0, r0
 8010530:	2a00      	cmp	r2, #0
 8010532:	d0f9      	beq.n	8010528 <_strtoul_l.constprop.0+0xb8>
 8010534:	b107      	cbz	r7, 8010538 <_strtoul_l.constprop.0+0xc8>
 8010536:	1e69      	subs	r1, r5, #1
 8010538:	6011      	str	r1, [r2, #0]
 801053a:	e7f5      	b.n	8010528 <_strtoul_l.constprop.0+0xb8>
 801053c:	2430      	movs	r4, #48	; 0x30
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1b5      	bne.n	80104ae <_strtoul_l.constprop.0+0x3e>
 8010542:	2308      	movs	r3, #8
 8010544:	e7b3      	b.n	80104ae <_strtoul_l.constprop.0+0x3e>
 8010546:	2c30      	cmp	r4, #48	; 0x30
 8010548:	d0a9      	beq.n	801049e <_strtoul_l.constprop.0+0x2e>
 801054a:	230a      	movs	r3, #10
 801054c:	e7af      	b.n	80104ae <_strtoul_l.constprop.0+0x3e>
 801054e:	bf00      	nop
 8010550:	080122bc 	.word	0x080122bc

08010554 <strtoul>:
 8010554:	4613      	mov	r3, r2
 8010556:	460a      	mov	r2, r1
 8010558:	4601      	mov	r1, r0
 801055a:	4802      	ldr	r0, [pc, #8]	; (8010564 <strtoul+0x10>)
 801055c:	6800      	ldr	r0, [r0, #0]
 801055e:	f7ff bf87 	b.w	8010470 <_strtoul_l.constprop.0>
 8010562:	bf00      	nop
 8010564:	2000010c 	.word	0x2000010c

08010568 <std>:
 8010568:	2300      	movs	r3, #0
 801056a:	b510      	push	{r4, lr}
 801056c:	4604      	mov	r4, r0
 801056e:	e9c0 3300 	strd	r3, r3, [r0]
 8010572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010576:	6083      	str	r3, [r0, #8]
 8010578:	8181      	strh	r1, [r0, #12]
 801057a:	6643      	str	r3, [r0, #100]	; 0x64
 801057c:	81c2      	strh	r2, [r0, #14]
 801057e:	6183      	str	r3, [r0, #24]
 8010580:	4619      	mov	r1, r3
 8010582:	2208      	movs	r2, #8
 8010584:	305c      	adds	r0, #92	; 0x5c
 8010586:	f000 f973 	bl	8010870 <memset>
 801058a:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <std+0x58>)
 801058c:	6263      	str	r3, [r4, #36]	; 0x24
 801058e:	4b0d      	ldr	r3, [pc, #52]	; (80105c4 <std+0x5c>)
 8010590:	62a3      	str	r3, [r4, #40]	; 0x28
 8010592:	4b0d      	ldr	r3, [pc, #52]	; (80105c8 <std+0x60>)
 8010594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010596:	4b0d      	ldr	r3, [pc, #52]	; (80105cc <std+0x64>)
 8010598:	6323      	str	r3, [r4, #48]	; 0x30
 801059a:	4b0d      	ldr	r3, [pc, #52]	; (80105d0 <std+0x68>)
 801059c:	6224      	str	r4, [r4, #32]
 801059e:	429c      	cmp	r4, r3
 80105a0:	d006      	beq.n	80105b0 <std+0x48>
 80105a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80105a6:	4294      	cmp	r4, r2
 80105a8:	d002      	beq.n	80105b0 <std+0x48>
 80105aa:	33d0      	adds	r3, #208	; 0xd0
 80105ac:	429c      	cmp	r4, r3
 80105ae:	d105      	bne.n	80105bc <std+0x54>
 80105b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80105b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105b8:	f000 ba18 	b.w	80109ec <__retarget_lock_init_recursive>
 80105bc:	bd10      	pop	{r4, pc}
 80105be:	bf00      	nop
 80105c0:	08010779 	.word	0x08010779
 80105c4:	0801079b 	.word	0x0801079b
 80105c8:	080107d3 	.word	0x080107d3
 80105cc:	080107f7 	.word	0x080107f7
 80105d0:	2000db18 	.word	0x2000db18

080105d4 <stdio_exit_handler>:
 80105d4:	4a02      	ldr	r2, [pc, #8]	; (80105e0 <stdio_exit_handler+0xc>)
 80105d6:	4903      	ldr	r1, [pc, #12]	; (80105e4 <stdio_exit_handler+0x10>)
 80105d8:	4803      	ldr	r0, [pc, #12]	; (80105e8 <stdio_exit_handler+0x14>)
 80105da:	f000 b869 	b.w	80106b0 <_fwalk_sglue>
 80105de:	bf00      	nop
 80105e0:	200000b4 	.word	0x200000b4
 80105e4:	08011481 	.word	0x08011481
 80105e8:	200000c0 	.word	0x200000c0

080105ec <cleanup_stdio>:
 80105ec:	6841      	ldr	r1, [r0, #4]
 80105ee:	4b0c      	ldr	r3, [pc, #48]	; (8010620 <cleanup_stdio+0x34>)
 80105f0:	4299      	cmp	r1, r3
 80105f2:	b510      	push	{r4, lr}
 80105f4:	4604      	mov	r4, r0
 80105f6:	d001      	beq.n	80105fc <cleanup_stdio+0x10>
 80105f8:	f000 ff42 	bl	8011480 <_fflush_r>
 80105fc:	68a1      	ldr	r1, [r4, #8]
 80105fe:	4b09      	ldr	r3, [pc, #36]	; (8010624 <cleanup_stdio+0x38>)
 8010600:	4299      	cmp	r1, r3
 8010602:	d002      	beq.n	801060a <cleanup_stdio+0x1e>
 8010604:	4620      	mov	r0, r4
 8010606:	f000 ff3b 	bl	8011480 <_fflush_r>
 801060a:	68e1      	ldr	r1, [r4, #12]
 801060c:	4b06      	ldr	r3, [pc, #24]	; (8010628 <cleanup_stdio+0x3c>)
 801060e:	4299      	cmp	r1, r3
 8010610:	d004      	beq.n	801061c <cleanup_stdio+0x30>
 8010612:	4620      	mov	r0, r4
 8010614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010618:	f000 bf32 	b.w	8011480 <_fflush_r>
 801061c:	bd10      	pop	{r4, pc}
 801061e:	bf00      	nop
 8010620:	2000db18 	.word	0x2000db18
 8010624:	2000db80 	.word	0x2000db80
 8010628:	2000dbe8 	.word	0x2000dbe8

0801062c <global_stdio_init.part.0>:
 801062c:	b510      	push	{r4, lr}
 801062e:	4b0b      	ldr	r3, [pc, #44]	; (801065c <global_stdio_init.part.0+0x30>)
 8010630:	4c0b      	ldr	r4, [pc, #44]	; (8010660 <global_stdio_init.part.0+0x34>)
 8010632:	4a0c      	ldr	r2, [pc, #48]	; (8010664 <global_stdio_init.part.0+0x38>)
 8010634:	601a      	str	r2, [r3, #0]
 8010636:	4620      	mov	r0, r4
 8010638:	2200      	movs	r2, #0
 801063a:	2104      	movs	r1, #4
 801063c:	f7ff ff94 	bl	8010568 <std>
 8010640:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010644:	2201      	movs	r2, #1
 8010646:	2109      	movs	r1, #9
 8010648:	f7ff ff8e 	bl	8010568 <std>
 801064c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010650:	2202      	movs	r2, #2
 8010652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010656:	2112      	movs	r1, #18
 8010658:	f7ff bf86 	b.w	8010568 <std>
 801065c:	2000dc50 	.word	0x2000dc50
 8010660:	2000db18 	.word	0x2000db18
 8010664:	080105d5 	.word	0x080105d5

08010668 <__sfp_lock_acquire>:
 8010668:	4801      	ldr	r0, [pc, #4]	; (8010670 <__sfp_lock_acquire+0x8>)
 801066a:	f000 b9c0 	b.w	80109ee <__retarget_lock_acquire_recursive>
 801066e:	bf00      	nop
 8010670:	2000dc5a 	.word	0x2000dc5a

08010674 <__sfp_lock_release>:
 8010674:	4801      	ldr	r0, [pc, #4]	; (801067c <__sfp_lock_release+0x8>)
 8010676:	f000 b9bb 	b.w	80109f0 <__retarget_lock_release_recursive>
 801067a:	bf00      	nop
 801067c:	2000dc5a 	.word	0x2000dc5a

08010680 <__sinit>:
 8010680:	b510      	push	{r4, lr}
 8010682:	4604      	mov	r4, r0
 8010684:	f7ff fff0 	bl	8010668 <__sfp_lock_acquire>
 8010688:	6a23      	ldr	r3, [r4, #32]
 801068a:	b11b      	cbz	r3, 8010694 <__sinit+0x14>
 801068c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010690:	f7ff bff0 	b.w	8010674 <__sfp_lock_release>
 8010694:	4b04      	ldr	r3, [pc, #16]	; (80106a8 <__sinit+0x28>)
 8010696:	6223      	str	r3, [r4, #32]
 8010698:	4b04      	ldr	r3, [pc, #16]	; (80106ac <__sinit+0x2c>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d1f5      	bne.n	801068c <__sinit+0xc>
 80106a0:	f7ff ffc4 	bl	801062c <global_stdio_init.part.0>
 80106a4:	e7f2      	b.n	801068c <__sinit+0xc>
 80106a6:	bf00      	nop
 80106a8:	080105ed 	.word	0x080105ed
 80106ac:	2000dc50 	.word	0x2000dc50

080106b0 <_fwalk_sglue>:
 80106b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106b4:	4607      	mov	r7, r0
 80106b6:	4688      	mov	r8, r1
 80106b8:	4614      	mov	r4, r2
 80106ba:	2600      	movs	r6, #0
 80106bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106c0:	f1b9 0901 	subs.w	r9, r9, #1
 80106c4:	d505      	bpl.n	80106d2 <_fwalk_sglue+0x22>
 80106c6:	6824      	ldr	r4, [r4, #0]
 80106c8:	2c00      	cmp	r4, #0
 80106ca:	d1f7      	bne.n	80106bc <_fwalk_sglue+0xc>
 80106cc:	4630      	mov	r0, r6
 80106ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106d2:	89ab      	ldrh	r3, [r5, #12]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d907      	bls.n	80106e8 <_fwalk_sglue+0x38>
 80106d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106dc:	3301      	adds	r3, #1
 80106de:	d003      	beq.n	80106e8 <_fwalk_sglue+0x38>
 80106e0:	4629      	mov	r1, r5
 80106e2:	4638      	mov	r0, r7
 80106e4:	47c0      	blx	r8
 80106e6:	4306      	orrs	r6, r0
 80106e8:	3568      	adds	r5, #104	; 0x68
 80106ea:	e7e9      	b.n	80106c0 <_fwalk_sglue+0x10>

080106ec <iprintf>:
 80106ec:	b40f      	push	{r0, r1, r2, r3}
 80106ee:	b507      	push	{r0, r1, r2, lr}
 80106f0:	4906      	ldr	r1, [pc, #24]	; (801070c <iprintf+0x20>)
 80106f2:	ab04      	add	r3, sp, #16
 80106f4:	6808      	ldr	r0, [r1, #0]
 80106f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80106fa:	6881      	ldr	r1, [r0, #8]
 80106fc:	9301      	str	r3, [sp, #4]
 80106fe:	f000 fb8f 	bl	8010e20 <_vfiprintf_r>
 8010702:	b003      	add	sp, #12
 8010704:	f85d eb04 	ldr.w	lr, [sp], #4
 8010708:	b004      	add	sp, #16
 801070a:	4770      	bx	lr
 801070c:	2000010c 	.word	0x2000010c

08010710 <sniprintf>:
 8010710:	b40c      	push	{r2, r3}
 8010712:	b530      	push	{r4, r5, lr}
 8010714:	4b17      	ldr	r3, [pc, #92]	; (8010774 <sniprintf+0x64>)
 8010716:	1e0c      	subs	r4, r1, #0
 8010718:	681d      	ldr	r5, [r3, #0]
 801071a:	b09d      	sub	sp, #116	; 0x74
 801071c:	da08      	bge.n	8010730 <sniprintf+0x20>
 801071e:	238b      	movs	r3, #139	; 0x8b
 8010720:	602b      	str	r3, [r5, #0]
 8010722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010726:	b01d      	add	sp, #116	; 0x74
 8010728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801072c:	b002      	add	sp, #8
 801072e:	4770      	bx	lr
 8010730:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010734:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010738:	bf14      	ite	ne
 801073a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801073e:	4623      	moveq	r3, r4
 8010740:	9304      	str	r3, [sp, #16]
 8010742:	9307      	str	r3, [sp, #28]
 8010744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010748:	9002      	str	r0, [sp, #8]
 801074a:	9006      	str	r0, [sp, #24]
 801074c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010750:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010752:	ab21      	add	r3, sp, #132	; 0x84
 8010754:	a902      	add	r1, sp, #8
 8010756:	4628      	mov	r0, r5
 8010758:	9301      	str	r3, [sp, #4]
 801075a:	f000 fa39 	bl	8010bd0 <_svfiprintf_r>
 801075e:	1c43      	adds	r3, r0, #1
 8010760:	bfbc      	itt	lt
 8010762:	238b      	movlt	r3, #139	; 0x8b
 8010764:	602b      	strlt	r3, [r5, #0]
 8010766:	2c00      	cmp	r4, #0
 8010768:	d0dd      	beq.n	8010726 <sniprintf+0x16>
 801076a:	9b02      	ldr	r3, [sp, #8]
 801076c:	2200      	movs	r2, #0
 801076e:	701a      	strb	r2, [r3, #0]
 8010770:	e7d9      	b.n	8010726 <sniprintf+0x16>
 8010772:	bf00      	nop
 8010774:	2000010c 	.word	0x2000010c

08010778 <__sread>:
 8010778:	b510      	push	{r4, lr}
 801077a:	460c      	mov	r4, r1
 801077c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010780:	f000 f8d6 	bl	8010930 <_read_r>
 8010784:	2800      	cmp	r0, #0
 8010786:	bfab      	itete	ge
 8010788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801078a:	89a3      	ldrhlt	r3, [r4, #12]
 801078c:	181b      	addge	r3, r3, r0
 801078e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010792:	bfac      	ite	ge
 8010794:	6563      	strge	r3, [r4, #84]	; 0x54
 8010796:	81a3      	strhlt	r3, [r4, #12]
 8010798:	bd10      	pop	{r4, pc}

0801079a <__swrite>:
 801079a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801079e:	461f      	mov	r7, r3
 80107a0:	898b      	ldrh	r3, [r1, #12]
 80107a2:	05db      	lsls	r3, r3, #23
 80107a4:	4605      	mov	r5, r0
 80107a6:	460c      	mov	r4, r1
 80107a8:	4616      	mov	r6, r2
 80107aa:	d505      	bpl.n	80107b8 <__swrite+0x1e>
 80107ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b0:	2302      	movs	r3, #2
 80107b2:	2200      	movs	r2, #0
 80107b4:	f000 f8aa 	bl	801090c <_lseek_r>
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	4632      	mov	r2, r6
 80107c6:	463b      	mov	r3, r7
 80107c8:	4628      	mov	r0, r5
 80107ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ce:	f000 b8d1 	b.w	8010974 <_write_r>

080107d2 <__sseek>:
 80107d2:	b510      	push	{r4, lr}
 80107d4:	460c      	mov	r4, r1
 80107d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107da:	f000 f897 	bl	801090c <_lseek_r>
 80107de:	1c43      	adds	r3, r0, #1
 80107e0:	89a3      	ldrh	r3, [r4, #12]
 80107e2:	bf15      	itete	ne
 80107e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80107e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107ee:	81a3      	strheq	r3, [r4, #12]
 80107f0:	bf18      	it	ne
 80107f2:	81a3      	strhne	r3, [r4, #12]
 80107f4:	bd10      	pop	{r4, pc}

080107f6 <__sclose>:
 80107f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107fa:	f000 b877 	b.w	80108ec <_close_r>

080107fe <_vsniprintf_r>:
 80107fe:	b530      	push	{r4, r5, lr}
 8010800:	4614      	mov	r4, r2
 8010802:	2c00      	cmp	r4, #0
 8010804:	b09b      	sub	sp, #108	; 0x6c
 8010806:	4605      	mov	r5, r0
 8010808:	461a      	mov	r2, r3
 801080a:	da05      	bge.n	8010818 <_vsniprintf_r+0x1a>
 801080c:	238b      	movs	r3, #139	; 0x8b
 801080e:	6003      	str	r3, [r0, #0]
 8010810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010814:	b01b      	add	sp, #108	; 0x6c
 8010816:	bd30      	pop	{r4, r5, pc}
 8010818:	f44f 7302 	mov.w	r3, #520	; 0x208
 801081c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010820:	bf14      	ite	ne
 8010822:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010826:	4623      	moveq	r3, r4
 8010828:	9302      	str	r3, [sp, #8]
 801082a:	9305      	str	r3, [sp, #20]
 801082c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010830:	9100      	str	r1, [sp, #0]
 8010832:	9104      	str	r1, [sp, #16]
 8010834:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010838:	4669      	mov	r1, sp
 801083a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801083c:	f000 f9c8 	bl	8010bd0 <_svfiprintf_r>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	bfbc      	itt	lt
 8010844:	238b      	movlt	r3, #139	; 0x8b
 8010846:	602b      	strlt	r3, [r5, #0]
 8010848:	2c00      	cmp	r4, #0
 801084a:	d0e3      	beq.n	8010814 <_vsniprintf_r+0x16>
 801084c:	9b00      	ldr	r3, [sp, #0]
 801084e:	2200      	movs	r2, #0
 8010850:	701a      	strb	r2, [r3, #0]
 8010852:	e7df      	b.n	8010814 <_vsniprintf_r+0x16>

08010854 <vsniprintf>:
 8010854:	b507      	push	{r0, r1, r2, lr}
 8010856:	9300      	str	r3, [sp, #0]
 8010858:	4613      	mov	r3, r2
 801085a:	460a      	mov	r2, r1
 801085c:	4601      	mov	r1, r0
 801085e:	4803      	ldr	r0, [pc, #12]	; (801086c <vsniprintf+0x18>)
 8010860:	6800      	ldr	r0, [r0, #0]
 8010862:	f7ff ffcc 	bl	80107fe <_vsniprintf_r>
 8010866:	b003      	add	sp, #12
 8010868:	f85d fb04 	ldr.w	pc, [sp], #4
 801086c:	2000010c 	.word	0x2000010c

08010870 <memset>:
 8010870:	4402      	add	r2, r0
 8010872:	4603      	mov	r3, r0
 8010874:	4293      	cmp	r3, r2
 8010876:	d100      	bne.n	801087a <memset+0xa>
 8010878:	4770      	bx	lr
 801087a:	f803 1b01 	strb.w	r1, [r3], #1
 801087e:	e7f9      	b.n	8010874 <memset+0x4>

08010880 <strchr>:
 8010880:	b2c9      	uxtb	r1, r1
 8010882:	4603      	mov	r3, r0
 8010884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010888:	b11a      	cbz	r2, 8010892 <strchr+0x12>
 801088a:	428a      	cmp	r2, r1
 801088c:	d1f9      	bne.n	8010882 <strchr+0x2>
 801088e:	4618      	mov	r0, r3
 8010890:	4770      	bx	lr
 8010892:	2900      	cmp	r1, #0
 8010894:	bf18      	it	ne
 8010896:	2300      	movne	r3, #0
 8010898:	e7f9      	b.n	801088e <strchr+0xe>

0801089a <strncmp>:
 801089a:	b510      	push	{r4, lr}
 801089c:	b16a      	cbz	r2, 80108ba <strncmp+0x20>
 801089e:	3901      	subs	r1, #1
 80108a0:	1884      	adds	r4, r0, r2
 80108a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d103      	bne.n	80108b6 <strncmp+0x1c>
 80108ae:	42a0      	cmp	r0, r4
 80108b0:	d001      	beq.n	80108b6 <strncmp+0x1c>
 80108b2:	2a00      	cmp	r2, #0
 80108b4:	d1f5      	bne.n	80108a2 <strncmp+0x8>
 80108b6:	1ad0      	subs	r0, r2, r3
 80108b8:	bd10      	pop	{r4, pc}
 80108ba:	4610      	mov	r0, r2
 80108bc:	e7fc      	b.n	80108b8 <strncmp+0x1e>

080108be <strstr>:
 80108be:	780a      	ldrb	r2, [r1, #0]
 80108c0:	b570      	push	{r4, r5, r6, lr}
 80108c2:	b96a      	cbnz	r2, 80108e0 <strstr+0x22>
 80108c4:	bd70      	pop	{r4, r5, r6, pc}
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d109      	bne.n	80108de <strstr+0x20>
 80108ca:	460c      	mov	r4, r1
 80108cc:	4605      	mov	r5, r0
 80108ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d0f6      	beq.n	80108c4 <strstr+0x6>
 80108d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80108da:	429e      	cmp	r6, r3
 80108dc:	d0f7      	beq.n	80108ce <strstr+0x10>
 80108de:	3001      	adds	r0, #1
 80108e0:	7803      	ldrb	r3, [r0, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d1ef      	bne.n	80108c6 <strstr+0x8>
 80108e6:	4618      	mov	r0, r3
 80108e8:	e7ec      	b.n	80108c4 <strstr+0x6>
	...

080108ec <_close_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d06      	ldr	r5, [pc, #24]	; (8010908 <_close_r+0x1c>)
 80108f0:	2300      	movs	r3, #0
 80108f2:	4604      	mov	r4, r0
 80108f4:	4608      	mov	r0, r1
 80108f6:	602b      	str	r3, [r5, #0]
 80108f8:	f7f0 ff05 	bl	8001706 <_close>
 80108fc:	1c43      	adds	r3, r0, #1
 80108fe:	d102      	bne.n	8010906 <_close_r+0x1a>
 8010900:	682b      	ldr	r3, [r5, #0]
 8010902:	b103      	cbz	r3, 8010906 <_close_r+0x1a>
 8010904:	6023      	str	r3, [r4, #0]
 8010906:	bd38      	pop	{r3, r4, r5, pc}
 8010908:	2000dc54 	.word	0x2000dc54

0801090c <_lseek_r>:
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	4d07      	ldr	r5, [pc, #28]	; (801092c <_lseek_r+0x20>)
 8010910:	4604      	mov	r4, r0
 8010912:	4608      	mov	r0, r1
 8010914:	4611      	mov	r1, r2
 8010916:	2200      	movs	r2, #0
 8010918:	602a      	str	r2, [r5, #0]
 801091a:	461a      	mov	r2, r3
 801091c:	f7f0 ff1a 	bl	8001754 <_lseek>
 8010920:	1c43      	adds	r3, r0, #1
 8010922:	d102      	bne.n	801092a <_lseek_r+0x1e>
 8010924:	682b      	ldr	r3, [r5, #0]
 8010926:	b103      	cbz	r3, 801092a <_lseek_r+0x1e>
 8010928:	6023      	str	r3, [r4, #0]
 801092a:	bd38      	pop	{r3, r4, r5, pc}
 801092c:	2000dc54 	.word	0x2000dc54

08010930 <_read_r>:
 8010930:	b538      	push	{r3, r4, r5, lr}
 8010932:	4d07      	ldr	r5, [pc, #28]	; (8010950 <_read_r+0x20>)
 8010934:	4604      	mov	r4, r0
 8010936:	4608      	mov	r0, r1
 8010938:	4611      	mov	r1, r2
 801093a:	2200      	movs	r2, #0
 801093c:	602a      	str	r2, [r5, #0]
 801093e:	461a      	mov	r2, r3
 8010940:	f7f0 fea8 	bl	8001694 <_read>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	d102      	bne.n	801094e <_read_r+0x1e>
 8010948:	682b      	ldr	r3, [r5, #0]
 801094a:	b103      	cbz	r3, 801094e <_read_r+0x1e>
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	2000dc54 	.word	0x2000dc54

08010954 <_sbrk_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4d06      	ldr	r5, [pc, #24]	; (8010970 <_sbrk_r+0x1c>)
 8010958:	2300      	movs	r3, #0
 801095a:	4604      	mov	r4, r0
 801095c:	4608      	mov	r0, r1
 801095e:	602b      	str	r3, [r5, #0]
 8010960:	f7f0 ff06 	bl	8001770 <_sbrk>
 8010964:	1c43      	adds	r3, r0, #1
 8010966:	d102      	bne.n	801096e <_sbrk_r+0x1a>
 8010968:	682b      	ldr	r3, [r5, #0]
 801096a:	b103      	cbz	r3, 801096e <_sbrk_r+0x1a>
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	bd38      	pop	{r3, r4, r5, pc}
 8010970:	2000dc54 	.word	0x2000dc54

08010974 <_write_r>:
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	4d07      	ldr	r5, [pc, #28]	; (8010994 <_write_r+0x20>)
 8010978:	4604      	mov	r4, r0
 801097a:	4608      	mov	r0, r1
 801097c:	4611      	mov	r1, r2
 801097e:	2200      	movs	r2, #0
 8010980:	602a      	str	r2, [r5, #0]
 8010982:	461a      	mov	r2, r3
 8010984:	f7f0 fea3 	bl	80016ce <_write>
 8010988:	1c43      	adds	r3, r0, #1
 801098a:	d102      	bne.n	8010992 <_write_r+0x1e>
 801098c:	682b      	ldr	r3, [r5, #0]
 801098e:	b103      	cbz	r3, 8010992 <_write_r+0x1e>
 8010990:	6023      	str	r3, [r4, #0]
 8010992:	bd38      	pop	{r3, r4, r5, pc}
 8010994:	2000dc54 	.word	0x2000dc54

08010998 <__errno>:
 8010998:	4b01      	ldr	r3, [pc, #4]	; (80109a0 <__errno+0x8>)
 801099a:	6818      	ldr	r0, [r3, #0]
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop
 80109a0:	2000010c 	.word	0x2000010c

080109a4 <__libc_init_array>:
 80109a4:	b570      	push	{r4, r5, r6, lr}
 80109a6:	4d0d      	ldr	r5, [pc, #52]	; (80109dc <__libc_init_array+0x38>)
 80109a8:	4c0d      	ldr	r4, [pc, #52]	; (80109e0 <__libc_init_array+0x3c>)
 80109aa:	1b64      	subs	r4, r4, r5
 80109ac:	10a4      	asrs	r4, r4, #2
 80109ae:	2600      	movs	r6, #0
 80109b0:	42a6      	cmp	r6, r4
 80109b2:	d109      	bne.n	80109c8 <__libc_init_array+0x24>
 80109b4:	4d0b      	ldr	r5, [pc, #44]	; (80109e4 <__libc_init_array+0x40>)
 80109b6:	4c0c      	ldr	r4, [pc, #48]	; (80109e8 <__libc_init_array+0x44>)
 80109b8:	f000 ff1c 	bl	80117f4 <_init>
 80109bc:	1b64      	subs	r4, r4, r5
 80109be:	10a4      	asrs	r4, r4, #2
 80109c0:	2600      	movs	r6, #0
 80109c2:	42a6      	cmp	r6, r4
 80109c4:	d105      	bne.n	80109d2 <__libc_init_array+0x2e>
 80109c6:	bd70      	pop	{r4, r5, r6, pc}
 80109c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80109cc:	4798      	blx	r3
 80109ce:	3601      	adds	r6, #1
 80109d0:	e7ee      	b.n	80109b0 <__libc_init_array+0xc>
 80109d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80109d6:	4798      	blx	r3
 80109d8:	3601      	adds	r6, #1
 80109da:	e7f2      	b.n	80109c2 <__libc_init_array+0x1e>
 80109dc:	08012434 	.word	0x08012434
 80109e0:	08012434 	.word	0x08012434
 80109e4:	08012434 	.word	0x08012434
 80109e8:	0801243c 	.word	0x0801243c

080109ec <__retarget_lock_init_recursive>:
 80109ec:	4770      	bx	lr

080109ee <__retarget_lock_acquire_recursive>:
 80109ee:	4770      	bx	lr

080109f0 <__retarget_lock_release_recursive>:
 80109f0:	4770      	bx	lr

080109f2 <strcpy>:
 80109f2:	4603      	mov	r3, r0
 80109f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109f8:	f803 2b01 	strb.w	r2, [r3], #1
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	d1f9      	bne.n	80109f4 <strcpy+0x2>
 8010a00:	4770      	bx	lr

08010a02 <memcpy>:
 8010a02:	440a      	add	r2, r1
 8010a04:	4291      	cmp	r1, r2
 8010a06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010a0a:	d100      	bne.n	8010a0e <memcpy+0xc>
 8010a0c:	4770      	bx	lr
 8010a0e:	b510      	push	{r4, lr}
 8010a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a18:	4291      	cmp	r1, r2
 8010a1a:	d1f9      	bne.n	8010a10 <memcpy+0xe>
 8010a1c:	bd10      	pop	{r4, pc}
	...

08010a20 <__assert_func>:
 8010a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a22:	4614      	mov	r4, r2
 8010a24:	461a      	mov	r2, r3
 8010a26:	4b09      	ldr	r3, [pc, #36]	; (8010a4c <__assert_func+0x2c>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4605      	mov	r5, r0
 8010a2c:	68d8      	ldr	r0, [r3, #12]
 8010a2e:	b14c      	cbz	r4, 8010a44 <__assert_func+0x24>
 8010a30:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <__assert_func+0x30>)
 8010a32:	9100      	str	r1, [sp, #0]
 8010a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a38:	4906      	ldr	r1, [pc, #24]	; (8010a54 <__assert_func+0x34>)
 8010a3a:	462b      	mov	r3, r5
 8010a3c:	f000 fd48 	bl	80114d0 <fiprintf>
 8010a40:	f000 fe08 	bl	8011654 <abort>
 8010a44:	4b04      	ldr	r3, [pc, #16]	; (8010a58 <__assert_func+0x38>)
 8010a46:	461c      	mov	r4, r3
 8010a48:	e7f3      	b.n	8010a32 <__assert_func+0x12>
 8010a4a:	bf00      	nop
 8010a4c:	2000010c 	.word	0x2000010c
 8010a50:	080123bc 	.word	0x080123bc
 8010a54:	080123c9 	.word	0x080123c9
 8010a58:	080123f7 	.word	0x080123f7

08010a5c <__env_lock>:
 8010a5c:	4801      	ldr	r0, [pc, #4]	; (8010a64 <__env_lock+0x8>)
 8010a5e:	f7ff bfc6 	b.w	80109ee <__retarget_lock_acquire_recursive>
 8010a62:	bf00      	nop
 8010a64:	2000dc58 	.word	0x2000dc58

08010a68 <__env_unlock>:
 8010a68:	4801      	ldr	r0, [pc, #4]	; (8010a70 <__env_unlock+0x8>)
 8010a6a:	f7ff bfc1 	b.w	80109f0 <__retarget_lock_release_recursive>
 8010a6e:	bf00      	nop
 8010a70:	2000dc58 	.word	0x2000dc58

08010a74 <_free_r>:
 8010a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a76:	2900      	cmp	r1, #0
 8010a78:	d044      	beq.n	8010b04 <_free_r+0x90>
 8010a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a7e:	9001      	str	r0, [sp, #4]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f1a1 0404 	sub.w	r4, r1, #4
 8010a86:	bfb8      	it	lt
 8010a88:	18e4      	addlt	r4, r4, r3
 8010a8a:	f7ff fc41 	bl	8010310 <__malloc_lock>
 8010a8e:	4a1e      	ldr	r2, [pc, #120]	; (8010b08 <_free_r+0x94>)
 8010a90:	9801      	ldr	r0, [sp, #4]
 8010a92:	6813      	ldr	r3, [r2, #0]
 8010a94:	b933      	cbnz	r3, 8010aa4 <_free_r+0x30>
 8010a96:	6063      	str	r3, [r4, #4]
 8010a98:	6014      	str	r4, [r2, #0]
 8010a9a:	b003      	add	sp, #12
 8010a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aa0:	f7ff bc3c 	b.w	801031c <__malloc_unlock>
 8010aa4:	42a3      	cmp	r3, r4
 8010aa6:	d908      	bls.n	8010aba <_free_r+0x46>
 8010aa8:	6825      	ldr	r5, [r4, #0]
 8010aaa:	1961      	adds	r1, r4, r5
 8010aac:	428b      	cmp	r3, r1
 8010aae:	bf01      	itttt	eq
 8010ab0:	6819      	ldreq	r1, [r3, #0]
 8010ab2:	685b      	ldreq	r3, [r3, #4]
 8010ab4:	1949      	addeq	r1, r1, r5
 8010ab6:	6021      	streq	r1, [r4, #0]
 8010ab8:	e7ed      	b.n	8010a96 <_free_r+0x22>
 8010aba:	461a      	mov	r2, r3
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	b10b      	cbz	r3, 8010ac4 <_free_r+0x50>
 8010ac0:	42a3      	cmp	r3, r4
 8010ac2:	d9fa      	bls.n	8010aba <_free_r+0x46>
 8010ac4:	6811      	ldr	r1, [r2, #0]
 8010ac6:	1855      	adds	r5, r2, r1
 8010ac8:	42a5      	cmp	r5, r4
 8010aca:	d10b      	bne.n	8010ae4 <_free_r+0x70>
 8010acc:	6824      	ldr	r4, [r4, #0]
 8010ace:	4421      	add	r1, r4
 8010ad0:	1854      	adds	r4, r2, r1
 8010ad2:	42a3      	cmp	r3, r4
 8010ad4:	6011      	str	r1, [r2, #0]
 8010ad6:	d1e0      	bne.n	8010a9a <_free_r+0x26>
 8010ad8:	681c      	ldr	r4, [r3, #0]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	6053      	str	r3, [r2, #4]
 8010ade:	440c      	add	r4, r1
 8010ae0:	6014      	str	r4, [r2, #0]
 8010ae2:	e7da      	b.n	8010a9a <_free_r+0x26>
 8010ae4:	d902      	bls.n	8010aec <_free_r+0x78>
 8010ae6:	230c      	movs	r3, #12
 8010ae8:	6003      	str	r3, [r0, #0]
 8010aea:	e7d6      	b.n	8010a9a <_free_r+0x26>
 8010aec:	6825      	ldr	r5, [r4, #0]
 8010aee:	1961      	adds	r1, r4, r5
 8010af0:	428b      	cmp	r3, r1
 8010af2:	bf04      	itt	eq
 8010af4:	6819      	ldreq	r1, [r3, #0]
 8010af6:	685b      	ldreq	r3, [r3, #4]
 8010af8:	6063      	str	r3, [r4, #4]
 8010afa:	bf04      	itt	eq
 8010afc:	1949      	addeq	r1, r1, r5
 8010afe:	6021      	streq	r1, [r4, #0]
 8010b00:	6054      	str	r4, [r2, #4]
 8010b02:	e7ca      	b.n	8010a9a <_free_r+0x26>
 8010b04:	b003      	add	sp, #12
 8010b06:	bd30      	pop	{r4, r5, pc}
 8010b08:	2000db10 	.word	0x2000db10

08010b0c <_malloc_usable_size_r>:
 8010b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b10:	1f18      	subs	r0, r3, #4
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	bfbc      	itt	lt
 8010b16:	580b      	ldrlt	r3, [r1, r0]
 8010b18:	18c0      	addlt	r0, r0, r3
 8010b1a:	4770      	bx	lr

08010b1c <__ssputs_r>:
 8010b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b20:	688e      	ldr	r6, [r1, #8]
 8010b22:	461f      	mov	r7, r3
 8010b24:	42be      	cmp	r6, r7
 8010b26:	680b      	ldr	r3, [r1, #0]
 8010b28:	4682      	mov	sl, r0
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	4690      	mov	r8, r2
 8010b2e:	d82c      	bhi.n	8010b8a <__ssputs_r+0x6e>
 8010b30:	898a      	ldrh	r2, [r1, #12]
 8010b32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b36:	d026      	beq.n	8010b86 <__ssputs_r+0x6a>
 8010b38:	6965      	ldr	r5, [r4, #20]
 8010b3a:	6909      	ldr	r1, [r1, #16]
 8010b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b40:	eba3 0901 	sub.w	r9, r3, r1
 8010b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b48:	1c7b      	adds	r3, r7, #1
 8010b4a:	444b      	add	r3, r9
 8010b4c:	106d      	asrs	r5, r5, #1
 8010b4e:	429d      	cmp	r5, r3
 8010b50:	bf38      	it	cc
 8010b52:	461d      	movcc	r5, r3
 8010b54:	0553      	lsls	r3, r2, #21
 8010b56:	d527      	bpl.n	8010ba8 <__ssputs_r+0x8c>
 8010b58:	4629      	mov	r1, r5
 8010b5a:	f7ff fb59 	bl	8010210 <_malloc_r>
 8010b5e:	4606      	mov	r6, r0
 8010b60:	b360      	cbz	r0, 8010bbc <__ssputs_r+0xa0>
 8010b62:	6921      	ldr	r1, [r4, #16]
 8010b64:	464a      	mov	r2, r9
 8010b66:	f7ff ff4c 	bl	8010a02 <memcpy>
 8010b6a:	89a3      	ldrh	r3, [r4, #12]
 8010b6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b74:	81a3      	strh	r3, [r4, #12]
 8010b76:	6126      	str	r6, [r4, #16]
 8010b78:	6165      	str	r5, [r4, #20]
 8010b7a:	444e      	add	r6, r9
 8010b7c:	eba5 0509 	sub.w	r5, r5, r9
 8010b80:	6026      	str	r6, [r4, #0]
 8010b82:	60a5      	str	r5, [r4, #8]
 8010b84:	463e      	mov	r6, r7
 8010b86:	42be      	cmp	r6, r7
 8010b88:	d900      	bls.n	8010b8c <__ssputs_r+0x70>
 8010b8a:	463e      	mov	r6, r7
 8010b8c:	6820      	ldr	r0, [r4, #0]
 8010b8e:	4632      	mov	r2, r6
 8010b90:	4641      	mov	r1, r8
 8010b92:	f000 fd45 	bl	8011620 <memmove>
 8010b96:	68a3      	ldr	r3, [r4, #8]
 8010b98:	1b9b      	subs	r3, r3, r6
 8010b9a:	60a3      	str	r3, [r4, #8]
 8010b9c:	6823      	ldr	r3, [r4, #0]
 8010b9e:	4433      	add	r3, r6
 8010ba0:	6023      	str	r3, [r4, #0]
 8010ba2:	2000      	movs	r0, #0
 8010ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba8:	462a      	mov	r2, r5
 8010baa:	f7ff fc31 	bl	8010410 <_realloc_r>
 8010bae:	4606      	mov	r6, r0
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	d1e0      	bne.n	8010b76 <__ssputs_r+0x5a>
 8010bb4:	6921      	ldr	r1, [r4, #16]
 8010bb6:	4650      	mov	r0, sl
 8010bb8:	f7ff ff5c 	bl	8010a74 <_free_r>
 8010bbc:	230c      	movs	r3, #12
 8010bbe:	f8ca 3000 	str.w	r3, [sl]
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bc8:	81a3      	strh	r3, [r4, #12]
 8010bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bce:	e7e9      	b.n	8010ba4 <__ssputs_r+0x88>

08010bd0 <_svfiprintf_r>:
 8010bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	4698      	mov	r8, r3
 8010bd6:	898b      	ldrh	r3, [r1, #12]
 8010bd8:	061b      	lsls	r3, r3, #24
 8010bda:	b09d      	sub	sp, #116	; 0x74
 8010bdc:	4607      	mov	r7, r0
 8010bde:	460d      	mov	r5, r1
 8010be0:	4614      	mov	r4, r2
 8010be2:	d50e      	bpl.n	8010c02 <_svfiprintf_r+0x32>
 8010be4:	690b      	ldr	r3, [r1, #16]
 8010be6:	b963      	cbnz	r3, 8010c02 <_svfiprintf_r+0x32>
 8010be8:	2140      	movs	r1, #64	; 0x40
 8010bea:	f7ff fb11 	bl	8010210 <_malloc_r>
 8010bee:	6028      	str	r0, [r5, #0]
 8010bf0:	6128      	str	r0, [r5, #16]
 8010bf2:	b920      	cbnz	r0, 8010bfe <_svfiprintf_r+0x2e>
 8010bf4:	230c      	movs	r3, #12
 8010bf6:	603b      	str	r3, [r7, #0]
 8010bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bfc:	e0d0      	b.n	8010da0 <_svfiprintf_r+0x1d0>
 8010bfe:	2340      	movs	r3, #64	; 0x40
 8010c00:	616b      	str	r3, [r5, #20]
 8010c02:	2300      	movs	r3, #0
 8010c04:	9309      	str	r3, [sp, #36]	; 0x24
 8010c06:	2320      	movs	r3, #32
 8010c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c10:	2330      	movs	r3, #48	; 0x30
 8010c12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010db8 <_svfiprintf_r+0x1e8>
 8010c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c1a:	f04f 0901 	mov.w	r9, #1
 8010c1e:	4623      	mov	r3, r4
 8010c20:	469a      	mov	sl, r3
 8010c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c26:	b10a      	cbz	r2, 8010c2c <_svfiprintf_r+0x5c>
 8010c28:	2a25      	cmp	r2, #37	; 0x25
 8010c2a:	d1f9      	bne.n	8010c20 <_svfiprintf_r+0x50>
 8010c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8010c30:	d00b      	beq.n	8010c4a <_svfiprintf_r+0x7a>
 8010c32:	465b      	mov	r3, fp
 8010c34:	4622      	mov	r2, r4
 8010c36:	4629      	mov	r1, r5
 8010c38:	4638      	mov	r0, r7
 8010c3a:	f7ff ff6f 	bl	8010b1c <__ssputs_r>
 8010c3e:	3001      	adds	r0, #1
 8010c40:	f000 80a9 	beq.w	8010d96 <_svfiprintf_r+0x1c6>
 8010c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c46:	445a      	add	r2, fp
 8010c48:	9209      	str	r2, [sp, #36]	; 0x24
 8010c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 80a1 	beq.w	8010d96 <_svfiprintf_r+0x1c6>
 8010c54:	2300      	movs	r3, #0
 8010c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c5e:	f10a 0a01 	add.w	sl, sl, #1
 8010c62:	9304      	str	r3, [sp, #16]
 8010c64:	9307      	str	r3, [sp, #28]
 8010c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8010c6c:	4654      	mov	r4, sl
 8010c6e:	2205      	movs	r2, #5
 8010c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c74:	4850      	ldr	r0, [pc, #320]	; (8010db8 <_svfiprintf_r+0x1e8>)
 8010c76:	f7ef facb 	bl	8000210 <memchr>
 8010c7a:	9a04      	ldr	r2, [sp, #16]
 8010c7c:	b9d8      	cbnz	r0, 8010cb6 <_svfiprintf_r+0xe6>
 8010c7e:	06d0      	lsls	r0, r2, #27
 8010c80:	bf44      	itt	mi
 8010c82:	2320      	movmi	r3, #32
 8010c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c88:	0711      	lsls	r1, r2, #28
 8010c8a:	bf44      	itt	mi
 8010c8c:	232b      	movmi	r3, #43	; 0x2b
 8010c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c92:	f89a 3000 	ldrb.w	r3, [sl]
 8010c96:	2b2a      	cmp	r3, #42	; 0x2a
 8010c98:	d015      	beq.n	8010cc6 <_svfiprintf_r+0xf6>
 8010c9a:	9a07      	ldr	r2, [sp, #28]
 8010c9c:	4654      	mov	r4, sl
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f04f 0c0a 	mov.w	ip, #10
 8010ca4:	4621      	mov	r1, r4
 8010ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010caa:	3b30      	subs	r3, #48	; 0x30
 8010cac:	2b09      	cmp	r3, #9
 8010cae:	d94d      	bls.n	8010d4c <_svfiprintf_r+0x17c>
 8010cb0:	b1b0      	cbz	r0, 8010ce0 <_svfiprintf_r+0x110>
 8010cb2:	9207      	str	r2, [sp, #28]
 8010cb4:	e014      	b.n	8010ce0 <_svfiprintf_r+0x110>
 8010cb6:	eba0 0308 	sub.w	r3, r0, r8
 8010cba:	fa09 f303 	lsl.w	r3, r9, r3
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	9304      	str	r3, [sp, #16]
 8010cc2:	46a2      	mov	sl, r4
 8010cc4:	e7d2      	b.n	8010c6c <_svfiprintf_r+0x9c>
 8010cc6:	9b03      	ldr	r3, [sp, #12]
 8010cc8:	1d19      	adds	r1, r3, #4
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	9103      	str	r1, [sp, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	bfbb      	ittet	lt
 8010cd2:	425b      	neglt	r3, r3
 8010cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8010cd8:	9307      	strge	r3, [sp, #28]
 8010cda:	9307      	strlt	r3, [sp, #28]
 8010cdc:	bfb8      	it	lt
 8010cde:	9204      	strlt	r2, [sp, #16]
 8010ce0:	7823      	ldrb	r3, [r4, #0]
 8010ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8010ce4:	d10c      	bne.n	8010d00 <_svfiprintf_r+0x130>
 8010ce6:	7863      	ldrb	r3, [r4, #1]
 8010ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8010cea:	d134      	bne.n	8010d56 <_svfiprintf_r+0x186>
 8010cec:	9b03      	ldr	r3, [sp, #12]
 8010cee:	1d1a      	adds	r2, r3, #4
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	9203      	str	r2, [sp, #12]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	bfb8      	it	lt
 8010cf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010cfc:	3402      	adds	r4, #2
 8010cfe:	9305      	str	r3, [sp, #20]
 8010d00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010dc8 <_svfiprintf_r+0x1f8>
 8010d04:	7821      	ldrb	r1, [r4, #0]
 8010d06:	2203      	movs	r2, #3
 8010d08:	4650      	mov	r0, sl
 8010d0a:	f7ef fa81 	bl	8000210 <memchr>
 8010d0e:	b138      	cbz	r0, 8010d20 <_svfiprintf_r+0x150>
 8010d10:	9b04      	ldr	r3, [sp, #16]
 8010d12:	eba0 000a 	sub.w	r0, r0, sl
 8010d16:	2240      	movs	r2, #64	; 0x40
 8010d18:	4082      	lsls	r2, r0
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	3401      	adds	r4, #1
 8010d1e:	9304      	str	r3, [sp, #16]
 8010d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d24:	4825      	ldr	r0, [pc, #148]	; (8010dbc <_svfiprintf_r+0x1ec>)
 8010d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d2a:	2206      	movs	r2, #6
 8010d2c:	f7ef fa70 	bl	8000210 <memchr>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d038      	beq.n	8010da6 <_svfiprintf_r+0x1d6>
 8010d34:	4b22      	ldr	r3, [pc, #136]	; (8010dc0 <_svfiprintf_r+0x1f0>)
 8010d36:	bb1b      	cbnz	r3, 8010d80 <_svfiprintf_r+0x1b0>
 8010d38:	9b03      	ldr	r3, [sp, #12]
 8010d3a:	3307      	adds	r3, #7
 8010d3c:	f023 0307 	bic.w	r3, r3, #7
 8010d40:	3308      	adds	r3, #8
 8010d42:	9303      	str	r3, [sp, #12]
 8010d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d46:	4433      	add	r3, r6
 8010d48:	9309      	str	r3, [sp, #36]	; 0x24
 8010d4a:	e768      	b.n	8010c1e <_svfiprintf_r+0x4e>
 8010d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d50:	460c      	mov	r4, r1
 8010d52:	2001      	movs	r0, #1
 8010d54:	e7a6      	b.n	8010ca4 <_svfiprintf_r+0xd4>
 8010d56:	2300      	movs	r3, #0
 8010d58:	3401      	adds	r4, #1
 8010d5a:	9305      	str	r3, [sp, #20]
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	f04f 0c0a 	mov.w	ip, #10
 8010d62:	4620      	mov	r0, r4
 8010d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d68:	3a30      	subs	r2, #48	; 0x30
 8010d6a:	2a09      	cmp	r2, #9
 8010d6c:	d903      	bls.n	8010d76 <_svfiprintf_r+0x1a6>
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d0c6      	beq.n	8010d00 <_svfiprintf_r+0x130>
 8010d72:	9105      	str	r1, [sp, #20]
 8010d74:	e7c4      	b.n	8010d00 <_svfiprintf_r+0x130>
 8010d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e7f0      	b.n	8010d62 <_svfiprintf_r+0x192>
 8010d80:	ab03      	add	r3, sp, #12
 8010d82:	9300      	str	r3, [sp, #0]
 8010d84:	462a      	mov	r2, r5
 8010d86:	4b0f      	ldr	r3, [pc, #60]	; (8010dc4 <_svfiprintf_r+0x1f4>)
 8010d88:	a904      	add	r1, sp, #16
 8010d8a:	4638      	mov	r0, r7
 8010d8c:	f3af 8000 	nop.w
 8010d90:	1c42      	adds	r2, r0, #1
 8010d92:	4606      	mov	r6, r0
 8010d94:	d1d6      	bne.n	8010d44 <_svfiprintf_r+0x174>
 8010d96:	89ab      	ldrh	r3, [r5, #12]
 8010d98:	065b      	lsls	r3, r3, #25
 8010d9a:	f53f af2d 	bmi.w	8010bf8 <_svfiprintf_r+0x28>
 8010d9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010da0:	b01d      	add	sp, #116	; 0x74
 8010da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da6:	ab03      	add	r3, sp, #12
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	462a      	mov	r2, r5
 8010dac:	4b05      	ldr	r3, [pc, #20]	; (8010dc4 <_svfiprintf_r+0x1f4>)
 8010dae:	a904      	add	r1, sp, #16
 8010db0:	4638      	mov	r0, r7
 8010db2:	f000 f9bd 	bl	8011130 <_printf_i>
 8010db6:	e7eb      	b.n	8010d90 <_svfiprintf_r+0x1c0>
 8010db8:	080123f8 	.word	0x080123f8
 8010dbc:	08012402 	.word	0x08012402
 8010dc0:	00000000 	.word	0x00000000
 8010dc4:	08010b1d 	.word	0x08010b1d
 8010dc8:	080123fe 	.word	0x080123fe

08010dcc <__sfputc_r>:
 8010dcc:	6893      	ldr	r3, [r2, #8]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	b410      	push	{r4}
 8010dd4:	6093      	str	r3, [r2, #8]
 8010dd6:	da08      	bge.n	8010dea <__sfputc_r+0x1e>
 8010dd8:	6994      	ldr	r4, [r2, #24]
 8010dda:	42a3      	cmp	r3, r4
 8010ddc:	db01      	blt.n	8010de2 <__sfputc_r+0x16>
 8010dde:	290a      	cmp	r1, #10
 8010de0:	d103      	bne.n	8010dea <__sfputc_r+0x1e>
 8010de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010de6:	f000 bb85 	b.w	80114f4 <__swbuf_r>
 8010dea:	6813      	ldr	r3, [r2, #0]
 8010dec:	1c58      	adds	r0, r3, #1
 8010dee:	6010      	str	r0, [r2, #0]
 8010df0:	7019      	strb	r1, [r3, #0]
 8010df2:	4608      	mov	r0, r1
 8010df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df8:	4770      	bx	lr

08010dfa <__sfputs_r>:
 8010dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	460f      	mov	r7, r1
 8010e00:	4614      	mov	r4, r2
 8010e02:	18d5      	adds	r5, r2, r3
 8010e04:	42ac      	cmp	r4, r5
 8010e06:	d101      	bne.n	8010e0c <__sfputs_r+0x12>
 8010e08:	2000      	movs	r0, #0
 8010e0a:	e007      	b.n	8010e1c <__sfputs_r+0x22>
 8010e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e10:	463a      	mov	r2, r7
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7ff ffda 	bl	8010dcc <__sfputc_r>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	d1f3      	bne.n	8010e04 <__sfputs_r+0xa>
 8010e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e20 <_vfiprintf_r>:
 8010e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e24:	460d      	mov	r5, r1
 8010e26:	b09d      	sub	sp, #116	; 0x74
 8010e28:	4614      	mov	r4, r2
 8010e2a:	4698      	mov	r8, r3
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	b118      	cbz	r0, 8010e38 <_vfiprintf_r+0x18>
 8010e30:	6a03      	ldr	r3, [r0, #32]
 8010e32:	b90b      	cbnz	r3, 8010e38 <_vfiprintf_r+0x18>
 8010e34:	f7ff fc24 	bl	8010680 <__sinit>
 8010e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e3a:	07d9      	lsls	r1, r3, #31
 8010e3c:	d405      	bmi.n	8010e4a <_vfiprintf_r+0x2a>
 8010e3e:	89ab      	ldrh	r3, [r5, #12]
 8010e40:	059a      	lsls	r2, r3, #22
 8010e42:	d402      	bmi.n	8010e4a <_vfiprintf_r+0x2a>
 8010e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e46:	f7ff fdd2 	bl	80109ee <__retarget_lock_acquire_recursive>
 8010e4a:	89ab      	ldrh	r3, [r5, #12]
 8010e4c:	071b      	lsls	r3, r3, #28
 8010e4e:	d501      	bpl.n	8010e54 <_vfiprintf_r+0x34>
 8010e50:	692b      	ldr	r3, [r5, #16]
 8010e52:	b99b      	cbnz	r3, 8010e7c <_vfiprintf_r+0x5c>
 8010e54:	4629      	mov	r1, r5
 8010e56:	4630      	mov	r0, r6
 8010e58:	f000 fb8a 	bl	8011570 <__swsetup_r>
 8010e5c:	b170      	cbz	r0, 8010e7c <_vfiprintf_r+0x5c>
 8010e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e60:	07dc      	lsls	r4, r3, #31
 8010e62:	d504      	bpl.n	8010e6e <_vfiprintf_r+0x4e>
 8010e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e68:	b01d      	add	sp, #116	; 0x74
 8010e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e6e:	89ab      	ldrh	r3, [r5, #12]
 8010e70:	0598      	lsls	r0, r3, #22
 8010e72:	d4f7      	bmi.n	8010e64 <_vfiprintf_r+0x44>
 8010e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e76:	f7ff fdbb 	bl	80109f0 <__retarget_lock_release_recursive>
 8010e7a:	e7f3      	b.n	8010e64 <_vfiprintf_r+0x44>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e80:	2320      	movs	r3, #32
 8010e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e8a:	2330      	movs	r3, #48	; 0x30
 8010e8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011040 <_vfiprintf_r+0x220>
 8010e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e94:	f04f 0901 	mov.w	r9, #1
 8010e98:	4623      	mov	r3, r4
 8010e9a:	469a      	mov	sl, r3
 8010e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ea0:	b10a      	cbz	r2, 8010ea6 <_vfiprintf_r+0x86>
 8010ea2:	2a25      	cmp	r2, #37	; 0x25
 8010ea4:	d1f9      	bne.n	8010e9a <_vfiprintf_r+0x7a>
 8010ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8010eaa:	d00b      	beq.n	8010ec4 <_vfiprintf_r+0xa4>
 8010eac:	465b      	mov	r3, fp
 8010eae:	4622      	mov	r2, r4
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7ff ffa1 	bl	8010dfa <__sfputs_r>
 8010eb8:	3001      	adds	r0, #1
 8010eba:	f000 80a9 	beq.w	8011010 <_vfiprintf_r+0x1f0>
 8010ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ec0:	445a      	add	r2, fp
 8010ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f000 80a1 	beq.w	8011010 <_vfiprintf_r+0x1f0>
 8010ece:	2300      	movs	r3, #0
 8010ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ed8:	f10a 0a01 	add.w	sl, sl, #1
 8010edc:	9304      	str	r3, [sp, #16]
 8010ede:	9307      	str	r3, [sp, #28]
 8010ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ee6:	4654      	mov	r4, sl
 8010ee8:	2205      	movs	r2, #5
 8010eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eee:	4854      	ldr	r0, [pc, #336]	; (8011040 <_vfiprintf_r+0x220>)
 8010ef0:	f7ef f98e 	bl	8000210 <memchr>
 8010ef4:	9a04      	ldr	r2, [sp, #16]
 8010ef6:	b9d8      	cbnz	r0, 8010f30 <_vfiprintf_r+0x110>
 8010ef8:	06d1      	lsls	r1, r2, #27
 8010efa:	bf44      	itt	mi
 8010efc:	2320      	movmi	r3, #32
 8010efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f02:	0713      	lsls	r3, r2, #28
 8010f04:	bf44      	itt	mi
 8010f06:	232b      	movmi	r3, #43	; 0x2b
 8010f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8010f10:	2b2a      	cmp	r3, #42	; 0x2a
 8010f12:	d015      	beq.n	8010f40 <_vfiprintf_r+0x120>
 8010f14:	9a07      	ldr	r2, [sp, #28]
 8010f16:	4654      	mov	r4, sl
 8010f18:	2000      	movs	r0, #0
 8010f1a:	f04f 0c0a 	mov.w	ip, #10
 8010f1e:	4621      	mov	r1, r4
 8010f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f24:	3b30      	subs	r3, #48	; 0x30
 8010f26:	2b09      	cmp	r3, #9
 8010f28:	d94d      	bls.n	8010fc6 <_vfiprintf_r+0x1a6>
 8010f2a:	b1b0      	cbz	r0, 8010f5a <_vfiprintf_r+0x13a>
 8010f2c:	9207      	str	r2, [sp, #28]
 8010f2e:	e014      	b.n	8010f5a <_vfiprintf_r+0x13a>
 8010f30:	eba0 0308 	sub.w	r3, r0, r8
 8010f34:	fa09 f303 	lsl.w	r3, r9, r3
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	9304      	str	r3, [sp, #16]
 8010f3c:	46a2      	mov	sl, r4
 8010f3e:	e7d2      	b.n	8010ee6 <_vfiprintf_r+0xc6>
 8010f40:	9b03      	ldr	r3, [sp, #12]
 8010f42:	1d19      	adds	r1, r3, #4
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	9103      	str	r1, [sp, #12]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	bfbb      	ittet	lt
 8010f4c:	425b      	neglt	r3, r3
 8010f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8010f52:	9307      	strge	r3, [sp, #28]
 8010f54:	9307      	strlt	r3, [sp, #28]
 8010f56:	bfb8      	it	lt
 8010f58:	9204      	strlt	r2, [sp, #16]
 8010f5a:	7823      	ldrb	r3, [r4, #0]
 8010f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f5e:	d10c      	bne.n	8010f7a <_vfiprintf_r+0x15a>
 8010f60:	7863      	ldrb	r3, [r4, #1]
 8010f62:	2b2a      	cmp	r3, #42	; 0x2a
 8010f64:	d134      	bne.n	8010fd0 <_vfiprintf_r+0x1b0>
 8010f66:	9b03      	ldr	r3, [sp, #12]
 8010f68:	1d1a      	adds	r2, r3, #4
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	9203      	str	r2, [sp, #12]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	bfb8      	it	lt
 8010f72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010f76:	3402      	adds	r4, #2
 8010f78:	9305      	str	r3, [sp, #20]
 8010f7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011050 <_vfiprintf_r+0x230>
 8010f7e:	7821      	ldrb	r1, [r4, #0]
 8010f80:	2203      	movs	r2, #3
 8010f82:	4650      	mov	r0, sl
 8010f84:	f7ef f944 	bl	8000210 <memchr>
 8010f88:	b138      	cbz	r0, 8010f9a <_vfiprintf_r+0x17a>
 8010f8a:	9b04      	ldr	r3, [sp, #16]
 8010f8c:	eba0 000a 	sub.w	r0, r0, sl
 8010f90:	2240      	movs	r2, #64	; 0x40
 8010f92:	4082      	lsls	r2, r0
 8010f94:	4313      	orrs	r3, r2
 8010f96:	3401      	adds	r4, #1
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f9e:	4829      	ldr	r0, [pc, #164]	; (8011044 <_vfiprintf_r+0x224>)
 8010fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fa4:	2206      	movs	r2, #6
 8010fa6:	f7ef f933 	bl	8000210 <memchr>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d03f      	beq.n	801102e <_vfiprintf_r+0x20e>
 8010fae:	4b26      	ldr	r3, [pc, #152]	; (8011048 <_vfiprintf_r+0x228>)
 8010fb0:	bb1b      	cbnz	r3, 8010ffa <_vfiprintf_r+0x1da>
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	3307      	adds	r3, #7
 8010fb6:	f023 0307 	bic.w	r3, r3, #7
 8010fba:	3308      	adds	r3, #8
 8010fbc:	9303      	str	r3, [sp, #12]
 8010fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc0:	443b      	add	r3, r7
 8010fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc4:	e768      	b.n	8010e98 <_vfiprintf_r+0x78>
 8010fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fca:	460c      	mov	r4, r1
 8010fcc:	2001      	movs	r0, #1
 8010fce:	e7a6      	b.n	8010f1e <_vfiprintf_r+0xfe>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	3401      	adds	r4, #1
 8010fd4:	9305      	str	r3, [sp, #20]
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	f04f 0c0a 	mov.w	ip, #10
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fe2:	3a30      	subs	r2, #48	; 0x30
 8010fe4:	2a09      	cmp	r2, #9
 8010fe6:	d903      	bls.n	8010ff0 <_vfiprintf_r+0x1d0>
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d0c6      	beq.n	8010f7a <_vfiprintf_r+0x15a>
 8010fec:	9105      	str	r1, [sp, #20]
 8010fee:	e7c4      	b.n	8010f7a <_vfiprintf_r+0x15a>
 8010ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e7f0      	b.n	8010fdc <_vfiprintf_r+0x1bc>
 8010ffa:	ab03      	add	r3, sp, #12
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	462a      	mov	r2, r5
 8011000:	4b12      	ldr	r3, [pc, #72]	; (801104c <_vfiprintf_r+0x22c>)
 8011002:	a904      	add	r1, sp, #16
 8011004:	4630      	mov	r0, r6
 8011006:	f3af 8000 	nop.w
 801100a:	4607      	mov	r7, r0
 801100c:	1c78      	adds	r0, r7, #1
 801100e:	d1d6      	bne.n	8010fbe <_vfiprintf_r+0x19e>
 8011010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011012:	07d9      	lsls	r1, r3, #31
 8011014:	d405      	bmi.n	8011022 <_vfiprintf_r+0x202>
 8011016:	89ab      	ldrh	r3, [r5, #12]
 8011018:	059a      	lsls	r2, r3, #22
 801101a:	d402      	bmi.n	8011022 <_vfiprintf_r+0x202>
 801101c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801101e:	f7ff fce7 	bl	80109f0 <__retarget_lock_release_recursive>
 8011022:	89ab      	ldrh	r3, [r5, #12]
 8011024:	065b      	lsls	r3, r3, #25
 8011026:	f53f af1d 	bmi.w	8010e64 <_vfiprintf_r+0x44>
 801102a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801102c:	e71c      	b.n	8010e68 <_vfiprintf_r+0x48>
 801102e:	ab03      	add	r3, sp, #12
 8011030:	9300      	str	r3, [sp, #0]
 8011032:	462a      	mov	r2, r5
 8011034:	4b05      	ldr	r3, [pc, #20]	; (801104c <_vfiprintf_r+0x22c>)
 8011036:	a904      	add	r1, sp, #16
 8011038:	4630      	mov	r0, r6
 801103a:	f000 f879 	bl	8011130 <_printf_i>
 801103e:	e7e4      	b.n	801100a <_vfiprintf_r+0x1ea>
 8011040:	080123f8 	.word	0x080123f8
 8011044:	08012402 	.word	0x08012402
 8011048:	00000000 	.word	0x00000000
 801104c:	08010dfb 	.word	0x08010dfb
 8011050:	080123fe 	.word	0x080123fe

08011054 <_printf_common>:
 8011054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011058:	4616      	mov	r6, r2
 801105a:	4699      	mov	r9, r3
 801105c:	688a      	ldr	r2, [r1, #8]
 801105e:	690b      	ldr	r3, [r1, #16]
 8011060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011064:	4293      	cmp	r3, r2
 8011066:	bfb8      	it	lt
 8011068:	4613      	movlt	r3, r2
 801106a:	6033      	str	r3, [r6, #0]
 801106c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011070:	4607      	mov	r7, r0
 8011072:	460c      	mov	r4, r1
 8011074:	b10a      	cbz	r2, 801107a <_printf_common+0x26>
 8011076:	3301      	adds	r3, #1
 8011078:	6033      	str	r3, [r6, #0]
 801107a:	6823      	ldr	r3, [r4, #0]
 801107c:	0699      	lsls	r1, r3, #26
 801107e:	bf42      	ittt	mi
 8011080:	6833      	ldrmi	r3, [r6, #0]
 8011082:	3302      	addmi	r3, #2
 8011084:	6033      	strmi	r3, [r6, #0]
 8011086:	6825      	ldr	r5, [r4, #0]
 8011088:	f015 0506 	ands.w	r5, r5, #6
 801108c:	d106      	bne.n	801109c <_printf_common+0x48>
 801108e:	f104 0a19 	add.w	sl, r4, #25
 8011092:	68e3      	ldr	r3, [r4, #12]
 8011094:	6832      	ldr	r2, [r6, #0]
 8011096:	1a9b      	subs	r3, r3, r2
 8011098:	42ab      	cmp	r3, r5
 801109a:	dc26      	bgt.n	80110ea <_printf_common+0x96>
 801109c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110a0:	1e13      	subs	r3, r2, #0
 80110a2:	6822      	ldr	r2, [r4, #0]
 80110a4:	bf18      	it	ne
 80110a6:	2301      	movne	r3, #1
 80110a8:	0692      	lsls	r2, r2, #26
 80110aa:	d42b      	bmi.n	8011104 <_printf_common+0xb0>
 80110ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110b0:	4649      	mov	r1, r9
 80110b2:	4638      	mov	r0, r7
 80110b4:	47c0      	blx	r8
 80110b6:	3001      	adds	r0, #1
 80110b8:	d01e      	beq.n	80110f8 <_printf_common+0xa4>
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	6922      	ldr	r2, [r4, #16]
 80110be:	f003 0306 	and.w	r3, r3, #6
 80110c2:	2b04      	cmp	r3, #4
 80110c4:	bf02      	ittt	eq
 80110c6:	68e5      	ldreq	r5, [r4, #12]
 80110c8:	6833      	ldreq	r3, [r6, #0]
 80110ca:	1aed      	subeq	r5, r5, r3
 80110cc:	68a3      	ldr	r3, [r4, #8]
 80110ce:	bf0c      	ite	eq
 80110d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110d4:	2500      	movne	r5, #0
 80110d6:	4293      	cmp	r3, r2
 80110d8:	bfc4      	itt	gt
 80110da:	1a9b      	subgt	r3, r3, r2
 80110dc:	18ed      	addgt	r5, r5, r3
 80110de:	2600      	movs	r6, #0
 80110e0:	341a      	adds	r4, #26
 80110e2:	42b5      	cmp	r5, r6
 80110e4:	d11a      	bne.n	801111c <_printf_common+0xc8>
 80110e6:	2000      	movs	r0, #0
 80110e8:	e008      	b.n	80110fc <_printf_common+0xa8>
 80110ea:	2301      	movs	r3, #1
 80110ec:	4652      	mov	r2, sl
 80110ee:	4649      	mov	r1, r9
 80110f0:	4638      	mov	r0, r7
 80110f2:	47c0      	blx	r8
 80110f4:	3001      	adds	r0, #1
 80110f6:	d103      	bne.n	8011100 <_printf_common+0xac>
 80110f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011100:	3501      	adds	r5, #1
 8011102:	e7c6      	b.n	8011092 <_printf_common+0x3e>
 8011104:	18e1      	adds	r1, r4, r3
 8011106:	1c5a      	adds	r2, r3, #1
 8011108:	2030      	movs	r0, #48	; 0x30
 801110a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801110e:	4422      	add	r2, r4
 8011110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011118:	3302      	adds	r3, #2
 801111a:	e7c7      	b.n	80110ac <_printf_common+0x58>
 801111c:	2301      	movs	r3, #1
 801111e:	4622      	mov	r2, r4
 8011120:	4649      	mov	r1, r9
 8011122:	4638      	mov	r0, r7
 8011124:	47c0      	blx	r8
 8011126:	3001      	adds	r0, #1
 8011128:	d0e6      	beq.n	80110f8 <_printf_common+0xa4>
 801112a:	3601      	adds	r6, #1
 801112c:	e7d9      	b.n	80110e2 <_printf_common+0x8e>
	...

08011130 <_printf_i>:
 8011130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011134:	7e0f      	ldrb	r7, [r1, #24]
 8011136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011138:	2f78      	cmp	r7, #120	; 0x78
 801113a:	4691      	mov	r9, r2
 801113c:	4680      	mov	r8, r0
 801113e:	460c      	mov	r4, r1
 8011140:	469a      	mov	sl, r3
 8011142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011146:	d807      	bhi.n	8011158 <_printf_i+0x28>
 8011148:	2f62      	cmp	r7, #98	; 0x62
 801114a:	d80a      	bhi.n	8011162 <_printf_i+0x32>
 801114c:	2f00      	cmp	r7, #0
 801114e:	f000 80d4 	beq.w	80112fa <_printf_i+0x1ca>
 8011152:	2f58      	cmp	r7, #88	; 0x58
 8011154:	f000 80c0 	beq.w	80112d8 <_printf_i+0x1a8>
 8011158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801115c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011160:	e03a      	b.n	80111d8 <_printf_i+0xa8>
 8011162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011166:	2b15      	cmp	r3, #21
 8011168:	d8f6      	bhi.n	8011158 <_printf_i+0x28>
 801116a:	a101      	add	r1, pc, #4	; (adr r1, 8011170 <_printf_i+0x40>)
 801116c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011170:	080111c9 	.word	0x080111c9
 8011174:	080111dd 	.word	0x080111dd
 8011178:	08011159 	.word	0x08011159
 801117c:	08011159 	.word	0x08011159
 8011180:	08011159 	.word	0x08011159
 8011184:	08011159 	.word	0x08011159
 8011188:	080111dd 	.word	0x080111dd
 801118c:	08011159 	.word	0x08011159
 8011190:	08011159 	.word	0x08011159
 8011194:	08011159 	.word	0x08011159
 8011198:	08011159 	.word	0x08011159
 801119c:	080112e1 	.word	0x080112e1
 80111a0:	08011209 	.word	0x08011209
 80111a4:	0801129b 	.word	0x0801129b
 80111a8:	08011159 	.word	0x08011159
 80111ac:	08011159 	.word	0x08011159
 80111b0:	08011303 	.word	0x08011303
 80111b4:	08011159 	.word	0x08011159
 80111b8:	08011209 	.word	0x08011209
 80111bc:	08011159 	.word	0x08011159
 80111c0:	08011159 	.word	0x08011159
 80111c4:	080112a3 	.word	0x080112a3
 80111c8:	682b      	ldr	r3, [r5, #0]
 80111ca:	1d1a      	adds	r2, r3, #4
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	602a      	str	r2, [r5, #0]
 80111d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111d8:	2301      	movs	r3, #1
 80111da:	e09f      	b.n	801131c <_printf_i+0x1ec>
 80111dc:	6820      	ldr	r0, [r4, #0]
 80111de:	682b      	ldr	r3, [r5, #0]
 80111e0:	0607      	lsls	r7, r0, #24
 80111e2:	f103 0104 	add.w	r1, r3, #4
 80111e6:	6029      	str	r1, [r5, #0]
 80111e8:	d501      	bpl.n	80111ee <_printf_i+0xbe>
 80111ea:	681e      	ldr	r6, [r3, #0]
 80111ec:	e003      	b.n	80111f6 <_printf_i+0xc6>
 80111ee:	0646      	lsls	r6, r0, #25
 80111f0:	d5fb      	bpl.n	80111ea <_printf_i+0xba>
 80111f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80111f6:	2e00      	cmp	r6, #0
 80111f8:	da03      	bge.n	8011202 <_printf_i+0xd2>
 80111fa:	232d      	movs	r3, #45	; 0x2d
 80111fc:	4276      	negs	r6, r6
 80111fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011202:	485a      	ldr	r0, [pc, #360]	; (801136c <_printf_i+0x23c>)
 8011204:	230a      	movs	r3, #10
 8011206:	e012      	b.n	801122e <_printf_i+0xfe>
 8011208:	682b      	ldr	r3, [r5, #0]
 801120a:	6820      	ldr	r0, [r4, #0]
 801120c:	1d19      	adds	r1, r3, #4
 801120e:	6029      	str	r1, [r5, #0]
 8011210:	0605      	lsls	r5, r0, #24
 8011212:	d501      	bpl.n	8011218 <_printf_i+0xe8>
 8011214:	681e      	ldr	r6, [r3, #0]
 8011216:	e002      	b.n	801121e <_printf_i+0xee>
 8011218:	0641      	lsls	r1, r0, #25
 801121a:	d5fb      	bpl.n	8011214 <_printf_i+0xe4>
 801121c:	881e      	ldrh	r6, [r3, #0]
 801121e:	4853      	ldr	r0, [pc, #332]	; (801136c <_printf_i+0x23c>)
 8011220:	2f6f      	cmp	r7, #111	; 0x6f
 8011222:	bf0c      	ite	eq
 8011224:	2308      	moveq	r3, #8
 8011226:	230a      	movne	r3, #10
 8011228:	2100      	movs	r1, #0
 801122a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801122e:	6865      	ldr	r5, [r4, #4]
 8011230:	60a5      	str	r5, [r4, #8]
 8011232:	2d00      	cmp	r5, #0
 8011234:	bfa2      	ittt	ge
 8011236:	6821      	ldrge	r1, [r4, #0]
 8011238:	f021 0104 	bicge.w	r1, r1, #4
 801123c:	6021      	strge	r1, [r4, #0]
 801123e:	b90e      	cbnz	r6, 8011244 <_printf_i+0x114>
 8011240:	2d00      	cmp	r5, #0
 8011242:	d04b      	beq.n	80112dc <_printf_i+0x1ac>
 8011244:	4615      	mov	r5, r2
 8011246:	fbb6 f1f3 	udiv	r1, r6, r3
 801124a:	fb03 6711 	mls	r7, r3, r1, r6
 801124e:	5dc7      	ldrb	r7, [r0, r7]
 8011250:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011254:	4637      	mov	r7, r6
 8011256:	42bb      	cmp	r3, r7
 8011258:	460e      	mov	r6, r1
 801125a:	d9f4      	bls.n	8011246 <_printf_i+0x116>
 801125c:	2b08      	cmp	r3, #8
 801125e:	d10b      	bne.n	8011278 <_printf_i+0x148>
 8011260:	6823      	ldr	r3, [r4, #0]
 8011262:	07de      	lsls	r6, r3, #31
 8011264:	d508      	bpl.n	8011278 <_printf_i+0x148>
 8011266:	6923      	ldr	r3, [r4, #16]
 8011268:	6861      	ldr	r1, [r4, #4]
 801126a:	4299      	cmp	r1, r3
 801126c:	bfde      	ittt	le
 801126e:	2330      	movle	r3, #48	; 0x30
 8011270:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011274:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011278:	1b52      	subs	r2, r2, r5
 801127a:	6122      	str	r2, [r4, #16]
 801127c:	f8cd a000 	str.w	sl, [sp]
 8011280:	464b      	mov	r3, r9
 8011282:	aa03      	add	r2, sp, #12
 8011284:	4621      	mov	r1, r4
 8011286:	4640      	mov	r0, r8
 8011288:	f7ff fee4 	bl	8011054 <_printf_common>
 801128c:	3001      	adds	r0, #1
 801128e:	d14a      	bne.n	8011326 <_printf_i+0x1f6>
 8011290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011294:	b004      	add	sp, #16
 8011296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	f043 0320 	orr.w	r3, r3, #32
 80112a0:	6023      	str	r3, [r4, #0]
 80112a2:	4833      	ldr	r0, [pc, #204]	; (8011370 <_printf_i+0x240>)
 80112a4:	2778      	movs	r7, #120	; 0x78
 80112a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	6829      	ldr	r1, [r5, #0]
 80112ae:	061f      	lsls	r7, r3, #24
 80112b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80112b4:	d402      	bmi.n	80112bc <_printf_i+0x18c>
 80112b6:	065f      	lsls	r7, r3, #25
 80112b8:	bf48      	it	mi
 80112ba:	b2b6      	uxthmi	r6, r6
 80112bc:	07df      	lsls	r7, r3, #31
 80112be:	bf48      	it	mi
 80112c0:	f043 0320 	orrmi.w	r3, r3, #32
 80112c4:	6029      	str	r1, [r5, #0]
 80112c6:	bf48      	it	mi
 80112c8:	6023      	strmi	r3, [r4, #0]
 80112ca:	b91e      	cbnz	r6, 80112d4 <_printf_i+0x1a4>
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	f023 0320 	bic.w	r3, r3, #32
 80112d2:	6023      	str	r3, [r4, #0]
 80112d4:	2310      	movs	r3, #16
 80112d6:	e7a7      	b.n	8011228 <_printf_i+0xf8>
 80112d8:	4824      	ldr	r0, [pc, #144]	; (801136c <_printf_i+0x23c>)
 80112da:	e7e4      	b.n	80112a6 <_printf_i+0x176>
 80112dc:	4615      	mov	r5, r2
 80112de:	e7bd      	b.n	801125c <_printf_i+0x12c>
 80112e0:	682b      	ldr	r3, [r5, #0]
 80112e2:	6826      	ldr	r6, [r4, #0]
 80112e4:	6961      	ldr	r1, [r4, #20]
 80112e6:	1d18      	adds	r0, r3, #4
 80112e8:	6028      	str	r0, [r5, #0]
 80112ea:	0635      	lsls	r5, r6, #24
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	d501      	bpl.n	80112f4 <_printf_i+0x1c4>
 80112f0:	6019      	str	r1, [r3, #0]
 80112f2:	e002      	b.n	80112fa <_printf_i+0x1ca>
 80112f4:	0670      	lsls	r0, r6, #25
 80112f6:	d5fb      	bpl.n	80112f0 <_printf_i+0x1c0>
 80112f8:	8019      	strh	r1, [r3, #0]
 80112fa:	2300      	movs	r3, #0
 80112fc:	6123      	str	r3, [r4, #16]
 80112fe:	4615      	mov	r5, r2
 8011300:	e7bc      	b.n	801127c <_printf_i+0x14c>
 8011302:	682b      	ldr	r3, [r5, #0]
 8011304:	1d1a      	adds	r2, r3, #4
 8011306:	602a      	str	r2, [r5, #0]
 8011308:	681d      	ldr	r5, [r3, #0]
 801130a:	6862      	ldr	r2, [r4, #4]
 801130c:	2100      	movs	r1, #0
 801130e:	4628      	mov	r0, r5
 8011310:	f7ee ff7e 	bl	8000210 <memchr>
 8011314:	b108      	cbz	r0, 801131a <_printf_i+0x1ea>
 8011316:	1b40      	subs	r0, r0, r5
 8011318:	6060      	str	r0, [r4, #4]
 801131a:	6863      	ldr	r3, [r4, #4]
 801131c:	6123      	str	r3, [r4, #16]
 801131e:	2300      	movs	r3, #0
 8011320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011324:	e7aa      	b.n	801127c <_printf_i+0x14c>
 8011326:	6923      	ldr	r3, [r4, #16]
 8011328:	462a      	mov	r2, r5
 801132a:	4649      	mov	r1, r9
 801132c:	4640      	mov	r0, r8
 801132e:	47d0      	blx	sl
 8011330:	3001      	adds	r0, #1
 8011332:	d0ad      	beq.n	8011290 <_printf_i+0x160>
 8011334:	6823      	ldr	r3, [r4, #0]
 8011336:	079b      	lsls	r3, r3, #30
 8011338:	d413      	bmi.n	8011362 <_printf_i+0x232>
 801133a:	68e0      	ldr	r0, [r4, #12]
 801133c:	9b03      	ldr	r3, [sp, #12]
 801133e:	4298      	cmp	r0, r3
 8011340:	bfb8      	it	lt
 8011342:	4618      	movlt	r0, r3
 8011344:	e7a6      	b.n	8011294 <_printf_i+0x164>
 8011346:	2301      	movs	r3, #1
 8011348:	4632      	mov	r2, r6
 801134a:	4649      	mov	r1, r9
 801134c:	4640      	mov	r0, r8
 801134e:	47d0      	blx	sl
 8011350:	3001      	adds	r0, #1
 8011352:	d09d      	beq.n	8011290 <_printf_i+0x160>
 8011354:	3501      	adds	r5, #1
 8011356:	68e3      	ldr	r3, [r4, #12]
 8011358:	9903      	ldr	r1, [sp, #12]
 801135a:	1a5b      	subs	r3, r3, r1
 801135c:	42ab      	cmp	r3, r5
 801135e:	dcf2      	bgt.n	8011346 <_printf_i+0x216>
 8011360:	e7eb      	b.n	801133a <_printf_i+0x20a>
 8011362:	2500      	movs	r5, #0
 8011364:	f104 0619 	add.w	r6, r4, #25
 8011368:	e7f5      	b.n	8011356 <_printf_i+0x226>
 801136a:	bf00      	nop
 801136c:	08012409 	.word	0x08012409
 8011370:	0801241a 	.word	0x0801241a

08011374 <__sflush_r>:
 8011374:	898a      	ldrh	r2, [r1, #12]
 8011376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137a:	4605      	mov	r5, r0
 801137c:	0710      	lsls	r0, r2, #28
 801137e:	460c      	mov	r4, r1
 8011380:	d458      	bmi.n	8011434 <__sflush_r+0xc0>
 8011382:	684b      	ldr	r3, [r1, #4]
 8011384:	2b00      	cmp	r3, #0
 8011386:	dc05      	bgt.n	8011394 <__sflush_r+0x20>
 8011388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801138a:	2b00      	cmp	r3, #0
 801138c:	dc02      	bgt.n	8011394 <__sflush_r+0x20>
 801138e:	2000      	movs	r0, #0
 8011390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011396:	2e00      	cmp	r6, #0
 8011398:	d0f9      	beq.n	801138e <__sflush_r+0x1a>
 801139a:	2300      	movs	r3, #0
 801139c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113a0:	682f      	ldr	r7, [r5, #0]
 80113a2:	6a21      	ldr	r1, [r4, #32]
 80113a4:	602b      	str	r3, [r5, #0]
 80113a6:	d032      	beq.n	801140e <__sflush_r+0x9a>
 80113a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113aa:	89a3      	ldrh	r3, [r4, #12]
 80113ac:	075a      	lsls	r2, r3, #29
 80113ae:	d505      	bpl.n	80113bc <__sflush_r+0x48>
 80113b0:	6863      	ldr	r3, [r4, #4]
 80113b2:	1ac0      	subs	r0, r0, r3
 80113b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113b6:	b10b      	cbz	r3, 80113bc <__sflush_r+0x48>
 80113b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113ba:	1ac0      	subs	r0, r0, r3
 80113bc:	2300      	movs	r3, #0
 80113be:	4602      	mov	r2, r0
 80113c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113c2:	6a21      	ldr	r1, [r4, #32]
 80113c4:	4628      	mov	r0, r5
 80113c6:	47b0      	blx	r6
 80113c8:	1c43      	adds	r3, r0, #1
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	d106      	bne.n	80113dc <__sflush_r+0x68>
 80113ce:	6829      	ldr	r1, [r5, #0]
 80113d0:	291d      	cmp	r1, #29
 80113d2:	d82b      	bhi.n	801142c <__sflush_r+0xb8>
 80113d4:	4a29      	ldr	r2, [pc, #164]	; (801147c <__sflush_r+0x108>)
 80113d6:	410a      	asrs	r2, r1
 80113d8:	07d6      	lsls	r6, r2, #31
 80113da:	d427      	bmi.n	801142c <__sflush_r+0xb8>
 80113dc:	2200      	movs	r2, #0
 80113de:	6062      	str	r2, [r4, #4]
 80113e0:	04d9      	lsls	r1, r3, #19
 80113e2:	6922      	ldr	r2, [r4, #16]
 80113e4:	6022      	str	r2, [r4, #0]
 80113e6:	d504      	bpl.n	80113f2 <__sflush_r+0x7e>
 80113e8:	1c42      	adds	r2, r0, #1
 80113ea:	d101      	bne.n	80113f0 <__sflush_r+0x7c>
 80113ec:	682b      	ldr	r3, [r5, #0]
 80113ee:	b903      	cbnz	r3, 80113f2 <__sflush_r+0x7e>
 80113f0:	6560      	str	r0, [r4, #84]	; 0x54
 80113f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113f4:	602f      	str	r7, [r5, #0]
 80113f6:	2900      	cmp	r1, #0
 80113f8:	d0c9      	beq.n	801138e <__sflush_r+0x1a>
 80113fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113fe:	4299      	cmp	r1, r3
 8011400:	d002      	beq.n	8011408 <__sflush_r+0x94>
 8011402:	4628      	mov	r0, r5
 8011404:	f7ff fb36 	bl	8010a74 <_free_r>
 8011408:	2000      	movs	r0, #0
 801140a:	6360      	str	r0, [r4, #52]	; 0x34
 801140c:	e7c0      	b.n	8011390 <__sflush_r+0x1c>
 801140e:	2301      	movs	r3, #1
 8011410:	4628      	mov	r0, r5
 8011412:	47b0      	blx	r6
 8011414:	1c41      	adds	r1, r0, #1
 8011416:	d1c8      	bne.n	80113aa <__sflush_r+0x36>
 8011418:	682b      	ldr	r3, [r5, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d0c5      	beq.n	80113aa <__sflush_r+0x36>
 801141e:	2b1d      	cmp	r3, #29
 8011420:	d001      	beq.n	8011426 <__sflush_r+0xb2>
 8011422:	2b16      	cmp	r3, #22
 8011424:	d101      	bne.n	801142a <__sflush_r+0xb6>
 8011426:	602f      	str	r7, [r5, #0]
 8011428:	e7b1      	b.n	801138e <__sflush_r+0x1a>
 801142a:	89a3      	ldrh	r3, [r4, #12]
 801142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011430:	81a3      	strh	r3, [r4, #12]
 8011432:	e7ad      	b.n	8011390 <__sflush_r+0x1c>
 8011434:	690f      	ldr	r7, [r1, #16]
 8011436:	2f00      	cmp	r7, #0
 8011438:	d0a9      	beq.n	801138e <__sflush_r+0x1a>
 801143a:	0793      	lsls	r3, r2, #30
 801143c:	680e      	ldr	r6, [r1, #0]
 801143e:	bf08      	it	eq
 8011440:	694b      	ldreq	r3, [r1, #20]
 8011442:	600f      	str	r7, [r1, #0]
 8011444:	bf18      	it	ne
 8011446:	2300      	movne	r3, #0
 8011448:	eba6 0807 	sub.w	r8, r6, r7
 801144c:	608b      	str	r3, [r1, #8]
 801144e:	f1b8 0f00 	cmp.w	r8, #0
 8011452:	dd9c      	ble.n	801138e <__sflush_r+0x1a>
 8011454:	6a21      	ldr	r1, [r4, #32]
 8011456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011458:	4643      	mov	r3, r8
 801145a:	463a      	mov	r2, r7
 801145c:	4628      	mov	r0, r5
 801145e:	47b0      	blx	r6
 8011460:	2800      	cmp	r0, #0
 8011462:	dc06      	bgt.n	8011472 <__sflush_r+0xfe>
 8011464:	89a3      	ldrh	r3, [r4, #12]
 8011466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801146a:	81a3      	strh	r3, [r4, #12]
 801146c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011470:	e78e      	b.n	8011390 <__sflush_r+0x1c>
 8011472:	4407      	add	r7, r0
 8011474:	eba8 0800 	sub.w	r8, r8, r0
 8011478:	e7e9      	b.n	801144e <__sflush_r+0xda>
 801147a:	bf00      	nop
 801147c:	dfbffffe 	.word	0xdfbffffe

08011480 <_fflush_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	690b      	ldr	r3, [r1, #16]
 8011484:	4605      	mov	r5, r0
 8011486:	460c      	mov	r4, r1
 8011488:	b913      	cbnz	r3, 8011490 <_fflush_r+0x10>
 801148a:	2500      	movs	r5, #0
 801148c:	4628      	mov	r0, r5
 801148e:	bd38      	pop	{r3, r4, r5, pc}
 8011490:	b118      	cbz	r0, 801149a <_fflush_r+0x1a>
 8011492:	6a03      	ldr	r3, [r0, #32]
 8011494:	b90b      	cbnz	r3, 801149a <_fflush_r+0x1a>
 8011496:	f7ff f8f3 	bl	8010680 <__sinit>
 801149a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d0f3      	beq.n	801148a <_fflush_r+0xa>
 80114a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114a4:	07d0      	lsls	r0, r2, #31
 80114a6:	d404      	bmi.n	80114b2 <_fflush_r+0x32>
 80114a8:	0599      	lsls	r1, r3, #22
 80114aa:	d402      	bmi.n	80114b2 <_fflush_r+0x32>
 80114ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114ae:	f7ff fa9e 	bl	80109ee <__retarget_lock_acquire_recursive>
 80114b2:	4628      	mov	r0, r5
 80114b4:	4621      	mov	r1, r4
 80114b6:	f7ff ff5d 	bl	8011374 <__sflush_r>
 80114ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114bc:	07da      	lsls	r2, r3, #31
 80114be:	4605      	mov	r5, r0
 80114c0:	d4e4      	bmi.n	801148c <_fflush_r+0xc>
 80114c2:	89a3      	ldrh	r3, [r4, #12]
 80114c4:	059b      	lsls	r3, r3, #22
 80114c6:	d4e1      	bmi.n	801148c <_fflush_r+0xc>
 80114c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114ca:	f7ff fa91 	bl	80109f0 <__retarget_lock_release_recursive>
 80114ce:	e7dd      	b.n	801148c <_fflush_r+0xc>

080114d0 <fiprintf>:
 80114d0:	b40e      	push	{r1, r2, r3}
 80114d2:	b503      	push	{r0, r1, lr}
 80114d4:	4601      	mov	r1, r0
 80114d6:	ab03      	add	r3, sp, #12
 80114d8:	4805      	ldr	r0, [pc, #20]	; (80114f0 <fiprintf+0x20>)
 80114da:	f853 2b04 	ldr.w	r2, [r3], #4
 80114de:	6800      	ldr	r0, [r0, #0]
 80114e0:	9301      	str	r3, [sp, #4]
 80114e2:	f7ff fc9d 	bl	8010e20 <_vfiprintf_r>
 80114e6:	b002      	add	sp, #8
 80114e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114ec:	b003      	add	sp, #12
 80114ee:	4770      	bx	lr
 80114f0:	2000010c 	.word	0x2000010c

080114f4 <__swbuf_r>:
 80114f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114f6:	460e      	mov	r6, r1
 80114f8:	4614      	mov	r4, r2
 80114fa:	4605      	mov	r5, r0
 80114fc:	b118      	cbz	r0, 8011506 <__swbuf_r+0x12>
 80114fe:	6a03      	ldr	r3, [r0, #32]
 8011500:	b90b      	cbnz	r3, 8011506 <__swbuf_r+0x12>
 8011502:	f7ff f8bd 	bl	8010680 <__sinit>
 8011506:	69a3      	ldr	r3, [r4, #24]
 8011508:	60a3      	str	r3, [r4, #8]
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	071a      	lsls	r2, r3, #28
 801150e:	d525      	bpl.n	801155c <__swbuf_r+0x68>
 8011510:	6923      	ldr	r3, [r4, #16]
 8011512:	b31b      	cbz	r3, 801155c <__swbuf_r+0x68>
 8011514:	6823      	ldr	r3, [r4, #0]
 8011516:	6922      	ldr	r2, [r4, #16]
 8011518:	1a98      	subs	r0, r3, r2
 801151a:	6963      	ldr	r3, [r4, #20]
 801151c:	b2f6      	uxtb	r6, r6
 801151e:	4283      	cmp	r3, r0
 8011520:	4637      	mov	r7, r6
 8011522:	dc04      	bgt.n	801152e <__swbuf_r+0x3a>
 8011524:	4621      	mov	r1, r4
 8011526:	4628      	mov	r0, r5
 8011528:	f7ff ffaa 	bl	8011480 <_fflush_r>
 801152c:	b9e0      	cbnz	r0, 8011568 <__swbuf_r+0x74>
 801152e:	68a3      	ldr	r3, [r4, #8]
 8011530:	3b01      	subs	r3, #1
 8011532:	60a3      	str	r3, [r4, #8]
 8011534:	6823      	ldr	r3, [r4, #0]
 8011536:	1c5a      	adds	r2, r3, #1
 8011538:	6022      	str	r2, [r4, #0]
 801153a:	701e      	strb	r6, [r3, #0]
 801153c:	6962      	ldr	r2, [r4, #20]
 801153e:	1c43      	adds	r3, r0, #1
 8011540:	429a      	cmp	r2, r3
 8011542:	d004      	beq.n	801154e <__swbuf_r+0x5a>
 8011544:	89a3      	ldrh	r3, [r4, #12]
 8011546:	07db      	lsls	r3, r3, #31
 8011548:	d506      	bpl.n	8011558 <__swbuf_r+0x64>
 801154a:	2e0a      	cmp	r6, #10
 801154c:	d104      	bne.n	8011558 <__swbuf_r+0x64>
 801154e:	4621      	mov	r1, r4
 8011550:	4628      	mov	r0, r5
 8011552:	f7ff ff95 	bl	8011480 <_fflush_r>
 8011556:	b938      	cbnz	r0, 8011568 <__swbuf_r+0x74>
 8011558:	4638      	mov	r0, r7
 801155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801155c:	4621      	mov	r1, r4
 801155e:	4628      	mov	r0, r5
 8011560:	f000 f806 	bl	8011570 <__swsetup_r>
 8011564:	2800      	cmp	r0, #0
 8011566:	d0d5      	beq.n	8011514 <__swbuf_r+0x20>
 8011568:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801156c:	e7f4      	b.n	8011558 <__swbuf_r+0x64>
	...

08011570 <__swsetup_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4b2a      	ldr	r3, [pc, #168]	; (801161c <__swsetup_r+0xac>)
 8011574:	4605      	mov	r5, r0
 8011576:	6818      	ldr	r0, [r3, #0]
 8011578:	460c      	mov	r4, r1
 801157a:	b118      	cbz	r0, 8011584 <__swsetup_r+0x14>
 801157c:	6a03      	ldr	r3, [r0, #32]
 801157e:	b90b      	cbnz	r3, 8011584 <__swsetup_r+0x14>
 8011580:	f7ff f87e 	bl	8010680 <__sinit>
 8011584:	89a3      	ldrh	r3, [r4, #12]
 8011586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801158a:	0718      	lsls	r0, r3, #28
 801158c:	d422      	bmi.n	80115d4 <__swsetup_r+0x64>
 801158e:	06d9      	lsls	r1, r3, #27
 8011590:	d407      	bmi.n	80115a2 <__swsetup_r+0x32>
 8011592:	2309      	movs	r3, #9
 8011594:	602b      	str	r3, [r5, #0]
 8011596:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801159a:	81a3      	strh	r3, [r4, #12]
 801159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115a0:	e034      	b.n	801160c <__swsetup_r+0x9c>
 80115a2:	0758      	lsls	r0, r3, #29
 80115a4:	d512      	bpl.n	80115cc <__swsetup_r+0x5c>
 80115a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115a8:	b141      	cbz	r1, 80115bc <__swsetup_r+0x4c>
 80115aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115ae:	4299      	cmp	r1, r3
 80115b0:	d002      	beq.n	80115b8 <__swsetup_r+0x48>
 80115b2:	4628      	mov	r0, r5
 80115b4:	f7ff fa5e 	bl	8010a74 <_free_r>
 80115b8:	2300      	movs	r3, #0
 80115ba:	6363      	str	r3, [r4, #52]	; 0x34
 80115bc:	89a3      	ldrh	r3, [r4, #12]
 80115be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80115c2:	81a3      	strh	r3, [r4, #12]
 80115c4:	2300      	movs	r3, #0
 80115c6:	6063      	str	r3, [r4, #4]
 80115c8:	6923      	ldr	r3, [r4, #16]
 80115ca:	6023      	str	r3, [r4, #0]
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	f043 0308 	orr.w	r3, r3, #8
 80115d2:	81a3      	strh	r3, [r4, #12]
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	b94b      	cbnz	r3, 80115ec <__swsetup_r+0x7c>
 80115d8:	89a3      	ldrh	r3, [r4, #12]
 80115da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115e2:	d003      	beq.n	80115ec <__swsetup_r+0x7c>
 80115e4:	4621      	mov	r1, r4
 80115e6:	4628      	mov	r0, r5
 80115e8:	f000 f861 	bl	80116ae <__smakebuf_r>
 80115ec:	89a0      	ldrh	r0, [r4, #12]
 80115ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115f2:	f010 0301 	ands.w	r3, r0, #1
 80115f6:	d00a      	beq.n	801160e <__swsetup_r+0x9e>
 80115f8:	2300      	movs	r3, #0
 80115fa:	60a3      	str	r3, [r4, #8]
 80115fc:	6963      	ldr	r3, [r4, #20]
 80115fe:	425b      	negs	r3, r3
 8011600:	61a3      	str	r3, [r4, #24]
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	b943      	cbnz	r3, 8011618 <__swsetup_r+0xa8>
 8011606:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801160a:	d1c4      	bne.n	8011596 <__swsetup_r+0x26>
 801160c:	bd38      	pop	{r3, r4, r5, pc}
 801160e:	0781      	lsls	r1, r0, #30
 8011610:	bf58      	it	pl
 8011612:	6963      	ldrpl	r3, [r4, #20]
 8011614:	60a3      	str	r3, [r4, #8]
 8011616:	e7f4      	b.n	8011602 <__swsetup_r+0x92>
 8011618:	2000      	movs	r0, #0
 801161a:	e7f7      	b.n	801160c <__swsetup_r+0x9c>
 801161c:	2000010c 	.word	0x2000010c

08011620 <memmove>:
 8011620:	4288      	cmp	r0, r1
 8011622:	b510      	push	{r4, lr}
 8011624:	eb01 0402 	add.w	r4, r1, r2
 8011628:	d902      	bls.n	8011630 <memmove+0x10>
 801162a:	4284      	cmp	r4, r0
 801162c:	4623      	mov	r3, r4
 801162e:	d807      	bhi.n	8011640 <memmove+0x20>
 8011630:	1e43      	subs	r3, r0, #1
 8011632:	42a1      	cmp	r1, r4
 8011634:	d008      	beq.n	8011648 <memmove+0x28>
 8011636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801163a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801163e:	e7f8      	b.n	8011632 <memmove+0x12>
 8011640:	4402      	add	r2, r0
 8011642:	4601      	mov	r1, r0
 8011644:	428a      	cmp	r2, r1
 8011646:	d100      	bne.n	801164a <memmove+0x2a>
 8011648:	bd10      	pop	{r4, pc}
 801164a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801164e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011652:	e7f7      	b.n	8011644 <memmove+0x24>

08011654 <abort>:
 8011654:	b508      	push	{r3, lr}
 8011656:	2006      	movs	r0, #6
 8011658:	f000 f88e 	bl	8011778 <raise>
 801165c:	2001      	movs	r0, #1
 801165e:	f7f0 f80f 	bl	8001680 <_exit>

08011662 <__swhatbuf_r>:
 8011662:	b570      	push	{r4, r5, r6, lr}
 8011664:	460c      	mov	r4, r1
 8011666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801166a:	2900      	cmp	r1, #0
 801166c:	b096      	sub	sp, #88	; 0x58
 801166e:	4615      	mov	r5, r2
 8011670:	461e      	mov	r6, r3
 8011672:	da0d      	bge.n	8011690 <__swhatbuf_r+0x2e>
 8011674:	89a3      	ldrh	r3, [r4, #12]
 8011676:	f013 0f80 	tst.w	r3, #128	; 0x80
 801167a:	f04f 0100 	mov.w	r1, #0
 801167e:	bf0c      	ite	eq
 8011680:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011684:	2340      	movne	r3, #64	; 0x40
 8011686:	2000      	movs	r0, #0
 8011688:	6031      	str	r1, [r6, #0]
 801168a:	602b      	str	r3, [r5, #0]
 801168c:	b016      	add	sp, #88	; 0x58
 801168e:	bd70      	pop	{r4, r5, r6, pc}
 8011690:	466a      	mov	r2, sp
 8011692:	f000 f879 	bl	8011788 <_fstat_r>
 8011696:	2800      	cmp	r0, #0
 8011698:	dbec      	blt.n	8011674 <__swhatbuf_r+0x12>
 801169a:	9901      	ldr	r1, [sp, #4]
 801169c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80116a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80116a4:	4259      	negs	r1, r3
 80116a6:	4159      	adcs	r1, r3
 80116a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116ac:	e7eb      	b.n	8011686 <__swhatbuf_r+0x24>

080116ae <__smakebuf_r>:
 80116ae:	898b      	ldrh	r3, [r1, #12]
 80116b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116b2:	079d      	lsls	r5, r3, #30
 80116b4:	4606      	mov	r6, r0
 80116b6:	460c      	mov	r4, r1
 80116b8:	d507      	bpl.n	80116ca <__smakebuf_r+0x1c>
 80116ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116be:	6023      	str	r3, [r4, #0]
 80116c0:	6123      	str	r3, [r4, #16]
 80116c2:	2301      	movs	r3, #1
 80116c4:	6163      	str	r3, [r4, #20]
 80116c6:	b002      	add	sp, #8
 80116c8:	bd70      	pop	{r4, r5, r6, pc}
 80116ca:	ab01      	add	r3, sp, #4
 80116cc:	466a      	mov	r2, sp
 80116ce:	f7ff ffc8 	bl	8011662 <__swhatbuf_r>
 80116d2:	9900      	ldr	r1, [sp, #0]
 80116d4:	4605      	mov	r5, r0
 80116d6:	4630      	mov	r0, r6
 80116d8:	f7fe fd9a 	bl	8010210 <_malloc_r>
 80116dc:	b948      	cbnz	r0, 80116f2 <__smakebuf_r+0x44>
 80116de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116e2:	059a      	lsls	r2, r3, #22
 80116e4:	d4ef      	bmi.n	80116c6 <__smakebuf_r+0x18>
 80116e6:	f023 0303 	bic.w	r3, r3, #3
 80116ea:	f043 0302 	orr.w	r3, r3, #2
 80116ee:	81a3      	strh	r3, [r4, #12]
 80116f0:	e7e3      	b.n	80116ba <__smakebuf_r+0xc>
 80116f2:	89a3      	ldrh	r3, [r4, #12]
 80116f4:	6020      	str	r0, [r4, #0]
 80116f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116fa:	81a3      	strh	r3, [r4, #12]
 80116fc:	9b00      	ldr	r3, [sp, #0]
 80116fe:	6163      	str	r3, [r4, #20]
 8011700:	9b01      	ldr	r3, [sp, #4]
 8011702:	6120      	str	r0, [r4, #16]
 8011704:	b15b      	cbz	r3, 801171e <__smakebuf_r+0x70>
 8011706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801170a:	4630      	mov	r0, r6
 801170c:	f000 f84e 	bl	80117ac <_isatty_r>
 8011710:	b128      	cbz	r0, 801171e <__smakebuf_r+0x70>
 8011712:	89a3      	ldrh	r3, [r4, #12]
 8011714:	f023 0303 	bic.w	r3, r3, #3
 8011718:	f043 0301 	orr.w	r3, r3, #1
 801171c:	81a3      	strh	r3, [r4, #12]
 801171e:	89a3      	ldrh	r3, [r4, #12]
 8011720:	431d      	orrs	r5, r3
 8011722:	81a5      	strh	r5, [r4, #12]
 8011724:	e7cf      	b.n	80116c6 <__smakebuf_r+0x18>

08011726 <_raise_r>:
 8011726:	291f      	cmp	r1, #31
 8011728:	b538      	push	{r3, r4, r5, lr}
 801172a:	4604      	mov	r4, r0
 801172c:	460d      	mov	r5, r1
 801172e:	d904      	bls.n	801173a <_raise_r+0x14>
 8011730:	2316      	movs	r3, #22
 8011732:	6003      	str	r3, [r0, #0]
 8011734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011738:	bd38      	pop	{r3, r4, r5, pc}
 801173a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801173c:	b112      	cbz	r2, 8011744 <_raise_r+0x1e>
 801173e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011742:	b94b      	cbnz	r3, 8011758 <_raise_r+0x32>
 8011744:	4620      	mov	r0, r4
 8011746:	f000 f853 	bl	80117f0 <_getpid_r>
 801174a:	462a      	mov	r2, r5
 801174c:	4601      	mov	r1, r0
 801174e:	4620      	mov	r0, r4
 8011750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011754:	f000 b83a 	b.w	80117cc <_kill_r>
 8011758:	2b01      	cmp	r3, #1
 801175a:	d00a      	beq.n	8011772 <_raise_r+0x4c>
 801175c:	1c59      	adds	r1, r3, #1
 801175e:	d103      	bne.n	8011768 <_raise_r+0x42>
 8011760:	2316      	movs	r3, #22
 8011762:	6003      	str	r3, [r0, #0]
 8011764:	2001      	movs	r0, #1
 8011766:	e7e7      	b.n	8011738 <_raise_r+0x12>
 8011768:	2400      	movs	r4, #0
 801176a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801176e:	4628      	mov	r0, r5
 8011770:	4798      	blx	r3
 8011772:	2000      	movs	r0, #0
 8011774:	e7e0      	b.n	8011738 <_raise_r+0x12>
	...

08011778 <raise>:
 8011778:	4b02      	ldr	r3, [pc, #8]	; (8011784 <raise+0xc>)
 801177a:	4601      	mov	r1, r0
 801177c:	6818      	ldr	r0, [r3, #0]
 801177e:	f7ff bfd2 	b.w	8011726 <_raise_r>
 8011782:	bf00      	nop
 8011784:	2000010c 	.word	0x2000010c

08011788 <_fstat_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4d07      	ldr	r5, [pc, #28]	; (80117a8 <_fstat_r+0x20>)
 801178c:	2300      	movs	r3, #0
 801178e:	4604      	mov	r4, r0
 8011790:	4608      	mov	r0, r1
 8011792:	4611      	mov	r1, r2
 8011794:	602b      	str	r3, [r5, #0]
 8011796:	f7ef ffc2 	bl	800171e <_fstat>
 801179a:	1c43      	adds	r3, r0, #1
 801179c:	d102      	bne.n	80117a4 <_fstat_r+0x1c>
 801179e:	682b      	ldr	r3, [r5, #0]
 80117a0:	b103      	cbz	r3, 80117a4 <_fstat_r+0x1c>
 80117a2:	6023      	str	r3, [r4, #0]
 80117a4:	bd38      	pop	{r3, r4, r5, pc}
 80117a6:	bf00      	nop
 80117a8:	2000dc54 	.word	0x2000dc54

080117ac <_isatty_r>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	4d06      	ldr	r5, [pc, #24]	; (80117c8 <_isatty_r+0x1c>)
 80117b0:	2300      	movs	r3, #0
 80117b2:	4604      	mov	r4, r0
 80117b4:	4608      	mov	r0, r1
 80117b6:	602b      	str	r3, [r5, #0]
 80117b8:	f7ef ffc1 	bl	800173e <_isatty>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	d102      	bne.n	80117c6 <_isatty_r+0x1a>
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	b103      	cbz	r3, 80117c6 <_isatty_r+0x1a>
 80117c4:	6023      	str	r3, [r4, #0]
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	2000dc54 	.word	0x2000dc54

080117cc <_kill_r>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	4d07      	ldr	r5, [pc, #28]	; (80117ec <_kill_r+0x20>)
 80117d0:	2300      	movs	r3, #0
 80117d2:	4604      	mov	r4, r0
 80117d4:	4608      	mov	r0, r1
 80117d6:	4611      	mov	r1, r2
 80117d8:	602b      	str	r3, [r5, #0]
 80117da:	f7ef ff41 	bl	8001660 <_kill>
 80117de:	1c43      	adds	r3, r0, #1
 80117e0:	d102      	bne.n	80117e8 <_kill_r+0x1c>
 80117e2:	682b      	ldr	r3, [r5, #0]
 80117e4:	b103      	cbz	r3, 80117e8 <_kill_r+0x1c>
 80117e6:	6023      	str	r3, [r4, #0]
 80117e8:	bd38      	pop	{r3, r4, r5, pc}
 80117ea:	bf00      	nop
 80117ec:	2000dc54 	.word	0x2000dc54

080117f0 <_getpid_r>:
 80117f0:	f7ef bf2e 	b.w	8001650 <_getpid>

080117f4 <_init>:
 80117f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f6:	bf00      	nop
 80117f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117fa:	bc08      	pop	{r3}
 80117fc:	469e      	mov	lr, r3
 80117fe:	4770      	bx	lr

08011800 <_fini>:
 8011800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011802:	bf00      	nop
 8011804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011806:	bc08      	pop	{r3}
 8011808:	469e      	mov	lr, r3
 801180a:	4770      	bx	lr
